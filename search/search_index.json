{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenida al Subm\u00f3dulo WEB I","text":"<p>\u00a1Bienvenidos al Subm\u00f3dulo WEB I! Este curso es la puerta de entrada al desarrollo web, donde sentaremos las bases del JavaScript moderno, un lenguaje esencial para crear aplicaciones web din\u00e1micas e interactivas. A trav\u00e9s de este subm\u00f3dulo, aprender\u00e1s desde los fundamentos hasta t\u00e9cnicas avanzadas para manipular datos, interactuar con el DOM y consumir APIs, todo mientras desarrollas un Proyecto Integrador que consolidar\u00e1 tus habilidades.</p>"},{"location":"#que-aprenderas","title":"\u00bfQu\u00e9 aprender\u00e1s?","text":"<ul> <li>Fundamentos de JavaScript: Tipos de datos (<code>Number</code>, <code>String</code>), variables (<code>let</code>, <code>var</code>, <code>const</code>), operadores (aritm\u00e9ticos, l\u00f3gicos, unarios) y uso de la consola.</li> <li>Estructuras de control: Condicionales (<code>if</code>, <code>else</code>, <code>else if</code>, <code>switch</code>) y ciclos (<code>for</code>, <code>while</code>, <code>do-while</code>).</li> <li>Funciones: Regulares, flecha, an\u00f3nimas, con par\u00e1metros y retorno.</li> <li>Estructuras de datos: Arreglos, objetos, m\u00e9todos avanzados (<code>push</code>, <code>pop</code>, <code>shift</code>, <code>filter</code>) y desestructuraci\u00f3n.</li> <li>Manipulaci\u00f3n del DOM: Selecci\u00f3n y modificaci\u00f3n de elementos HTML desde JavaScript.</li> <li>JavaScript as\u00edncrono: Event Loop, callbacks, promesas, <code>async/await</code> y consumo de APIs con <code>fetch</code>.</li> <li>Proyecto Integrador: Aplicaci\u00f3n pr\u00e1ctica de los conceptos en un proyecto funcional, con seguimientos y sustentaci\u00f3n.</li> </ul>"},{"location":"#estructura-del-curso","title":"Estructura del curso","text":"<p>El curso se divide en tres momentos clave: 1. Primer Momento: Fundamentos de JavaScript, funciones y estructuras de datos. Primer seguimiento al Proyecto Integrador. 2. Segundo Momento: Manipulaci\u00f3n del DOM y aplicaciones integradas. Segundo seguimiento al Proyecto Integrador. 3. Tercer Momento: JavaScript as\u00edncrono, consumo de APIs y sustentaci\u00f3n final del proyecto.</p>"},{"location":"#que-necesitas","title":"\u00bfQu\u00e9 necesitas?","text":"<ul> <li>Conocimientos b\u00e1sicos de HTML y CSS (recomendable).</li> <li>Ganas de aprender y experimentar con c\u00f3digo.</li> </ul> <p>\u00a1Prep\u00e1rate para dominar JavaScript y dar tus primeros pasos en el desarrollo web! Este subm\u00f3dulo te proporcionar\u00e1 las herramientas para construir aplicaciones interactivas y te preparar\u00e1 para el siguiente nivel en el M\u00f3dulo WEB II. \u00a1Empecemos!</p>"},{"location":"activities/m1/act1/","title":"Actividad 1 - Momento 1","text":""},{"location":"activities/m1/act1/#condicionales-javascript-solo-if-else-else-if-switch","title":"Condicionales JavaScript (solo <code>if / else / else if / switch</code>)","text":"<p>Repositorio GitHub \u2192 <code>https://github.com/tu-usuario/condicionales-sin-funciones</code></p>"},{"location":"activities/m1/act1/#instrucciones-rapidas","title":"\ud83d\udce6 Instrucciones r\u00e1pidas","text":"<ol> <li>Fork \u2192 <code>https://github.com/jfinfocesde/act_web1_s2.git</code></li> <li>Clone <pre><code>git clone https://github.com/TU-USUARIO/act_web1_s2.git\ncd condicionales-sin-funciones\n</code></pre></li> <li>Crea un archivo <code>ejercicioX.js</code> (X = 1-10) dentro de <code>/src</code>. IMPORTANTE: usa \u00fanicamente variables, <code>if</code>, <code>else</code>, <code>else if</code>, <code>switch</code>, operadores y <code>console.log</code>. No declares funciones ni uses ciclos.</li> <li>Ejecuta tu archivo: <pre><code>node src/ejercicio1.js\n</code></pre></li> <li>Commit / Push / PR <pre><code>git add .\ngit commit -m \"feat: ejercicio X resuelto\"\ngit push origin main\n</code></pre></li> </ol>"},{"location":"activities/m1/act1/#estructura-del-repo","title":"\ud83d\udcc1 Estructura del repo","text":"<pre><code>condicionales-sin-funciones/\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 ejercicio1.js\n\u2502   \u251c\u2500\u2500 ejercicio2.js\n\u2502   \u251c\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 ejercicio10.js\n\u2514\u2500\u2500 .gitignore\n</code></pre>"},{"location":"activities/m1/act1/#ejercicios-solo-condicionales","title":"\ud83e\udde9 Ejercicios (solo condicionales)","text":""},{"location":"activities/m1/act1/#1-par-o-impar","title":"1\ufe0f\u20e3 Par o Impar","text":"<p>Archivo: <code>src/ejercicio1.js</code> Declara la variable <code>numero = 7;</code>. Imprime <code>\"par\"</code> o <code>\"impar\"</code> seg\u00fan corresponda.</p>"},{"location":"activities/m1/act1/#2-mayor-de-dos-numeros","title":"2\ufe0f\u20e3 Mayor de dos n\u00fameros","text":"<p>Archivo: <code>src/ejercicio2.js</code> Declara <code>a = 14</code> y <code>b = 9</code>. Imprime el mayor de ambos.</p>"},{"location":"activities/m1/act1/#3-clasificacion-de-edad","title":"3\ufe0f\u20e3 Clasificaci\u00f3n de edad","text":"<p>Archivo: <code>src/ejercicio3.js</code> Declara <code>edad = 15</code>. Imprime: - <code>\"ni\u00f1o\"</code> si es 0-12 - <code>\"adolescente\"</code> si es 13-17 - <code>\"adulto\"</code> si es 18-64 - <code>\"anciano\"</code> si es 65 o m\u00e1s</p>"},{"location":"activities/m1/act1/#4-calculadora-basica-con-switch","title":"4\ufe0f\u20e3 Calculadora b\u00e1sica con switch","text":"<p>Archivo: <code>src/ejercicio4.js</code> Declara: <pre><code>let a = 10;\nlet b = 3;\nlet operador = '*';   // puede ser + - * /\n</code></pre> Imprime el resultado o <code>\"operador no v\u00e1lido\"</code>. Si <code>b === 0</code> y <code>operador === '/'</code> imprime <code>\"indeterminado\"</code>.</p>"},{"location":"activities/m1/act1/#5-dia-laborable-o-fin-de-semana","title":"5\ufe0f\u20e3 D\u00eda laborable o fin de semana","text":"<p>Archivo: <code>src/ejercicio5.js</code> Declara <code>dia = 'sabado';</code>. Imprime <code>\"laborable\"</code> para lunes-viernes y <code>\"fin de semana\"</code> para s\u00e1bado o domingo.</p>"},{"location":"activities/m1/act1/#6-nota-a-letra","title":"6\ufe0f\u20e3 Nota a letra","text":"<p>Archivo: <code>src/ejercicio6.js</code> Declara <code>nota = 83</code>. Convierte la nota num\u00e9rica (0-100) a letra e impr\u00edmela: - 90-100 \u2192 <code>\"A\"</code> - 80-89  \u2192 <code>\"B\"</code> - 70-79  \u2192 <code>\"C\"</code> - 60-69  \u2192 <code>\"D\"</code> - &lt; 60   \u2192 <code>\"F\"</code></p>"},{"location":"activities/m1/act1/#7-descuento-por-volumen","title":"7\ufe0f\u20e3 Descuento por volumen","text":"<p>Archivo: <code>src/ejercicio7.js</code> Declara: <pre><code>let precioUnitario = 25;\nlet cantidad = 60;\nlet precioFinal;\n</code></pre> Aplica descuento sobre el total: - 0 % si cantidad &lt; 10 - 10 % si 10 \u2264 cantidad &lt; 50 - 20 % si cantidad \u2265 50 Imprime <code>precioFinal</code> redondeado a 2 decimales.</p>"},{"location":"activities/m1/act1/#8-transporte-con-tarifa-reducida","title":"8\ufe0f\u20e3 Transporte con tarifa reducida","text":"<p>Archivo: <code>src/ejercicio8.js</code> Declara: <pre><code>let edad = 67;\nlet distanciaKm = 120;\nlet tarifaBase = distanciaKm * 0.21;\n</code></pre> Aplica: - 20 % descuento si edad &lt; 18 - 40 % descuento si edad \u2265 65 Imprime el precio final redondeado a 2 decimales.</p>"},{"location":"activities/m1/act1/#9-conversor-de-notas-musicales-switch","title":"9\ufe0f\u20e3 Conversor de notas musicales (switch)","text":"<p>Archivo: <code>src/ejercicio9.js</code> Declara <code>nota = 'LA';</code>. Imprime el n\u00famero MIDI correspondiente: - DO \u2192 60 - RE \u2192 62 - MI \u2192 64 - FA \u2192 65 - SOL \u2192 67 - LA \u2192 69 - SI \u2192 71 Cualquier otro valor \u2192 <code>\"nota desconocida\"</code></p>"},{"location":"activities/m1/act1/#autenticacion-simple","title":"\ud83d\udd1f Autenticaci\u00f3n simple","text":"<p>Archivo: <code>src/ejercicio10.js</code> Declara: <pre><code>let usuario = \"admin\";\nlet contrasena = \"1234\";\n</code></pre> Imprime: - <code>\"acceso concedido\"</code> si coincide exactamente - <code>\"acceso denegado\"</code> en cualquier otro caso</p>"},{"location":"activities/m1/act2/","title":"Actividad 2 - Momento 1","text":""},{"location":"activities/m1/act2/#ejercicios-de-ciclos","title":"Ejercicios de Ciclos","text":""},{"location":"activities/m1/act2/#instrucciones-para-la-actividad","title":"Instrucciones para la Actividad","text":"<p>Configuraci\u00f3n del Repositorio</p> <p>Antes de comenzar con los ejercicios, debes crear un fork del repositorio de la actividad:</p> <ol> <li>Accede al repositorio base: Ve a https://github.com/jfinfocesde/act_web1_s3.git</li> <li>Crear Fork: Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha</li> <li>Clonar tu fork: Clona tu fork a tu m\u00e1quina local usando:    <pre><code>git clone https://github.com/TU-USUARIO/act_web1_s3.git\n</code></pre></li> <li>Estructura del proyecto: El repositorio contiene:</li> <li><code>ejercicios-while/</code> - Carpeta para ejercicios con ciclo while</li> <li><code>ejercicios-for/</code> - Carpeta para ejercicios con ciclo for</li> <li> <p><code>README.md</code> - Instrucciones detalladas</p> </li> <li> <p>Entrega: Una vez completados los ejercicios, haz push a tu fork y comparte el enlace</p> </li> </ol>"},{"location":"activities/m1/act2/#ejercicios-con-ciclo-while","title":"\ud83d\udcdd Ejercicios con Ciclo <code>while</code>","text":"<p>Resuelve los siguientes ejercicios utilizando exclusivamente el ciclo <code>while</code>. Cada ejercicio debe implementarse en un archivo separado dentro de la carpeta <code>ejercicios-while/</code>.</p> <p>Ejercicio While 1: Contador Descendente</p> <p>Crea un programa que use un ciclo <code>while</code> para mostrar una cuenta regresiva desde 20 hasta 1, mostrando cada n\u00famero en la consola. Al final debe mostrar \"\u00a1Despegue!\".</p> <p>Ejercicio While 2: Suma de N\u00fameros Pares</p> <p>Utiliza un ciclo <code>while</code> para calcular la suma de todos los n\u00fameros pares entre 1 y 50. Muestra el resultado final y cu\u00e1ntos n\u00fameros pares se sumaron.</p> <p>Ejercicio While 3: Validador de Contrase\u00f1a</p> <p>Implementa un sistema que use un ciclo <code>while</code> para solicitar una contrase\u00f1a al usuario hasta que ingrese \"admin123\". Debe mostrar cu\u00e1ntos intentos fallidos hubo antes del acceso correcto.</p> <p>Ejercicio While 4: Generador de N\u00fameros Aleatorios</p> <p>Crea un programa que use un ciclo <code>while</code> para generar n\u00fameros aleatorios entre 1 y 100 hasta que salga un n\u00famero mayor a 95. Muestra cada n\u00famero generado y al final indica cu\u00e1ntos n\u00fameros se generaron.</p> <p>Ejercicio While 5: Calculadora de Factorial</p> <p>Desarrolla una funci\u00f3n que use un ciclo <code>while</code> para calcular el factorial de un n\u00famero dado. Debe mostrar paso a paso c\u00f3mo se va calculando el factorial.</p> <p>Ejercicio While 6: B\u00fasqueda en Array</p> <p>Dado un array de nombres, usa un ciclo <code>while</code> para buscar un nombre espec\u00edfico. El programa debe mostrar en qu\u00e9 posici\u00f3n se encontr\u00f3 el nombre o indicar si no existe.</p> <p>Ejercicio While 7: Contador de D\u00edgitos</p> <p>Implementa un programa que use un ciclo <code>while</code> para contar cu\u00e1ntos d\u00edgitos tiene un n\u00famero entero positivo. Por ejemplo, 12345 tiene 5 d\u00edgitos.</p> <p>Ejercicio While 8: Secuencia de Fibonacci</p> <p>Utiliza un ciclo <code>while</code> para generar los primeros 15 n\u00fameros de la secuencia de Fibonacci. Muestra cada n\u00famero de la secuencia.</p> <p>Ejercicio While 9: Juego de Adivinanza Mejorado</p> <p>Crea un juego que use un ciclo <code>while</code> donde el usuario debe adivinar un n\u00famero entre 1 y 50. Proporciona pistas (\"muy alto\", \"muy bajo\", \"cerca\") y limita a 7 intentos m\u00e1ximo.</p> <p>Ejercicio While 10: Procesador de Calificaciones</p> <p>Desarrolla un programa que use un ciclo <code>while</code> para procesar calificaciones de estudiantes. Debe continuar pidiendo calificaciones hasta que se ingrese -1, luego calcular y mostrar el promedio, la calificaci\u00f3n m\u00e1s alta y m\u00e1s baja.</p>"},{"location":"activities/m1/act2/#ejercicios-con-ciclo-for","title":"\ud83d\udd04 Ejercicios con Ciclo <code>for</code>","text":"<p>Resuelve los siguientes ejercicios utilizando exclusivamente el ciclo <code>for</code>. Cada ejercicio debe implementarse en un archivo separado dentro de la carpeta <code>ejercicios-for/</code>.</p> <p>Ejercicio For 1: Tabla de Multiplicar Completa</p> <p>Usa un ciclo <code>for</code> anidado para crear las tablas de multiplicar del 1 al 10. Cada tabla debe mostrarse claramente separada y formateada.</p> <p>Ejercicio For 2: Patr\u00f3n de Asteriscos</p> <p>Implementa un programa que use ciclos <code>for</code> anidados para crear el siguiente patr\u00f3n: <pre><code>*\n**\n***\n****\n*****\n****\n***\n**\n*\n</code></pre></p> <p>Ejercicio For 3: An\u00e1lisis de Array de N\u00fameros</p> <p>Dado un array de 20 n\u00fameros aleatorios, usa un ciclo <code>for</code> para encontrar: el n\u00famero mayor, el menor, la suma total, el promedio, y cu\u00e1ntos n\u00fameros son pares e impares.</p> <p>Ejercicio For 4: Generador de N\u00fameros Primos</p> <p>Utiliza ciclos <code>for</code> anidados para encontrar y mostrar todos los n\u00fameros primos entre 1 y 100. Debe indicar cu\u00e1ntos n\u00fameros primos se encontraron.</p> <p>Ejercicio For 5: Invertir Cadenas de Texto</p> <p>Crea un programa que use un ciclo <code>for</code> para invertir una cadena de texto car\u00e1cter por car\u00e1cter. Muestra tanto la cadena original como la invertida.</p> <p>Ejercicio For 6: Calculadora de Potencias</p> <p>Implementa una funci\u00f3n que use un ciclo <code>for</code> para calcular la potencia de un n\u00famero sin usar Math.pow(). Debe mostrar el proceso paso a paso.</p> <p>Ejercicio For 7: Matriz de Suma</p> <p>Usa ciclos <code>for</code> anidados para crear una matriz 5x5 donde cada elemento sea la suma de sus \u00edndices (fila + columna). Muestra la matriz formateada.</p> <p>Ejercicio For 8: Contador de Vocales</p> <p>Desarrolla un programa que use un ciclo <code>for</code> para contar cu\u00e1ntas vocales (a, e, i, o, u) hay en una frase dada. Debe mostrar el conteo de cada vocal por separado.</p> <p>Ejercicio For 9: Secuencia Matem\u00e1tica</p> <p>Utiliza un ciclo <code>for</code> para generar la siguiente secuencia: 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024. Debe mostrar cada t\u00e9rmino y la suma total de la secuencia.</p> <p>Ejercicio For 10: Validador de Pal\u00edndromo</p> <p>Implementa un programa que use un ciclo <code>for</code> para verificar si una palabra o frase es un pal\u00edndromo (se lee igual de izquierda a derecha que de derecha a izquierda). Ignora espacios y may\u00fasculas.</p>"},{"location":"activities/m1/act3/","title":"Actividad 3 - Momento 1","text":""},{"location":"activities/m1/act3/#ejercicios-con-funciones-en-javascript","title":"Ejercicios con Funciones en JavaScript","text":"<p>Introducci\u00f3n</p> <p>Esta actividad est\u00e1 dise\u00f1ada para reforzar tu comprensi\u00f3n de las funciones en JavaScript. Cada enunciado te pide resolver un problema utilizando un tipo espec\u00edfico de funci\u00f3n: declaraci\u00f3n de funci\u00f3n, expresi\u00f3n de funci\u00f3n, funci\u00f3n flecha, funci\u00f3n an\u00f3nima, IIFE, funci\u00f3n recursiva o funci\u00f3n de orden superior. Antes de comenzar, sigue las instrucciones para hacer un fork del repositorio donde resolver\u00e1s la actividad. \u00a1Practica y domina las funciones! \ud83d\ude80</p>"},{"location":"activities/m1/act3/#instrucciones-para-hacer-fork-del-repositorio","title":"\ud83d\udee0\ufe0f Instrucciones para hacer fork del repositorio","text":"<p>Para trabajar en esta actividad, har\u00e1s un fork del repositorio donde se encuentra el proyecto base. Sigue estos pasos:</p> <ol> <li>Accede al repositorio:</li> <li>Ve al repositorio oficial en GitHub:      <pre><code>https://github.com/jfinfocesde/act_web1_s4.git\n</code></pre></li> <li> <p>Aseg\u00farate de tener una cuenta de GitHub activa.</p> </li> <li> <p>Haz un fork:</p> </li> <li>En la esquina superior derecha del repositorio, haz clic en el bot\u00f3n Fork.</li> <li> <p>Esto crear\u00e1 una copia del repositorio en tu cuenta de GitHub.</p> </li> <li> <p>Clona tu repositorio:</p> </li> <li>En tu cuenta de GitHub, abre el repositorio forkeado.</li> <li>Haz clic en el bot\u00f3n Code y copia la URL del repositorio (por ejemplo, <code>https://github.com/tu-usuario/act_web1_s4.git</code>).</li> <li>En tu terminal, ejecuta:      <pre><code>git clone https://github.com/tu-usuario/act_web1_s4.git\n</code></pre></li> <li>Navega al directorio clonado:      <pre><code>cd nombre-repositorio\n</code></pre></li> </ol>"},{"location":"activities/m1/act3/#instrucciones-para-la-actividad","title":"\ud83d\udccb Instrucciones para la actividad","text":"<ul> <li>Resuelve cada ejercicio utilizando el tipo de funci\u00f3n indicado.</li> <li>Escribe el c\u00f3digo en JavaScript y prueba tus soluciones en una consola o entorno de desarrollo.</li> <li>Cada soluci\u00f3n debe ser clara, eficiente y seguir las buenas pr\u00e1cticas mencionadas en la gu\u00eda previa.</li> </ul>"},{"location":"activities/m1/act3/#ejercicios","title":"\ud83d\udee0\ufe0f Ejercicios","text":""},{"location":"activities/m1/act3/#1-calcular-el-cuadrado-de-un-numero","title":"1. Calcular el cuadrado de un n\u00famero","text":"<ul> <li>Tarea: Crea una funci\u00f3n que reciba un n\u00famero y devuelva su cuadrado.</li> <li>Tipo de funci\u00f3n: Declaraci\u00f3n de funci\u00f3n</li> <li>Ejemplo: <code>cuadrado(4)</code> \u2192 <code>16</code></li> </ul>"},{"location":"activities/m1/act3/#2-saludar-con-nombre-por-defecto","title":"2. Saludar con nombre por defecto","text":"<ul> <li>Tarea: Crea una funci\u00f3n que salude a una persona por su nombre. Si no se proporciona un nombre, usa \"Invitado\".</li> <li>Tipo de funci\u00f3n: Expresi\u00f3n de funci\u00f3n</li> <li>Ejemplo: <code>saludar()</code> \u2192 <code>\u00a1Hola, Invitado!</code></li> </ul>"},{"location":"activities/m1/act3/#3-sumar-elementos-de-un-arreglo","title":"3. Sumar elementos de un arreglo","text":"<ul> <li>Tarea: Crea una funci\u00f3n que sume todos los n\u00fameros de un arreglo.</li> <li>Tipo de funci\u00f3n: Funci\u00f3n flecha</li> <li>Ejemplo: <code>sumarArreglo([1, 2, 3])</code> \u2192 <code>6</code></li> </ul>"},{"location":"activities/m1/act3/#4-ejecutar-un-mensaje-instantaneamente","title":"4. Ejecutar un mensaje instant\u00e1neamente","text":"<ul> <li>Tarea: Crea una funci\u00f3n que imprima \"\u00a1Bienvenido!\" en la consola al definirse.</li> <li>Tipo de funci\u00f3n: IIFE</li> <li>Ejemplo: Imprime autom\u00e1ticamente al ejecutarse.</li> </ul>"},{"location":"activities/m1/act3/#5-contar-vocales-en-una-cadena","title":"5. Contar vocales en una cadena","text":"<ul> <li>Tarea: Crea una funci\u00f3n que cuente las vocales (a, e, i, o, u) en una cadena.</li> <li>Tipo de funci\u00f3n: Funci\u00f3n recursiva</li> <li>Ejemplo: <code>contarVocales(\"hola\")</code> \u2192 <code>2</code></li> </ul>"},{"location":"activities/m1/act3/#6-filtrar-numeros-mayores-a-10","title":"6. Filtrar n\u00fameros mayores a 10","text":"<ul> <li>Tarea: Crea una funci\u00f3n que reciba un arreglo y devuelva solo los n\u00fameros mayores a 10.</li> <li>Tipo de funci\u00f3n: Funci\u00f3n de orden superior</li> <li>Ejemplo: <code>filtrarMayores([5, 12, 8, 15])</code> \u2192 <code>[12, 15]</code></li> </ul>"},{"location":"activities/m1/act3/#7-convertir-a-mayusculas","title":"7. Convertir a may\u00fasculas","text":"<ul> <li>Tarea: Crea una funci\u00f3n que convierta una cadena a may\u00fasculas.</li> <li>Tipo de funci\u00f3n: Funci\u00f3n flecha</li> <li>Ejemplo: <code>aMayusculas(\"javascript\")</code> \u2192 <code>JAVASCRIPT</code></li> </ul>"},{"location":"activities/m1/act3/#8-temporizador-con-mensaje","title":"8. Temporizador con mensaje","text":"<ul> <li>Tarea: Crea una funci\u00f3n que imprima un mensaje despu\u00e9s de 3 segundos usando <code>setTimeout</code>.</li> <li>Tipo de funci\u00f3n: Funci\u00f3n an\u00f3nima</li> <li>Ejemplo: Imprime \"\u00a1Tiempo terminado!\" tras 3 segundos.</li> </ul>"},{"location":"activities/m1/act3/#9-crear-un-contador-privado","title":"9. Crear un contador privado","text":"<ul> <li>Tarea: Crea una funci\u00f3n que devuelva otra funci\u00f3n para contar incrementos, manteniendo el contador privado.</li> <li>Tipo de funci\u00f3n: IIFE con closure</li> <li>Ejemplo: <code>contador()</code> \u2192 <code>0</code>, <code>contador()</code> \u2192 <code>1</code></li> </ul>"},{"location":"activities/m1/act3/#10-calcular-factorial","title":"10. Calcular factorial","text":"<ul> <li>Tarea: Crea una funci\u00f3n que calcule el factorial de un n\u00famero.</li> <li>Tipo de funci\u00f3n: Funci\u00f3n recursiva</li> <li>Ejemplo: <code>factorial(5)</code> \u2192 <code>120</code></li> </ul>"},{"location":"activities/m1/act3/#11-verificar-si-un-numero-es-par","title":"11. Verificar si un n\u00famero es par","text":"<ul> <li>Tarea: Crea una funci\u00f3n que determine si un n\u00famero es par.</li> <li>Tipo de funci\u00f3n: Declaraci\u00f3n de funci\u00f3n</li> <li>Ejemplo: <code>esPar(4)</code> \u2192 <code>true</code></li> </ul>"},{"location":"activities/m1/act3/#12-multiplicar-elementos-de-un-arreglo","title":"12. Multiplicar elementos de un arreglo","text":"<ul> <li>Tarea: Crea una funci\u00f3n que multiplique todos los n\u00fameros de un arreglo.</li> <li>Tipo de funci\u00f3n: Funci\u00f3n de orden superior</li> <li>Ejemplo: <code>multiplicarArreglo([2, 3, 4])</code> \u2192 <code>24</code></li> </ul>"},{"location":"activities/m1/act3/#13-reemplazar-espacios-por-guiones","title":"13. Reemplazar espacios por guiones","text":"<ul> <li>Tarea: Crea una funci\u00f3n que reemplace los espacios en una cadena por guiones.</li> <li>Tipo de funci\u00f3n: Expresi\u00f3n de funci\u00f3n</li> <li>Ejemplo: <code>reemplazarEspacios(\"Hola Mundo\")</code> \u2192 <code>Hola-Mundo</code></li> </ul>"},{"location":"activities/m1/act3/#14-generar-un-id-unico","title":"14. Generar un ID \u00fanico","text":"<ul> <li>Tarea: Crea una funci\u00f3n que genere un ID \u00fanico basado en un contador interno.</li> <li>Tipo de funci\u00f3n: IIFE con closure</li> <li>Ejemplo: <code>generarId()</code> \u2192 <code>1</code>, <code>generarId()</code> \u2192 <code>2</code></li> </ul>"},{"location":"activities/m1/act3/#15-invertir-una-cadena","title":"15. Invertir una cadena","text":"<ul> <li>Tarea: Crea una funci\u00f3n que invierta una cadena de texto.</li> <li>Tipo de funci\u00f3n: Funci\u00f3n recursiva</li> <li>Ejemplo: <code>invertir(\"hola\")</code> \u2192 <code>aloh</code></li> </ul>"},{"location":"activities/m1/act3/#16-sumar-argumentos-variables","title":"16. Sumar argumentos variables","text":"<ul> <li>Tarea: Crea una funci\u00f3n que sume un n\u00famero variable de argumentos.</li> <li>Tipo de funci\u00f3n: Funci\u00f3n flecha con par\u00e1metro rest</li> <li>Ejemplo: <code>sumar(1, 2, 3, 4)</code> \u2192 <code>10</code></li> </ul>"},{"location":"activities/m1/act3/#17-ejecutar-operacion-personalizada","title":"17. Ejecutar operaci\u00f3n personalizada","text":"<ul> <li>Tarea: Crea una funci\u00f3n que reciba dos n\u00fameros y una funci\u00f3n callback para realizar una operaci\u00f3n.</li> <li>Tipo de funci\u00f3n: Funci\u00f3n de orden superior</li> <li>Ejemplo: <code>operacion(5, 3, (a, b) =&gt; a * b)</code> \u2192 <code>15</code></li> </ul>"},{"location":"activities/m1/act3/#18-validar-correo-electronico","title":"18. Validar correo electr\u00f3nico","text":"<ul> <li>Tarea: Crea una funci\u00f3n que valide si una cadena es un correo electr\u00f3nico b\u00e1sico (contiene @ y .com).</li> <li>Tipo de funci\u00f3n: Declaraci\u00f3n de funci\u00f3n</li> <li>Ejemplo: <code>esCorreo(\"test@example.com\")</code> \u2192 <code>true</code></li> </ul>"},{"location":"activities/m1/act3/#19-retrasar-ejecucion-de-un-mensaje","title":"19. Retrasar ejecuci\u00f3n de un mensaje","text":"<ul> <li>Tarea: Crea una funci\u00f3n que imprima un mensaje despu\u00e9s de un tiempo definido por el usuario.</li> <li>Tipo de funci\u00f3n: Funci\u00f3n an\u00f3nima con <code>setTimeout</code></li> <li>Ejemplo: <code>retrasarMensaje(\"Hola\", 2000)</code> \u2192 Imprime \"Hola\" tras 2 segundos.</li> </ul>"},{"location":"activities/m1/act3/#20-calcular-promedio-de-un-arreglo","title":"20. Calcular promedio de un arreglo","text":"<ul> <li>Tarea: Crea una funci\u00f3n que calcule el promedio de un arreglo de n\u00fameros.</li> <li>Tipo de funci\u00f3n: Funci\u00f3n flecha</li> <li>Ejemplo: <code>promedio([10, 20, 30])</code> \u2192 <code>20</code></li> </ul>"},{"location":"activities/m2/act1/","title":"Actividad 1 - Momento 2","text":""},{"location":"activities/m2/act1/#estructuras-de-datos-en-javascript-arrays-y-objetos","title":"Estructuras de Datos en JavaScript (Arrays y Objetos)","text":""},{"location":"activities/m2/act1/#instrucciones-rapidas","title":"\ud83d\udce6 Instrucciones r\u00e1pidas","text":"<ol> <li>Fork \u2192 <code>https://github.com/jfinfocesde/act_web1_s7.git</code></li> <li>Clone <pre><code>git clone https://github.com/TU-USUARIO/act_web1_s7.git\ncd estructuras-datos-js\n</code></pre></li> <li>Crea un archivo <code>ejercicioX.js</code> (X = 1-20) dentro de <code>/src</code>. IMPORTANTE: utiliza arreglos, objetos, m\u00e9todos de arrays, desestructuraci\u00f3n y las t\u00e9cnicas vistas en clase.</li> <li>Ejecuta tu archivo: <pre><code>node src/ejercicio1.js\n</code></pre></li> <li>Commit / Push / PR <pre><code>git add .\ngit commit -m \"feat: ejercicio X resuelto\"\ngit push origin main\n</code></pre></li> </ol>"},{"location":"activities/m2/act1/#estructura-del-repo","title":"\ud83d\udcc1 Estructura del repo","text":"<pre><code>estructuras-datos-js/\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 ejercicio1.js\n\u2502   \u251c\u2500\u2500 ejercicio2.js\n\u2502   \u251c\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 ejercicio20.js\n\u2514\u2500\u2500 .gitignore\n</code></pre>"},{"location":"activities/m2/act1/#ejercicios-estructuras-de-datos","title":"\ud83e\udde9 Ejercicios - Estructuras de Datos","text":""},{"location":"activities/m2/act1/#1-gestion-de-inventario-basico","title":"1\ufe0f\u20e3 Gesti\u00f3n de Inventario B\u00e1sico","text":"<p>Archivo: <code>src/ejercicio1.js</code> Crea un array de objetos que represente un inventario de productos. Cada producto debe tener: <code>id</code>, <code>nombre</code>, <code>precio</code>, <code>categoria</code>, <code>stock</code>. Declara al menos 5 productos y muestra: - Todos los productos - Total de productos en inventario - Valor total del inventario</p>"},{"location":"activities/m2/act1/#2-filtrado-de-productos-por-categoria","title":"2\ufe0f\u20e3 Filtrado de Productos por Categor\u00eda","text":"<p>Archivo: <code>src/ejercicio2.js</code> Usando el inventario del ejercicio anterior, utiliza el m\u00e9todo <code>filter()</code> para: - Mostrar solo productos de la categor\u00eda \"Electr\u00f3nicos\" - Mostrar productos con stock menor a 10 - Mostrar productos con precio mayor a $500</p>"},{"location":"activities/m2/act1/#3-transformacion-de-datos-con-map","title":"3\ufe0f\u20e3 Transformaci\u00f3n de Datos con map()","text":"<p>Archivo: <code>src/ejercicio3.js</code> Crea un array de estudiantes con <code>nombre</code>, <code>edad</code>, <code>notas</code> (array de n\u00fameros). Usa <code>map()</code> para: - Crear un nuevo array con solo los nombres - Crear un array con el promedio de cada estudiante - Agregar una propiedad <code>estado</code> (\"Aprobado\" si promedio &gt;= 70, \"Reprobado\" si &lt; 70)</p>"},{"location":"activities/m2/act1/#4-analisis-de-ventas-con-reduce","title":"4\ufe0f\u20e3 An\u00e1lisis de Ventas con reduce()","text":"<p>Archivo: <code>src/ejercicio4.js</code> Dado un array de ventas con <code>producto</code>, <code>cantidad</code>, <code>precio</code>, <code>fecha</code>: Usa <code>reduce()</code> para calcular: - Total de ingresos - Producto m\u00e1s vendido (por cantidad) - Promedio de venta por transacci\u00f3n</p>"},{"location":"activities/m2/act1/#5-busqueda-y-verificacion","title":"5\ufe0f\u20e3 B\u00fasqueda y Verificaci\u00f3n","text":"<p>Archivo: <code>src/ejercicio5.js</code> Crea un array de usuarios con <code>id</code>, <code>nombre</code>, <code>email</code>, <code>activo</code>. Implementa b\u00fasquedas usando: - <code>find()</code> para buscar usuario por email - <code>findIndex()</code> para obtener posici\u00f3n de usuario por id - <code>some()</code> para verificar si hay usuarios inactivos - <code>every()</code> para verificar si todos tienen email v\u00e1lido (contiene @)</p>"},{"location":"activities/m2/act1/#6-manipulacion-de-arrays","title":"6\ufe0f\u20e3 Manipulaci\u00f3n de Arrays","text":"<p>Archivo: <code>src/ejercicio6.js</code> Crea un array inicial <code>[1, 2, 3, 4, 5]</code> y demuestra: - <code>push()</code> y <code>pop()</code> - agregar y quitar del final - <code>shift()</code> y <code>unshift()</code> - agregar y quitar del inicio - <code>splice()</code> - insertar elementos en posici\u00f3n espec\u00edfica - <code>slice()</code> - extraer porci\u00f3n sin modificar original</p>"},{"location":"activities/m2/act1/#7-ordenamiento-y-reversion","title":"7\ufe0f\u20e3 Ordenamiento y Reversi\u00f3n","text":"<p>Archivo: <code>src/ejercicio7.js</code> Crea arrays de: - N\u00fameros desordenados - ordena ascendente y descendente - Nombres de personas - ordena alfab\u00e9ticamente - Objetos con propiedad <code>edad</code> - ordena por edad - Usa <code>reverse()</code> para invertir el orden</p>"},{"location":"activities/m2/act1/#8-desestructuracion-de-arrays","title":"8\ufe0f\u20e3 Desestructuraci\u00f3n de Arrays","text":"<p>Archivo: <code>src/ejercicio8.js</code> Dado el array <code>['JavaScript', 'Python', 'Java', 'C++', 'Go']</code>: - Extrae los primeros 3 lenguajes - Extrae el primero y el \u00faltimo - Usa rest operator para separar el primero del resto - Intercambia dos variables usando desestructuraci\u00f3n</p>"},{"location":"activities/m2/act1/#9-desestructuracion-de-objetos","title":"9\ufe0f\u20e3 Desestructuraci\u00f3n de Objetos","text":"<p>Archivo: <code>src/ejercicio9.js</code> Crea un objeto <code>persona</code> con propiedades anidadas (direcci\u00f3n, contacto). Demuestra: - Desestructuraci\u00f3n b\u00e1sica - Renombrado de variables - Valores por defecto - Desestructuraci\u00f3n anidada - Rest operator en objetos</p>"},{"location":"activities/m2/act1/#metodos-de-objeto","title":"\ud83d\udd1f M\u00e9todos de Objeto","text":"<p>Archivo: <code>src/ejercicio10.js</code> Crea un objeto y demuestra: - <code>Object.keys()</code> - obtener claves - <code>Object.values()</code> - obtener valores - <code>Object.entries()</code> - obtener pares clave-valor - Iterar sobre el objeto con <code>forEach()</code></p>"},{"location":"activities/m2/act2/","title":"Actividad 2 - Momento 2","text":""},{"location":"activities/m2/act2/#manipulacion-del-dom-en-javascript","title":"Manipulaci\u00f3n del DOM en JavaScript","text":""},{"location":"activities/m2/act2/#instrucciones-rapidas","title":"\ud83d\udce6 Instrucciones r\u00e1pidas","text":"<ol> <li>Fork \u2192 <code>https://github.com/jfinfocesde/act_web1_s9.git</code></li> <li>Clone <pre><code>git clone https://github.com/TU-USUARIO/act_web1_s9.git\ncd act_web1_s9\n</code></pre></li> <li>Crea un archivo <code>ejercicioX.html</code> y <code>ejercicioX.js</code> (X = 1-10) dentro de <code>/src</code>. IMPORTANTE: utiliza selectores del DOM, navegaci\u00f3n por nodos, manipulaci\u00f3n de elementos y las t\u00e9cnicas vistas en clase.</li> </ol>"},{"location":"activities/m2/act2/#estructura-del-repo","title":"\ud83d\udcc1 Estructura del repo","text":"<pre><code>dom-manipulation-js/\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 ejercicio1.html\n\u2502   \u251c\u2500\u2500 ejercicio1.js\n\u2502   \u251c\u2500\u2500 ejercicio2.html\n\u2502   \u251c\u2500\u2500 ejercicio2.js\n\u2502   \u251c\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 ejercicio10.html\n\u2502   \u2514\u2500\u2500 ejercicio10.js\n\u251c\u2500\u2500 assets/\n\u2502   \u251c\u2500\u2500 css/\n\u2502   \u2502   \u2514\u2500\u2500 styles.css\n\u2502   \u2514\u2500\u2500 images/\n\u2514\u2500\u2500 .gitignore\n</code></pre>"},{"location":"activities/m2/act2/#ejercicios-manipulacion-del-dom","title":"\ud83e\udde9 Ejercicios - Manipulaci\u00f3n del DOM","text":""},{"location":"activities/m2/act2/#1-informacion-basica-del-documento","title":"1\ufe0f\u20e3 Informaci\u00f3n B\u00e1sica del Documento","text":"<p>Archivos: <code>src/ejercicio1.html</code> y <code>src/ejercicio1.js</code> Crea una p\u00e1gina HTML simple que muestre:  </p> <ul> <li>T\u00edtulo de la p\u00e1gina usando <code>document.title</code></li> <li>URL actual usando <code>document.URL</code></li> <li>Mostrar esta informaci\u00f3n en un div en la p\u00e1gina</li> </ul>"},{"location":"activities/m2/act2/#2-seleccionar-elementos-por-id","title":"2\ufe0f\u20e3 Seleccionar Elementos por ID","text":"<p>Archivos: <code>src/ejercicio2.html</code> y <code>src/ejercicio2.js</code> Crea una p\u00e1gina con varios elementos que tengan ID y:  </p> <ul> <li>Usa <code>getElementById()</code> para seleccionar elementos</li> <li>Cambia el texto de los elementos seleccionados</li> <li>Cambia el color de fondo de un elemento</li> </ul>"},{"location":"activities/m2/act2/#3-seleccionar-elementos-por-clase","title":"3\ufe0f\u20e3 Seleccionar Elementos por Clase","text":"<p>Archivos: <code>src/ejercicio3.html</code> y <code>src/ejercicio3.js</code> Crea elementos con la misma clase y:  </p> <ul> <li>Usa <code>getElementsByClassName()</code> para seleccionarlos</li> <li>Cambia el estilo de todos los elementos de esa clase</li> <li>Cuenta cu\u00e1ntos elementos tienen esa clase</li> </ul>"},{"location":"activities/m2/act2/#4-cambiar-contenido-de-elementos","title":"4\ufe0f\u20e3 Cambiar Contenido de Elementos","text":"<p>Archivos: <code>src/ejercicio4.html</code> y <code>src/ejercicio4.js</code> Crea elementos con texto y:  </p> <ul> <li>Usa <code>textContent</code> para cambiar el texto</li> <li>Usa <code>innerHTML</code> para agregar HTML</li> <li>Crea un bot\u00f3n que cambie el contenido al hacer clic</li> </ul>"},{"location":"activities/m2/act2/#5-modificar-atributos","title":"5\ufe0f\u20e3 Modificar Atributos","text":"<p>Archivos: <code>src/ejercicio5.html</code> y <code>src/ejercicio5.js</code> Crea elementos con atributos y:  </p> <ul> <li>Usa <code>getAttribute()</code> para leer atributos</li> <li>Usa <code>setAttribute()</code> para cambiar atributos</li> <li>Cambia el src de una imagen y el href de un enlace</li> </ul>"},{"location":"activities/m2/act2/#6-agregar-y-quitar-clases-css","title":"6\ufe0f\u20e3 Agregar y Quitar Clases CSS","text":"<p>Archivos: <code>src/ejercicio6.html</code> y <code>src/ejercicio6.js</code> Crea elementos con estilos CSS y:  </p> <ul> <li>Usa <code>classList.add()</code> para agregar clases</li> <li>Usa <code>classList.remove()</code> para quitar clases</li> <li>Usa <code>classList.toggle()</code> para alternar clases</li> </ul>"},{"location":"activities/m2/act2/#7-crear-y-agregar-elementos","title":"7\ufe0f\u20e3 Crear y Agregar Elementos","text":"<p>Archivos: <code>src/ejercicio7.html</code> y <code>src/ejercicio7.js</code> Crea nuevos elementos din\u00e1micamente:  </p> <ul> <li>Usa <code>createElement()</code> para crear elementos</li> <li>Usa <code>appendChild()</code> para agregarlos al DOM</li> <li>Crea una lista de elementos con un bot\u00f3n</li> </ul>"},{"location":"activities/m2/act2/#8-eventos-basicos","title":"8\ufe0f\u20e3 Eventos B\u00e1sicos","text":"<p>Archivos: <code>src/ejercicio8.html</code> y <code>src/ejercicio8.js</code> Crea elementos interactivos:  </p> <ul> <li>Usa <code>addEventListener()</code> para eventos de click</li> <li>Maneja eventos de mouseover y mouseout</li> <li>Cambia elementos cuando ocurran los eventos</li> </ul>"},{"location":"activities/m2/act2/#9-formularios-y-validacion-simple","title":"9\ufe0f\u20e3 Formularios y Validaci\u00f3n Simple","text":"<p>Archivos: <code>src/ejercicio9.html</code> y <code>src/ejercicio9.js</code> Crea un formulario simple y:  </p> <ul> <li>Obt\u00e9n valores de inputs con <code>value</code></li> <li>Valida que los campos no est\u00e9n vac\u00edos</li> <li>Muestra mensajes de error o \u00e9xito</li> </ul>"},{"location":"activities/m2/act2/#navegacion-entre-elementos","title":"\ud83d\udd1f Navegaci\u00f3n entre Elementos","text":"<p>Archivos: <code>src/ejercicio10.html</code> y <code>src/ejercicio10.js</code> Crea una estructura HTML y demuestra:  </p> <ul> <li>Usa <code>parentElement</code> para acceder al elemento padre</li> <li>Usa <code>children</code> para acceder a elementos hijos</li> <li>Usa <code>nextElementSibling</code> para el siguiente hermano</li> <li>Muestra la informaci\u00f3n de navegaci\u00f3n en la p\u00e1gina</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/posts/post1/","title":"Happy new years eve!","text":"<p>We hope you are all having fun and wish you all the best for the new year!</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>"},{"location":"content/p1/","title":"Semana 1 - Pacto pedag\u00f3gico","text":"<p>El pacto pedag\u00f3gico es un acuerdo que se establece entre el docente y los estudiantes al inicio de un curso, con el fin de establecer las normas, expectativas, responsabilidades y compromisos de todas las partes involucradas en el proceso de ense\u00f1anza-aprendizaje.</p> <p>Tu navegador no admite la visualizaci\u00f3n de PDFs. Puedes descargarlo aqu\u00ed:      Descargar PDF.</p>"},{"location":"content/p1/#introduccion-a-javascript","title":"Introducci\u00f3n a JavaScript","text":"<p>JavaScript es un lenguaje de programaci\u00f3n vers\u00e1til y ampliamente utilizado que permite agregar interactividad y dinamismo a las aplicaciones web y m\u00e1s all\u00e1. A continuaci\u00f3n, se presenta una visi\u00f3n general de qu\u00e9 es JavaScript, su historia, usos y su rol en el desarrollo web, dise\u00f1ada para alinearse con los objetivos de la Clase 1: Introducci\u00f3n a JavaScript y Primeros Pasos.</p> <p>Abrir Presentaci\u00f3n en Nueva Pesta\u00f1a</p>"},{"location":"content/p1/#que-es-javascript","title":"\u00bfQu\u00e9 es JavaScript?","text":"<ul> <li> <p>Definici\u00f3n:</p> <ul> <li>JavaScript es un lenguaje de programaci\u00f3n interpretado, de alto nivel y orientado a eventos, principalmente utilizado para agregar interactividad a p\u00e1ginas web.</li> <li>Es multiplataforma: se ejecuta en navegadores (lado cliente) y en servidores (con entornos como Node.js).</li> <li>Soporta paradigmas como programaci\u00f3n funcional, orientada a objetos y basada en eventos.</li> </ul> </li> <li> <p>Caracter\u00edsticas clave:</p> <ul> <li>Din\u00e1mico: Permite modificar el contenido de una p\u00e1gina web en tiempo real (por ejemplo, actualizar un texto sin recargar la p\u00e1gina).</li> <li>Ligero: No requiere compilaci\u00f3n, ya que los navegadores lo interpretan directamente.</li> <li>Estandarizado: Basado en ECMAScript, con versiones actualizadas como ES6 (2015) que introdujeron mejoras significativas.</li> </ul> </li> </ul>"},{"location":"content/p1/#historia-de-javascript","title":"Historia de JavaScript","text":"<ul> <li> <p>Origen:</p> <ul> <li>Creado en 1995 por Brendan Eich en Netscape Communications.</li> <li>Inicialmente llamado Mocha, luego LiveScript, y finalmente JavaScript para capitalizar la popularidad de Java (aunque no est\u00e1n relacionados).</li> <li>Primer prop\u00f3sito: Agregar peque\u00f1as funcionalidades interactivas a p\u00e1ginas web est\u00e1ticas.</li> </ul> </li> <li> <p>Evoluci\u00f3n:</p> <ul> <li>1997: Estandarizaci\u00f3n como ECMAScript (ES1).</li> <li>2009: ES5 trajo mejoras en funcionalidad.</li> <li>2015: ES6 (ECMAScript 2015) introdujo caracter\u00edsticas modernas como arrow functions, let/const, y promesas.</li> <li>Actualmente: Actualizaciones anuales (ES2020, ES2023, etc.) para mantener el lenguaje relevante.</li> </ul> </li> <li> <p>Impacto:</p> <ul> <li>De ser un lenguaje para animaciones simples, pas\u00f3 a ser la base de aplicaciones web complejas, servidores, e incluso inteligencia artificial.</li> </ul> </li> </ul>"},{"location":"content/p1/#usos-y-aplicaciones","title":"Usos y Aplicaciones","text":"<p>JavaScript es un pilar del desarrollo moderno debido a su flexibilidad. Sus principales usos incluyen:</p> <ol> <li> <p>Desarrollo web (lado cliente):</p> <ul> <li>Manipulaci\u00f3n del DOM (Document Object Model) para cambiar contenido, estilos o estructura de una p\u00e1gina.</li> <li>Ejemplos: Validar formularios, crear animaciones, manejar eventos (clics, teclas).</li> <li>Frameworks populares: React, Vue.js, Angular.</li> </ul> </li> <li> <p>Desarrollo backend (lado servidor):</p> <ul> <li>Con Node.js, JavaScript se usa para construir servidores, APIs y aplicaciones escalables.</li> <li>Ejemplo: Plataformas como Netflix y PayPal usan Node.js.</li> </ul> </li> <li> <p>Aplicaciones m\u00f3viles:</p> <ul> <li>Frameworks como React Native permiten crear aplicaciones nativas para iOS y Android.</li> <li>Ejemplo: Aplicaciones como Instagram y Airbnb.</li> </ul> </li> <li> <p>Juegos y gr\u00e1ficos:</p> <ul> <li>Bibliotecas como Three.js o Phaser permiten crear juegos 2D/3D en navegadores.</li> <li>Ejemplo: Juegos interactivos en sitios web.</li> </ul> </li> <li> <p>Otros usos:</p> <ul> <li>Automatizaci\u00f3n (scripts con Node.js).</li> <li>Inteligencia artificial (TensorFlow.js para modelos de machine learning).</li> <li>Internet de las cosas (IoT) con plataformas como Johnny-Five.</li> </ul> </li> </ol>"},{"location":"content/p1/#rol-en-el-desarrollo-web","title":"Rol en el Desarrollo Web","text":"<p>JavaScript es uno de los tres pilares del desarrollo web, junto con HTML y CSS:</p> <ul> <li>HTML: Define la estructura de una p\u00e1gina (t\u00edtulos, p\u00e1rrafos, im\u00e1genes).</li> <li>CSS: Controla el dise\u00f1o y estilo (colores, fuentes, disposici\u00f3n).</li> <li>JavaScript: A\u00f1ade interactividad y l\u00f3gica (eventos, c\u00e1lculos, actualizaciones din\u00e1micas).</li> </ul> <p>Ejemplo pr\u00e1ctico: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Ejemplo de JavaScript&lt;/title&gt;\n  &lt;style&gt;\n    button { padding: 10px; font-size: 16px; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1 id=\"mensaje\"&gt;\u00a1Haz clic en el bot\u00f3n!&lt;/h1&gt;\n  &lt;button onclick=\"cambiarMensaje()\"&gt;Cambiar Mensaje&lt;/button&gt;\n  &lt;script&gt;\n    function cambiarMensaje() {\n      document.getElementById(\"mensaje\").innerText = \"\u00a1JavaScript en acci\u00f3n!\";\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <ul> <li>Explicaci\u00f3n:<ul> <li>HTML crea la estructura (t\u00edtulo y bot\u00f3n).</li> <li>CSS estiliza el bot\u00f3n.</li> <li>JavaScript cambia el texto del t\u00edtulo al hacer clic.</li> </ul> </li> </ul>"},{"location":"content/p1/#otro-ejemplo","title":"Otro ejemplo","text":"<p> See the Pen    JavaScript by Jhon Valencia (@Jhon-Valencia-the-animator)   on CodePen. </p>"},{"location":"content/p1/#por-que-aprender-javascript","title":"Por qu\u00e9 aprender JavaScript","text":"<ul> <li>Ubicuidad: Est\u00e1 presente en casi todas las p\u00e1ginas web modernas.</li> <li>Versatilidad: \u00datil para frontend, backend, m\u00f3vil, y m\u00e1s.</li> <li>Comunidad y recursos: Amplia documentaci\u00f3n (MDN Web Docs, JavaScript.info) y frameworks que facilitan el desarrollo.</li> <li>Demanda laboral: Alta demanda de desarrolladores JavaScript en la industria tecnol\u00f3gica.</li> </ul>"},{"location":"content/p1/#tipos-de-datos-y-operadores-basicos-en-javascript","title":"Tipos de datos y operadores b\u00e1sicos en JavaScript","text":""},{"location":"content/p1/#1-tipos-de-datos-en-javascript","title":"1. Tipos de datos en JavaScript","text":"<p>JavaScript es un lenguaje din\u00e1micamente tipado, lo que significa que las variables no est\u00e1n vinculadas a un tipo de dato espec\u00edfico y pueden cambiar de tipo durante la ejecuci\u00f3n. Los tipos de datos primitivos m\u00e1s comunes son:</p> <ul> <li> <p>String: Representa texto. Se escribe entre comillas simples (<code>' '</code>), dobles (<code>\" \"</code>) o backticks (<code>`</code>) para plantillas literales.   <pre><code>let nombre = \"Ana\"; // String con comillas dobles\nlet saludo = '\u00a1Hola!'; // String con comillas simples\nlet mensaje = `Bienvenida, ${nombre}`; // Plantilla literal\nconsole.log(mensaje); // Imprime: Bienvenida, Ana\n</code></pre></p> </li> <li> <p>Number: Representa n\u00fameros, ya sean enteros o decimales. No distingue entre <code>int</code> y <code>float</code>.   <pre><code>let edad = 25; // Entero\nlet altura = 1.75; // Decimal\nconsole.log(edad + altura); // Imprime: 26.75\n</code></pre></p> </li> <li> <p>Boolean: Representa valores de verdad: <code>true</code> o <code>false</code>. \u00datil para condiciones.   <pre><code>let esMayorDeEdad = true;\nlet tienePermiso = false;\nconsole.log(esMayorDeEdad); // Imprime: true\n</code></pre></p> </li> <li> <p>Null: Representa la ausencia intencional de un valor.   <pre><code>let valorNulo = null;\nconsole.log(valorNulo); // Imprime: null\n</code></pre></p> </li> <li> <p>Undefined: Indica que una variable ha sido declarada pero no tiene un valor asignado.   <pre><code>let sinDefinir;\nconsole.log(sinDefinir); // Imprime: undefined\n</code></pre></p> </li> </ul> <p>Ejemplo pr\u00e1ctico: <pre><code>let nombre = \"Carlos\"; // String\nlet edad = 30; // Number\nlet esEstudiante = true; // Boolean\nlet direccion = null; // Null\nlet telefono; // Undefined\n\nconsole.log(\"Nombre:\", nombre, \"Edad:\", edad, \"Es estudiante:\", esEstudiante);\nconsole.log(\"Direcci\u00f3n:\", direccion, \"Tel\u00e9fono:\", telefono);\n</code></pre></p>"},{"location":"content/p1/#2-declaracion-de-variables","title":"2. Declaraci\u00f3n de variables","text":"<p>JavaScript ofrece tres formas principales de declarar variables, cada una con un prop\u00f3sito espec\u00edfico:</p> <ul> <li> <p>var: M\u00e9todo antiguo para declarar variables. Tiene alcance de funci\u00f3n y permite redeclaraci\u00f3n, lo que puede causar errores. No se recomienda usarlo en c\u00f3digo moderno.   <pre><code>var x = 10;\nvar x = 20; // Redeclaraci\u00f3n permitida\nconsole.log(x); // Imprime: 20\n</code></pre></p> </li> <li> <p>let: Permite declarar variables con alcance de bloque (dentro de <code>{}</code>). Se puede reasignar, pero no redeclarar en el mismo \u00e1mbito.   <pre><code>let y = 15;\ny = 25; // Reasignaci\u00f3n permitida\n// let y = 30; // Error: no se puede redeclarar\nconsole.log(y); // Imprime: 25\n</code></pre></p> </li> <li> <p>const: Declara constantes con alcance de bloque. No permite reasignaci\u00f3n ni redeclaraci\u00f3n, pero los objetos o arreglos declarados con <code>const</code> pueden modificarse internamente.   <pre><code>const PI = 3.1416;\n// PI = 3.14; // Error: no se puede reasignar\nconsole.log(PI); // Imprime: 3.1416\n\nconst persona = { nombre: \"Luis\" };\npersona.nombre = \"Mar\u00eda\"; // Modificaci\u00f3n interna permitida\nconsole.log(persona.nombre); // Imprime: Mar\u00eda\n</code></pre></p> </li> </ul> <p>Buenas pr\u00e1cticas: - Usa <code>const</code> por defecto para evitar reasignaciones accidentales. - Usa <code>let</code> cuando necesites reasignar valores. - Evita <code>var</code> en c\u00f3digo moderno.</p>"},{"location":"content/p1/#3-operadores","title":"3. Operadores","text":"<p>Los operadores permiten realizar c\u00e1lculos, comparaciones y combinaciones l\u00f3gicas.</p>"},{"location":"content/p1/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<ul> <li><code>+</code>: Suma (tambi\u00e9n concatena strings).</li> <li><code>-</code>: Resta.</li> <li><code>*</code>: Multiplicaci\u00f3n.</li> <li><code>/</code>: Divisi\u00f3n.</li> <li><code>%</code>: M\u00f3dulo (resto de la divisi\u00f3n).</li> </ul> <pre><code>let a = 10;\nlet b = 3;\nconsole.log(\"Suma:\", a + b); // Imprime: 13\nconsole.log(\"Resta:\", a - b); // Imprime: 7\nconsole.log(\"Multiplicaci\u00f3n:\", a * b); // Imprime: 30\nconsole.log(\"Divisi\u00f3n:\", a / b); // Imprime: 3.333...\nconsole.log(\"M\u00f3dulo:\", a % b); // Imprime: 1\n</code></pre> <p>Nota sobre <code>+</code> con strings: <pre><code>let texto1 = \"Hola\";\nlet texto2 = \"Mundo\";\nconsole.log(texto1 + \" \" + texto2); // Imprime: Hola Mundo\n</code></pre></p>"},{"location":"content/p1/#operadores-de-comparacion","title":"Operadores de comparaci\u00f3n","text":"<ul> <li><code>==</code>: Compara igualdad de valor (convierte tipos si es necesario).</li> <li><code>===</code>: Compara igualdad estricta (valor y tipo).</li> <li><code>!=</code>: Desigualdad de valor.</li> <li><code>!==</code>: Desigualdad estricta.</li> <li><code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>: Comparaciones num\u00e9ricas.</li> </ul> <pre><code>let x = 5;\nlet y = \"5\";\nconsole.log(x == y); // Imprime: true (convierte el string a n\u00famero)\nconsole.log(x === y); // Imprime: false (diferente tipo)\nconsole.log(x != y); // Imprime: false\nconsole.log(x !== y); // Imprime: true\nconsole.log(x &gt; 3); // Imprime: true\n</code></pre>"},{"location":"content/p1/#operadores-logicos","title":"Operadores l\u00f3gicos","text":"<ul> <li><code>&amp;&amp;</code>: AND (verdadero si ambos operandos son verdaderos).</li> <li><code>||</code>: OR (verdadero si al menos un operando es verdadero).</li> <li><code>!</code>: NOT (invierte el valor booleano).</li> </ul> <pre><code>let esAdulto = true;\nlet tieneLicencia = false;\nconsole.log(esAdulto &amp;&amp; tieneLicencia); // Imprime: false\nconsole.log(esAdulto || tieneLicencia); // Imprime: true\nconsole.log(!esAdulto); // Imprime: false\n</code></pre> <p>Ejemplo combinado: <pre><code>let num1 = 8;\nlet num2 = 3;\nlet esMayor = num1 &gt; num2; // true\nlet esDivisible = num1 % 2 === 0; // true\nconsole.log(esMayor &amp;&amp; esDivisible); // Imprime: true\n</code></pre></p>"},{"location":"content/p1/#objetivo-2-utilizar-entrada-de-usuario-con-prompt","title":"Objetivo 2: Utilizar entrada de usuario con <code>prompt</code>","text":""},{"location":"content/p1/#entrada-de-usuario-con-prompt","title":"Entrada de usuario con <code>prompt</code>","text":"<p>La funci\u00f3n <code>prompt</code> muestra un cuadro de di\u00e1logo en el navegador donde el usuario puede ingresar texto. Devuelve un valor de tipo <code>string</code> o <code>null</code> si el usuario cancela.</p> <pre><code>let nombre = prompt(\"\u00bfCu\u00e1l es tu nombre?\");\nconsole.log(\"Hola, \" + nombre); // Imprime el nombre ingresado\n</code></pre>"},{"location":"content/p1/#conversion-de-tipos","title":"Conversi\u00f3n de tipos","text":"<p>Dado que <code>prompt</code> devuelve un string, es necesario convertir el valor a otro tipo si se requiere, por ejemplo, para operaciones num\u00e9ricas.</p> <ul> <li>Convertir a n\u00famero:</li> <li><code>parseInt(string)</code>: Convierte a entero.</li> <li><code>parseFloat(string)</code>: Convierte a decimal.</li> <li><code>Number(string)</code>: Convierte a n\u00famero (entero o decimal seg\u00fan el caso).</li> </ul> <pre><code>let edadStr = prompt(\"Ingresa tu edad:\");\nlet edad = parseInt(edadStr); // Convierte a entero\nconsole.log(\"El pr\u00f3ximo a\u00f1o tendr\u00e1s\", edad + 1, \"a\u00f1os\");\n</code></pre> <p>Validaci\u00f3n b\u00e1sica: <pre><code>let numeroStr = prompt(\"Ingresa un n\u00famero:\");\nlet numero = Number(numeroStr);\nif (isNaN(numero)) {\n  console.log(\"Por favor, ingresa un n\u00famero v\u00e1lido\");\n} else {\n  console.log(\"El doble de tu n\u00famero es\", numero * 2);\n}\n</code></pre></p> <p>Ejemplo pr\u00e1ctico: Un script que pide dos n\u00fameros y realiza operaciones aritm\u00e9ticas: <pre><code>let num1Str = prompt(\"Ingresa el primer n\u00famero:\");\nlet num2Str = prompt(\"Ingresa el segundo n\u00famero:\");\nlet num1 = parseFloat(num1Str);\nlet num2 = parseFloat(num2Str);\n\nif (isNaN(num1) || isNaN(num2)) {\n  console.log(\"Por favor, ingresa n\u00fameros v\u00e1lidos\");\n} else {\n  console.log(\"Suma:\", num1 + num2);\n  console.log(\"Resta:\", num1 - num2);\n  console.log(\"Multiplicaci\u00f3n:\", num1 * num2);\n  console.log(\"Divisi\u00f3n:\", num1 / num2);\n}\n</code></pre></p>"},{"location":"content/p1/#objetivo-3-crear-scripts-interactivos-en-la-consola","title":"Objetivo 3: Crear scripts interactivos en la consola","text":"<p>Ahora que hemos cubierto los fundamentos, podemos combinar todos los conceptos para crear scripts interactivos que se ejecuten en la consola del navegador o en un entorno como Node.js (aunque <code>prompt</code> es espec\u00edfico del navegador).</p>"},{"location":"content/p1/#ejemplo-1-calculadora-basica","title":"Ejemplo 1: Calculadora b\u00e1sica","text":"<p>Este script pide al usuario dos n\u00fameros y una operaci\u00f3n, luego muestra el resultado.</p> <pre><code>let num1Str = prompt(\"Ingresa el primer n\u00famero:\");\nlet num2Str = prompt(\"Ingresa el segundo n\u00famero:\");\nlet operacion = prompt(\"Ingresa la operaci\u00f3n (+, -, *, /):\");\n\nlet num1 = parseFloat(num1Str);\nlet num2 = parseFloat(num2Str);\nlet resultado;\n\nif (isNaN(num1) || isNaN(num2)) {\n  console.log(\"Por favor, ingresa n\u00fameros v\u00e1lidos\");\n} else {\n  if (operacion === \"+\") {\n    resultado = num1 + num2;\n  } else if (operacion === \"-\") {\n    resultado = num1 - num2;\n  } else if (operacion === \"*\") {\n    resultado = num1 * num2;\n  } else if (operacion === \"/\") {\n    if (num2 === 0) {\n      console.log(\"Error: No se puede dividir por cero\");\n    } else {\n      resultado = num1 / num2;\n    }\n  } else {\n    console.log(\"Operaci\u00f3n no v\u00e1lida\");\n  }\n\n  if (resultado !== undefined) {\n    console.log(`Resultado: ${num1} ${operacion} ${num2} = ${resultado}`);\n  }\n}\n</code></pre> <p>Explicaci\u00f3n: - Usa <code>prompt</code> para obtener entrada del usuario. - Convierte strings a n\u00fameros con <code>parseFloat</code>. - Usa operadores aritm\u00e9ticos y condicionales para procesar la operaci\u00f3n. - Maneja casos de error (n\u00fameros inv\u00e1lidos, divisi\u00f3n por cero).</p>"},{"location":"content/p1/#ejemplo-2-verificador-de-edad","title":"Ejemplo 2: Verificador de edad","text":"<p>Un script que pide la edad del usuario y determina si es mayor de edad.</p> <pre><code>const EDAD_MINIMA = 18;\nlet edadStr = prompt(\"Ingresa tu edad:\");\nlet edad = parseInt(edadStr);\n\nif (isNaN(edad)) {\n  console.log(\"Por favor, ingresa una edad v\u00e1lida\");\n} else {\n  let esMayor = edad &gt;= EDAD_MINIMA;\n  console.log(\"\u00bfEres mayor de edad?\", esMayor);\n  if (esMayor) {\n    console.log(\"\u00a1Puedes entrar!\");\n  } else {\n    console.log(\"Lo siento, no puedes entrar.\");\n  }\n}\n</code></pre> <p>Explicaci\u00f3n: - Usa <code>const</code> para una constante. - Convierte la entrada a entero con <code>parseInt</code>. - Usa operadores de comparaci\u00f3n y l\u00f3gicos para evaluar la condici\u00f3n. - Muestra mensajes personalizados seg\u00fan el resultado.</p>"},{"location":"content/p1/#ejemplo-3-adivina-el-numero","title":"Ejemplo 3: Adivina el n\u00famero","text":"<p>Un juego interactivo donde el usuario intenta adivinar un n\u00famero generado aleatoriamente.</p> <pre><code>const numeroSecreto = Math.floor(Math.random() * 10) + 1; // N\u00famero entre 1 y 10\nlet intentos = 0;\nlet adivinado = false;\n\nwhile (!adivinado) {\n  let intentoStr = prompt(\"Adivina el n\u00famero (1-10):\");\n  let intento = parseInt(intentoStr);\n  intentos++;\n\n  if (isNaN(intento)) {\n    console.log(\"Por favor, ingresa un n\u00famero v\u00e1lido\");\n  } else if (intento === numeroSecreto) {\n    console.log(`\u00a1Felicidades! Adivinaste en ${intentos} intentos.`);\n    adivinado = true;\n  } else if (intento &lt; numeroSecreto) {\n    console.log(\"El n\u00famero es mayor. Intenta de nuevo.\");\n  } else {\n    console.log(\"El n\u00famero es menor. Intenta de nuevo.\");\n  }\n}\n</code></pre> <p>Explicaci\u00f3n: - Usa <code>Math.random</code> y <code>Math.floor</code> para generar un n\u00famero aleatorio. - Usa un bucle <code>while</code> para mantener el juego activo hasta que se adivine. - Incrementa un contador de intentos (<code>intentos</code>). - Usa operadores de comparaci\u00f3n para dar pistas al usuario.</p>"},{"location":"content/p1/#resumen-de-los-objetivos-cumplidos","title":"Resumen de los objetivos cumplidos","text":"<ol> <li>Dominar tipos de datos y operadores:</li> <li>Explicamos <code>string</code>, <code>number</code>, <code>boolean</code>, <code>null</code> y <code>undefined</code> con ejemplos.</li> <li>Cubrimos <code>let</code>, <code>const</code>, <code>var</code> y sus diferencias.</li> <li> <p>Detallamos operadores aritm\u00e9ticos, de comparaci\u00f3n y l\u00f3gicos con ejemplos pr\u00e1cticos.</p> </li> <li> <p>Utilizar <code>prompt</code> y conversi\u00f3n de tipos:</p> </li> <li>Mostramos c\u00f3mo obtener entrada de usuario con <code>prompt</code>.</li> <li>Explicamos c\u00f3mo convertir strings a n\u00fameros con <code>parseInt</code>, <code>parseFloat</code> y <code>Number</code>.</li> <li> <p>Incluimos validaci\u00f3n para manejar entradas inv\u00e1lidas.</p> </li> <li> <p>Crear scripts interactivos:</p> </li> <li>Presentamos ejemplos de scripts que combinan entrada de usuario, tipos de datos, operadores y l\u00f3gica condicional.</li> <li>Los ejemplos (calculadora, verificador de edad, juego de adivinanza) son pr\u00e1cticos y escalables.</li> </ol>"},{"location":"content/p1/#ejercicio-procesador-de-datos-personales","title":"Ejercicio: Procesador de datos personales","text":"<p>El ejercicio consiste en un programa que pide al usuario informaci\u00f3n personal (nombre, edad, altura) y realiza operaciones con esos datos, como calcular la edad en meses, comparar valores, y combinar resultados con operadores l\u00f3gicos. Todo el c\u00f3digo se envuelve en un artifact seg\u00fan las instrucciones.</p> <pre><code>// Declaraci\u00f3n de variables con diferentes tipos de datos y m\u00e9todos\nconst SALUDO_INICIAL = \"\u00a1Bienvenido al procesador de datos personales!\";\nvar mensajeFinal = \"Procesando tus datos...\";\nlet resultado = null; // Inicialmente null, se asignar\u00e1 despu\u00e9s\nlet sinAsignar; // Undefined por defecto\n\n// Mostrar mensaje inicial\nconsole.log(SALUDO_INICIAL);\n\n// Obtener entrada del usuario con prompt\nlet nombre = prompt(\"Ingresa tu nombre:\");\nlet edadStr = prompt(\"Ingresa tu edad (en a\u00f1os):\");\nlet alturaStr = prompt(\"Ingresa tu altura (en metros, ej. 1.75):\");\n\n// Conversi\u00f3n de tipos para los valores num\u00e9ricos\nlet edad = parseInt(edadStr); // Convertir edad a entero\nlet altura = parseFloat(alturaStr); // Convertir altura a decimal\n\n// Operaciones aritm\u00e9ticas\nlet edadEnMeses = edad * 12; // Calcular edad en meses\nlet alturaEnCm = altura * 100; // Convertir metros a cent\u00edmetros\nlet sumaEdadAltura = edad + altura; // Suma de edad y altura\nlet restoEdad = edad % 5; // Resto de dividir edad entre 5\n\n// Operaciones de comparaci\u00f3n\nlet esEdadPar = (edad % 2) === 0; // \u00bfEs la edad un n\u00famero par?\nlet esMayorQueCero = altura &gt; 0; // \u00bfEs la altura mayor que 0?\nlet esNombreVacio = nombre === \"\"; // \u00bfEl nombre est\u00e1 vac\u00edo?\nlet esEdadIgualAltura = edad == altura; // Comparaci\u00f3n no estricta\n\n// Operadores l\u00f3gicos\nlet combinacionLogica = esEdadPar &amp;&amp; esMayorQueCero; // AND: \u00bfEdad par y altura &gt; 0?\nlet otraCombinacion = esNombreVacio || esEdadPar; // OR: \u00bfNombre vac\u00edo o edad par?\nlet negacion = !esMayorQueCero; // NOT: Negar si altura &gt; 0\n\n// Asignar resultado para evitar null\nresultado = sumaEdadAltura;\n\n// Mostrar resultados en la consola\nconsole.log(\"--- Resultados ---\");\nconsole.log(\"Nombre ingresado:\", nombre); // String\nconsole.log(\"Edad en a\u00f1os:\", edad); // Number (entero)\nconsole.log(\"Altura en metros:\", altura); // Number (decimal)\nconsole.log(\"Edad en meses:\", edadEnMeses); // Operaci\u00f3n aritm\u00e9tica\nconsole.log(\"Altura en cent\u00edmetros:\", alturaEnCm); // Operaci\u00f3n aritm\u00e9tica\nconsole.log(\"Suma de edad y altura:\", resultado); // Resultado asignado\nconsole.log(\"Resto de edad \u00f7 5:\", restoEdad); // Operaci\u00f3n m\u00f3dulo\nconsole.log(\"\u00bfEs la edad par?\", esEdadPar); // Comparaci\u00f3n\nconsole.log(\"\u00bfEs la altura mayor que 0?\", esMayorQueCero); // Comparaci\u00f3n\nconsole.log(\"\u00bfEl nombre est\u00e1 vac\u00edo?\", esNombreVacio); // Comparaci\u00f3n\nconsole.log(\"\u00bfEdad igual a altura? (no estricta)\", esEdadIgualAltura); // Comparaci\u00f3n\nconsole.log(\"Edad par AND altura &gt; 0:\", combinacionLogica); // L\u00f3gico AND\nconsole.log(\"Nombre vac\u00edo OR edad par:\", otraCombinacion); // L\u00f3gico OR\nconsole.log(\"Negaci\u00f3n de altura &gt; 0:\", negacion); // L\u00f3gico NOT\nconsole.log(\"Valor de variable sin asignar:\", sinAsignar); // Undefined\nconsole.log(\"Mensaje final:\", mensajeFinal); // Var\n\n// Nota: No se valida la entrada del usuario para evitar condicionales\n</code></pre>"},{"location":"content/p1/#explicacion-del-ejercicio","title":"Explicaci\u00f3n del ejercicio","text":"<ol> <li>Tipos de datos:</li> <li>String: <code>SALUDO_INICIAL</code>, <code>nombre</code>, <code>mensajeFinal</code>.</li> <li>Number: <code>edad</code> (entero), <code>altura</code> (decimal), <code>edadEnMeses</code>, <code>alturaEnCm</code>, <code>sumaEdadAltura</code>, <code>restoEdad</code>.</li> <li>Boolean: <code>esEdadPar</code>, <code>esMayorQueCero</code>, <code>esNombreVacio</code>, <code>esEdadIgualAltura</code>, <code>combinacionLogica</code>, <code>otraCombinacion</code>, <code>negacion</code>.</li> <li>Null: <code>resultado</code> inicialmente.</li> <li> <p>Undefined: <code>sinAsignar</code>.</p> </li> <li> <p>Declaraci\u00f3n de variables:</p> </li> <li>const: <code>SALUDO_INICIAL</code> para un mensaje constante.</li> <li>var: <code>mensajeFinal</code> para mostrar el uso de <code>var</code>.</li> <li> <p>let: <code>nombre</code>, <code>edad</code>, <code>altura</code>, <code>resultado</code>, <code>sinAsignar</code> y otras variables que pueden reasignarse o mantenerse sin valor inicial.</p> </li> <li> <p>Operadores:</p> </li> <li>Aritm\u00e9ticos: <code>*</code> para calcular <code>edadEnMeses</code> y <code>alturaEnCm</code>, <code>+</code> para <code>sumaEdadAltura</code>, <code>%</code> para <code>restoEdad</code> y <code>esEdadPar</code>.</li> <li>Comparaci\u00f3n: <code>===</code> para <code>esEdadPar</code>, <code>esNombreVacio</code>, <code>&gt;</code> para <code>esMayorQueCero</code>, <code>==</code> para <code>esEdadIgualAltura</code>.</li> <li> <p>L\u00f3gicos: <code>&amp;&amp;</code> para <code>combinacionLogica</code>, <code>||</code> para <code>otraCombinacion</code>, <code>!</code> para <code>negacion</code>.</p> </li> <li> <p>Entrada de usuario con <code>prompt</code> y conversi\u00f3n de tipos:</p> </li> <li>Usa <code>prompt</code> para obtener <code>nombre</code>, <code>edadStr</code> y <code>alturaStr</code>.</li> <li>Convierte <code>edadStr</code> a entero con <code>parseInt</code>.</li> <li> <p>Convierte <code>alturaStr</code> a decimal con <code>parseFloat</code>.</p> </li> <li> <p>Interactividad en la consola:</p> </li> <li>El script muestra un mensaje inicial, procesa las entradas del usuario, realiza c\u00e1lculos y comparaciones, y muestra todos los resultados en la consola.</li> <li>No usa condicionales ni ciclos, por lo que no valida entradas (por ejemplo, si el usuario ingresa texto en lugar de n\u00fameros, el resultado puede ser <code>NaN</code>).</li> </ol>"},{"location":"content/p1/#como-ejecutar-el-ejercicio","title":"C\u00f3mo ejecutar el ejercicio","text":"<ol> <li>Copia el c\u00f3digo en un archivo con extensi\u00f3n <code>.js</code> (por ejemplo, <code>procesador_datos_personales.js</code>).</li> <li>Incl\u00fayelo en un archivo HTML b\u00e1sico para ejecutarlo en un navegador:    <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Ejercicio JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script src=\"procesador_datos_personales.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> <li>Abre el archivo HTML en un navegador y abre la consola (F12 o clic derecho &gt; Inspeccionar &gt; Consola).</li> <li>Ingresa datos cuando se muestren los cuadros de <code>prompt</code> (por ejemplo, \"Ana\", \"25\", \"1.75\").</li> <li>Observa los resultados en la consola.</li> </ol>"},{"location":"content/p1/#ejemplo-de-salida-en-la-consola","title":"Ejemplo de salida en la consola","text":"<p>Si el usuario ingresa: - Nombre: \"Ana\" - Edad: \"25\" - Altura: \"1.75\"</p> <p>La consola mostrar\u00e1 algo como: <pre><code>\u00a1Bienvenido al procesador de datos personales!\n--- Resultados ---\nNombre ingresado: Ana\nEdad en a\u00f1os: 25\nAltura en metros: 1.75\nEdad en meses: 300\nAltura en cent\u00edmetros: 175\nSuma de edad y altura: 26.75\nResto de edad \u00f7 5: 0\n\u00bfEs la edad par? false\n\u00bfEs la altura mayor que 0? true\n\u00bfEl nombre est\u00e1 vac\u00edo? false\n\u00bfEdad igual a altura? (no estricta) false\nEdad par AND altura &gt; 0: false\nNombre vac\u00edo OR edad par: false\nNegaci\u00f3n de altura &gt; 0: false\nValor de variable sin asignar: undefined\nMensaje final: Procesando tus datos...\n</code></pre></p>"},{"location":"content/p10/","title":"Semana 10 - Selectores del DOM en JavaScript","text":""},{"location":"content/p10/#introduccion-a-los-selectores","title":"Introducci\u00f3n a los Selectores","text":"<p>Los selectores son m\u00e9todos que nos permiten encontrar y obtener elementos espec\u00edficos del DOM. Es como tener un sistema de b\u00fasqueda s\u00faper poderoso para tu p\u00e1gina web. Imagina que tu p\u00e1gina web es una biblioteca gigante y los selectores son diferentes formas de encontrar exactamente el libro que necesitas.</p>"},{"location":"content/p10/#metodos-de-seleccion-principales","title":"M\u00e9todos de Selecci\u00f3n Principales","text":""},{"location":"content/p10/#1-getelementbyid-buscar-por-id","title":"1. getElementById() - Buscar por ID","text":"<p>Este es el m\u00e9todo m\u00e1s espec\u00edfico y r\u00e1pido. Cada ID debe ser \u00fanico en la p\u00e1gina.</p> <pre><code>&lt;div id=\"miContenedor\"&gt;Contenido principal&lt;/div&gt;\n&lt;button id=\"botonPrincipal\"&gt;Hacer clic&lt;/button&gt;\n&lt;p id=\"mensaje\"&gt;Este es un mensaje&lt;/p&gt;\n</code></pre> <pre><code>// Seleccionar por ID\nconst contenedor = document.getElementById('miContenedor');\nconst boton = document.getElementById('botonPrincipal');\nconst mensaje = document.getElementById('mensaje');\n\nconsole.log(contenedor.textContent); // \"Contenido principal\"\nconsole.log(boton.textContent); // \"Hacer clic\"\nconsole.log(mensaje.textContent); // \"Este es un mensaje\"\n\n// Verificar si el elemento existe\nif (contenedor) {\n    console.log('Contenedor encontrado!');\n} else {\n    console.log('Contenedor no encontrado');\n}\n</code></pre>"},{"location":"content/p10/#2-getelementsbyclassname-buscar-por-clase","title":"2. getElementsByClassName() - Buscar por Clase","text":"<p>Devuelve una HTMLCollection con todos los elementos que tienen la clase especificada.</p> <pre><code>&lt;div class=\"tarjeta\"&gt;Tarjeta 1&lt;/div&gt;\n&lt;div class=\"tarjeta destacada\"&gt;Tarjeta 2&lt;/div&gt;\n&lt;p class=\"tarjeta\"&gt;P\u00e1rrafo con clase tarjeta&lt;/p&gt;\n&lt;span class=\"destacada\"&gt;Texto destacado&lt;/span&gt;\n</code></pre> <pre><code>// Seleccionar por clase\nconst tarjetas = document.getElementsByClassName('tarjeta');\nconst destacadas = document.getElementsByClassName('destacada');\n\nconsole.log('N\u00famero de tarjetas:', tarjetas.length); // 3\nconsole.log('N\u00famero de destacadas:', destacadas.length); // 2\n\n// Iterar sobre los elementos\nfor (let i = 0; i &lt; tarjetas.length; i++) {\n    console.log(`Tarjeta ${i + 1}:`, tarjetas[i].textContent);\n}\n\n// Convertir a array para usar m\u00e9todos modernos\nconst tarjetasArray = Array.from(tarjetas);\ntarjetasArray.forEach((tarjeta, indice) =&gt; {\n    console.log(`Tarjeta ${indice + 1}:`, tarjeta.textContent);\n});\n</code></pre>"},{"location":"content/p10/#3-getelementsbytagname-buscar-por-etiqueta","title":"3. getElementsByTagName() - Buscar por Etiqueta","text":"<p>Devuelve todos los elementos de un tipo espec\u00edfico de etiqueta HTML.</p> <pre><code>&lt;h1&gt;T\u00edtulo Principal&lt;/h1&gt;\n&lt;h2&gt;Subt\u00edtulo 1&lt;/h2&gt;\n&lt;h2&gt;Subt\u00edtulo 2&lt;/h2&gt;\n&lt;p&gt;Primer p\u00e1rrafo&lt;/p&gt;\n&lt;p&gt;Segundo p\u00e1rrafo&lt;/p&gt;\n&lt;p&gt;Tercer p\u00e1rrafo&lt;/p&gt;\n</code></pre> <pre><code>// Seleccionar por etiqueta\nconst titulos = document.getElementsByTagName('h2');\nconst parrafos = document.getElementsByTagName('p');\nconst todosLosElementos = document.getElementsByTagName('*'); // Todos los elementos\n\nconsole.log('Subt\u00edtulos encontrados:', titulos.length); // 2\nconsole.log('P\u00e1rrafos encontrados:', parrafos.length); // 3\nconsole.log('Total de elementos:', todosLosElementos.length);\n\n// Ejemplo pr\u00e1ctico: cambiar el estilo de todos los p\u00e1rrafos\nfor (let parrafo of parrafos) {\n    parrafo.style.color = 'blue';\n    parrafo.style.fontSize = '16px';\n}\n</code></pre>"},{"location":"content/p10/#4-queryselector-selector-css-uno","title":"4. querySelector() - Selector CSS (Uno)","text":"<p>Este es el m\u00e9todo m\u00e1s moderno y flexible. Usa la misma sintaxis que CSS y devuelve el primer elemento que coincida.</p> <pre><code>&lt;div class=\"contenedor\"&gt;\n    &lt;h1 id=\"titulo\"&gt;Mi T\u00edtulo&lt;/h1&gt;\n    &lt;p class=\"descripcion\"&gt;Primera descripci\u00f3n&lt;/p&gt;\n    &lt;p class=\"descripcion destacada\"&gt;Segunda descripci\u00f3n&lt;/p&gt;\n    &lt;ul&gt;\n        &lt;li&gt;Elemento 1&lt;/li&gt;\n        &lt;li class=\"especial\"&gt;Elemento 2&lt;/li&gt;\n        &lt;li&gt;Elemento 3&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>// Selectores b\u00e1sicos\nconst titulo = document.querySelector('#titulo'); // Por ID\nconst primerParrafo = document.querySelector('.descripcion'); // Por clase\nconst contenedor = document.querySelector('div'); // Por etiqueta\n\n// Selectores combinados\nconst parrafoDestacado = document.querySelector('.descripcion.destacada'); // M\u00faltiples clases\nconst liEspecial = document.querySelector('li.especial'); // Etiqueta + clase\nconst primerLi = document.querySelector('ul li'); // Descendiente\nconst parrafoEnContenedor = document.querySelector('.contenedor p'); // Descendiente espec\u00edfico\n\n// Selectores de atributos\nconst elementoConId = document.querySelector('[id]'); // Cualquier elemento con ID\nconst elementoConClase = document.querySelector('[class=\"especial\"]'); // Atributo espec\u00edfico\n\n// Pseudo-selectores\nconst primerHijo = document.querySelector('li:first-child');\nconst ultimoHijo = document.querySelector('li:last-child');\nconst segundoHijo = document.querySelector('li:nth-child(2)');\n\nconsole.log('T\u00edtulo:', titulo?.textContent);\nconsole.log('Primer p\u00e1rrafo:', primerParrafo?.textContent);\nconsole.log('P\u00e1rrafo destacado:', parrafoDestacado?.textContent);\n</code></pre>"},{"location":"content/p10/#5-queryselectorall-selector-css-todos","title":"5. querySelectorAll() - Selector CSS (Todos)","text":"<p>Igual que <code>querySelector()</code> pero devuelve todos los elementos que coincidan en un NodeList.</p> <pre><code>// Seleccionar m\u00faltiples elementos\nconst todasLasDescripciones = document.querySelectorAll('.descripcion');\nconst todosLosLi = document.querySelectorAll('li');\nconst elementosDestacados = document.querySelectorAll('.destacada');\n\nconsole.log('Descripciones encontradas:', todasLasDescripciones.length);\nconsole.log('Items de lista:', todosLosLi.length);\n\n// Iterar con forEach (NodeList tiene este m\u00e9todo)\ntodasLasDescripciones.forEach((descripcion, indice) =&gt; {\n    console.log(`Descripci\u00f3n ${indice + 1}:`, descripcion.textContent);\n});\n\n// Convertir a array para m\u00e1s m\u00e9todos\nconst liArray = [...todosLosLi];\nconst textos = liArray.map(li =&gt; li.textContent);\nconsole.log('Textos de los li:', textos);\n</code></pre>"},{"location":"content/p10/#selectores-css-avanzados","title":"Selectores CSS Avanzados","text":""},{"location":"content/p10/#selectores-de-relacion","title":"Selectores de Relaci\u00f3n","text":"<pre><code>&lt;div class=\"padre\"&gt;\n    &lt;h2&gt;T\u00edtulo&lt;/h2&gt;\n    &lt;p&gt;P\u00e1rrafo directo&lt;/p&gt;\n    &lt;div class=\"hijo\"&gt;\n        &lt;p&gt;P\u00e1rrafo anidado&lt;/p&gt;\n        &lt;span&gt;Texto en span&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Otro p\u00e1rrafo directo&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>// Descendiente (espacio): cualquier nivel de anidaci\u00f3n\nconst todosLosP = document.querySelectorAll('.padre p');\nconsole.log('P\u00e1rrafos descendientes:', todosLosP.length); // 3\n\n// Hijo directo (&gt;): solo hijos inmediatos\nconst hijosDirectos = document.querySelectorAll('.padre &gt; p');\nconsole.log('P\u00e1rrafos hijos directos:', hijosDirectos.length); // 2\n\n// Hermano adyacente (+): el siguiente hermano inmediato\nconst hermanoAdyacente = document.querySelector('h2 + p');\nconsole.log('Hermano adyacente:', hermanoAdyacente?.textContent);\n\n// Hermanos generales (~): todos los hermanos siguientes\nconst hermanosGenerales = document.querySelectorAll('h2 ~ p');\nconsole.log('Hermanos generales:', hermanosGenerales.length);\n</code></pre>"},{"location":"content/p10/#selectores-de-atributos","title":"Selectores de Atributos","text":"<pre><code>&lt;input type=\"text\" name=\"usuario\" placeholder=\"Nombre de usuario\"&gt;\n&lt;input type=\"email\" name=\"correo\" required&gt;\n&lt;input type=\"password\" name=\"clave\"&gt;\n&lt;button type=\"submit\" disabled&gt;Enviar&lt;/button&gt;\n&lt;a href=\"https://ejemplo.com\" target=\"_blank\"&gt;Enlace externo&lt;/a&gt;\n&lt;img src=\"imagen.jpg\" alt=\"Descripci\u00f3n\" data-categoria=\"fotos\"&gt;\n</code></pre> <pre><code>// Atributo existe\nconst elementosConPlaceholder = document.querySelectorAll('[placeholder]');\nconst elementosRequeridos = document.querySelectorAll('[required]');\n\n// Atributo con valor espec\u00edfico\nconst inputTexto = document.querySelector('[type=\"text\"]');\nconst inputEmail = document.querySelector('[type=\"email\"]');\n\n// Atributo que contiene valor\nconst enlacesExternos = document.querySelectorAll('[href*=\"https\"]');\nconst imagenesJpg = document.querySelectorAll('[src$=\".jpg\"]');\n\n// Atributo que empieza con valor\nconst elementosData = document.querySelectorAll('[class^=\"data-\"]');\n\n// Atributos personalizados (data-*)\nconst elementosConCategoria = document.querySelectorAll('[data-categoria]');\nconst fotosCategorias = document.querySelectorAll('[data-categoria=\"fotos\"]');\n\nconsole.log('Elementos con placeholder:', elementosConPlaceholder.length);\nconsole.log('Elementos requeridos:', elementosRequeridos.length);\nconsole.log('Enlaces externos:', enlacesExternos.length);\n</code></pre>"},{"location":"content/p10/#pseudo-selectores","title":"Pseudo-selectores","text":"<pre><code>&lt;ul class=\"lista\"&gt;\n    &lt;li&gt;Primer elemento&lt;/li&gt;\n    &lt;li&gt;Segundo elemento&lt;/li&gt;\n    &lt;li&gt;Tercer elemento&lt;/li&gt;\n    &lt;li&gt;Cuarto elemento&lt;/li&gt;\n    &lt;li&gt;Quinto elemento&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <pre><code>// Pseudo-selectores de posici\u00f3n\nconst primerElemento = document.querySelector('.lista li:first-child');\nconst ultimoElemento = document.querySelector('.lista li:last-child');\nconst tercerElemento = document.querySelector('.lista li:nth-child(3)');\nconst elementosPares = document.querySelectorAll('.lista li:nth-child(even)');\nconst elementosImpares = document.querySelectorAll('.lista li:nth-child(odd)');\n\n// Pseudo-selectores de tipo\nconst primerLi = document.querySelector('li:first-of-type');\nconst ultimoLi = document.querySelector('li:last-of-type');\n\n// Pseudo-selectores de estado\nconst elementosHabilitados = document.querySelectorAll('input:enabled');\nconst elementosDeshabilitados = document.querySelectorAll('input:disabled');\nconst elementosChecked = document.querySelectorAll('input:checked');\n\nconsole.log('Primer elemento:', primerElemento?.textContent);\nconsole.log('\u00daltimo elemento:', ultimoElemento?.textContent);\nconsole.log('Elementos pares:', elementosPares.length);\nconsole.log('Elementos impares:', elementosImpares.length);\n</code></pre>"},{"location":"content/p10/#comparacion-de-metodos","title":"Comparaci\u00f3n de M\u00e9todos","text":""},{"location":"content/p10/#rendimiento-y-uso","title":"Rendimiento y Uso","text":"<pre><code>// Rendimiento (de m\u00e1s r\u00e1pido a m\u00e1s lento)\n// 1. getElementById() - M\u00e1s r\u00e1pido\nconst elemento1 = document.getElementById('miId');\n\n// 2. getElementsByClassName() - R\u00e1pido\nconst elementos2 = document.getElementsByClassName('miClase');\n\n// 3. getElementsByTagName() - R\u00e1pido\nconst elementos3 = document.getElementsByTagName('div');\n\n// 4. querySelector() - M\u00e1s lento pero m\u00e1s flexible\nconst elemento4 = document.querySelector('#miId');\n\n// 5. querySelectorAll() - M\u00e1s lento pero m\u00e1s flexible\nconst elementos5 = document.querySelectorAll('.miClase');\n</code></pre>"},{"location":"content/p10/#cuando-usar-cada-metodo","title":"Cu\u00e1ndo Usar Cada M\u00e9todo","text":"<pre><code>// \u2705 Usar getElementById() cuando:\n// - Necesitas un elemento espec\u00edfico por ID\n// - Rendimiento es cr\u00edtico\nconst header = document.getElementById('header');\n\n// \u2705 Usar getElementsByClassName() cuando:\n// - Necesitas elementos por clase\n// - Quieres una colecci\u00f3n \"viva\" que se actualice autom\u00e1ticamente\nconst botones = document.getElementsByClassName('btn');\n\n// \u2705 Usar querySelector() cuando:\n// - Necesitas selectores CSS complejos\n// - Solo necesitas el primer elemento\nconst primerBotonActivo = document.querySelector('.btn.activo');\n\n// \u2705 Usar querySelectorAll() cuando:\n// - Necesitas selectores CSS complejos\n// - Necesitas todos los elementos que coincidan\nconst todosLosBotonesActivos = document.querySelectorAll('.btn.activo');\n</code></pre>"},{"location":"content/p10/#ejemplos-practicos","title":"Ejemplos Pr\u00e1cticos","text":""},{"location":"content/p10/#ejemplo-1-sistema-de-navegacion","title":"Ejemplo 1: Sistema de Navegaci\u00f3n","text":"<pre><code>&lt;nav class=\"navegacion\"&gt;\n    &lt;ul&gt;\n        &lt;li&gt;&lt;a href=\"#inicio\" class=\"enlace activo\"&gt;Inicio&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"#servicios\" class=\"enlace\"&gt;Servicios&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"#contacto\" class=\"enlace\"&gt;Contacto&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre> <pre><code>function configurarNavegacion() {\n    // Seleccionar todos los enlaces de navegaci\u00f3n\n    const enlaces = document.querySelectorAll('.navegacion .enlace');\n    const enlaceActivo = document.querySelector('.navegacion .enlace.activo');\n\n    console.log('Enlaces encontrados:', enlaces.length);\n    console.log('Enlace activo:', enlaceActivo?.textContent);\n\n    // Agregar evento a cada enlace\n    enlaces.forEach(enlace =&gt; {\n        enlace.addEventListener('click', function(e) {\n            e.preventDefault();\n\n            // Remover clase activo de todos\n            enlaces.forEach(e =&gt; e.classList.remove('activo'));\n\n            // Agregar clase activo al clickeado\n            this.classList.add('activo');\n\n            console.log('Navegando a:', this.textContent);\n        });\n    });\n}\n\nconfigurarNavegacion();\n</code></pre>"},{"location":"content/p10/#ejemplo-2-validador-de-formulario","title":"Ejemplo 2: Validador de Formulario","text":"<pre><code>&lt;form id=\"miFormulario\"&gt;\n    &lt;input type=\"text\" name=\"nombre\" required placeholder=\"Nombre\"&gt;\n    &lt;input type=\"email\" name=\"email\" required placeholder=\"Email\"&gt;\n    &lt;input type=\"password\" name=\"password\" required placeholder=\"Contrase\u00f1a\"&gt;\n    &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <pre><code>function validarFormulario() {\n    const formulario = document.getElementById('miFormulario');\n    const camposRequeridos = document.querySelectorAll('#miFormulario [required]');\n    const botonEnviar = document.querySelector('#miFormulario button[type=\"submit\"]');\n\n    function verificarCampos() {\n        let todosCompletos = true;\n\n        camposRequeridos.forEach(campo =&gt; {\n            if (!campo.value.trim()) {\n                todosCompletos = false;\n                campo.style.borderColor = 'red';\n            } else {\n                campo.style.borderColor = 'green';\n            }\n        });\n\n        botonEnviar.disabled = !todosCompletos;\n        return todosCompletos;\n    }\n\n    // Verificar en tiempo real\n    camposRequeridos.forEach(campo =&gt; {\n        campo.addEventListener('input', verificarCampos);\n    });\n\n    // Verificar al enviar\n    formulario.addEventListener('submit', function(e) {\n        if (!verificarCampos()) {\n            e.preventDefault();\n            alert('Por favor, completa todos los campos requeridos');\n        }\n    });\n}\n\nvalidarFormulario();\n</code></pre>"},{"location":"content/p10/#ejemplo-3-galeria-de-imagenes","title":"Ejemplo 3: Galer\u00eda de Im\u00e1genes","text":"<pre><code>&lt;div class=\"galeria\"&gt;\n    &lt;img src=\"img1.jpg\" alt=\"Imagen 1\" class=\"miniatura\" data-grande=\"img1-grande.jpg\"&gt;\n    &lt;img src=\"img2.jpg\" alt=\"Imagen 2\" class=\"miniatura\" data-grande=\"img2-grande.jpg\"&gt;\n    &lt;img src=\"img3.jpg\" alt=\"Imagen 3\" class=\"miniatura\" data-grande=\"img3-grande.jpg\"&gt;\n&lt;/div&gt;\n&lt;div id=\"modal\" class=\"modal oculto\"&gt;\n    &lt;img id=\"imagenGrande\" src=\"\" alt=\"\"&gt;\n    &lt;button id=\"cerrarModal\"&gt;\u00d7&lt;/button&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>function configurarGaleria() {\n    const miniaturas = document.querySelectorAll('.galeria .miniatura');\n    const modal = document.getElementById('modal');\n    const imagenGrande = document.getElementById('imagenGrande');\n    const botonCerrar = document.getElementById('cerrarModal');\n\n    // Configurar click en miniaturas\n    miniaturas.forEach(miniatura =&gt; {\n        miniatura.addEventListener('click', function() {\n            const srcGrande = this.getAttribute('data-grande');\n            const alt = this.getAttribute('alt');\n\n            imagenGrande.src = srcGrande;\n            imagenGrande.alt = alt;\n            modal.classList.remove('oculto');\n        });\n    });\n\n    // Cerrar modal\n    botonCerrar.addEventListener('click', function() {\n        modal.classList.add('oculto');\n    });\n\n    // Cerrar con ESC\n    document.addEventListener('keydown', function(e) {\n        if (e.key === 'Escape' &amp;&amp; !modal.classList.contains('oculto')) {\n            modal.classList.add('oculto');\n        }\n    });\n}\n\nconfigurarGaleria();\n</code></pre>"},{"location":"content/p10/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":""},{"location":"content/p10/#ejercicio-1-contador-de-elementos","title":"Ejercicio 1: Contador de Elementos","text":"<pre><code>function contarElementos() {\n    const contadores = {\n        totalElementos: document.querySelectorAll('*').length,\n        divs: document.getElementsByTagName('div').length,\n        parrafos: document.getElementsByTagName('p').length,\n        imagenes: document.getElementsByTagName('img').length,\n        enlaces: document.getElementsByTagName('a').length,\n        elementosConId: document.querySelectorAll('[id]').length,\n        elementosConClase: document.querySelectorAll('[class]').length\n    };\n\n    console.table(contadores);\n    return contadores;\n}\n\ncontarElementos();\n</code></pre>"},{"location":"content/p10/#ejercicio-2-buscador-de-elementos","title":"Ejercicio 2: Buscador de Elementos","text":"<pre><code>function buscarElementos(selector) {\n    try {\n        const elementos = document.querySelectorAll(selector);\n\n        console.log(`Selector: \"${selector}\"`);\n        console.log(`Elementos encontrados: ${elementos.length}`);\n\n        elementos.forEach((elemento, indice) =&gt; {\n            console.log(`${indice + 1}. ${elemento.tagName}${elemento.id ? '#' + elemento.id : ''}${elemento.className ? '.' + elemento.className.replace(/ /g, '.') : ''}`);\n        });\n\n        return elementos;\n    } catch (error) {\n        console.error('Selector inv\u00e1lido:', error.message);\n        return null;\n    }\n}\n\n// Ejemplos de uso\nbuscarElementos('div');\nbuscarElementos('.mi-clase');\nbuscarElementos('#mi-id');\nbuscarElementos('div.clase p');\n</code></pre>"},{"location":"content/p10/#ejercicio-3-analizador-de-selectores","title":"Ejercicio 3: Analizador de Selectores","text":"<pre><code>function analizarSelectores() {\n    const selectores = [\n        'div',\n        '.clase',\n        '#id',\n        'div.clase',\n        'div &gt; p',\n        'div p',\n        'input[type=\"text\"]',\n        'li:first-child',\n        'p:nth-child(2n)',\n        '[data-*]'\n    ];\n\n    selectores.forEach(selector =&gt; {\n        try {\n            const elementos = document.querySelectorAll(selector);\n            console.log(`${selector.padEnd(20)} \u2192 ${elementos.length} elementos`);\n        } catch (error) {\n            console.log(`${selector.padEnd(20)} \u2192 Error: ${error.message}`);\n        }\n    });\n}\n\nanalizarSelectores();\n</code></pre>"},{"location":"content/p10/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":""},{"location":"content/p10/#1-verificar-existencia","title":"1. Verificar Existencia","text":"<pre><code>// \u2705 Siempre verificar si el elemento existe\nconst elemento = document.getElementById('miElemento');\nif (elemento) {\n    elemento.style.color = 'red';\n} else {\n    console.warn('Elemento no encontrado');\n}\n\n// \u2705 Usar optional chaining (ES2020)\nconst texto = document.querySelector('.mi-clase')?.textContent;\n</code></pre>"},{"location":"content/p10/#2-cachear-selectores","title":"2. Cachear Selectores","text":"<pre><code>// \u274c Malo: seleccionar repetidamente\nfunction malaFuncion() {\n    document.getElementById('boton').addEventListener('click', () =&gt; {\n        document.getElementById('mensaje').textContent = 'Clickeado';\n        document.getElementById('contador').textContent = '1';\n    });\n}\n\n// \u2705 Bueno: cachear selectores\nfunction buenaFuncion() {\n    const boton = document.getElementById('boton');\n    const mensaje = document.getElementById('mensaje');\n    const contador = document.getElementById('contador');\n\n    if (boton &amp;&amp; mensaje &amp;&amp; contador) {\n        boton.addEventListener('click', () =&gt; {\n            mensaje.textContent = 'Clickeado';\n            contador.textContent = '1';\n        });\n    }\n}\n</code></pre>"},{"location":"content/p10/#3-usar-el-selector-mas-especifico","title":"3. Usar el Selector M\u00e1s Espec\u00edfico","text":"<pre><code>// \u2705 Espec\u00edfico y r\u00e1pido\nconst elemento = document.getElementById('miId');\n\n// \u274c Menos eficiente\nconst elemento = document.querySelector('#miId');\n\n// \u2705 Para selectores complejos, usar querySelector\nconst elemento = document.querySelector('.contenedor &gt; .hijo:first-child');\n</code></pre>"},{"location":"content/p10/#resumen","title":"Resumen","text":"<p>En esta semana hemos aprendido:</p> <ol> <li>M\u00e9todos b\u00e1sicos: <code>getElementById()</code>, <code>getElementsByClassName()</code>, <code>getElementsByTagName()</code></li> <li>M\u00e9todos modernos: <code>querySelector()</code> y <code>querySelectorAll()</code></li> <li>Selectores CSS: B\u00e1sicos, avanzados, de relaci\u00f3n, de atributos y pseudo-selectores</li> <li>Mejores pr\u00e1cticas: Verificaci\u00f3n, cacheo y eficiencia</li> <li>Ejemplos pr\u00e1cticos: Navegaci\u00f3n, formularios y galer\u00edas</li> </ol> <p>Los selectores son fundamentales para la manipulaci\u00f3n del DOM. En la pr\u00f3xima semana aprenderemos c\u00f3mo modificar los elementos que hemos seleccionado.</p> <p>Consejo</p> <p>Practica diferentes selectores en la consola del navegador. Usa <code>document.querySelectorAll('tu-selector')</code> para experimentar y ver qu\u00e9 elementos seleccionas.</p>"},{"location":"content/p11/","title":"Semana 11 - Modificaci\u00f3n de Elementos HTML desde JavaScript","text":""},{"location":"content/p11/#introduccion-a-la-modificacion-del-dom","title":"Introducci\u00f3n a la Modificaci\u00f3n del DOM","text":"<p>Una vez que sabemos c\u00f3mo seleccionar elementos del DOM, el siguiente paso es modificarlos. JavaScript nos permite cambiar pr\u00e1cticamente cualquier aspecto de los elementos HTML: su contenido, atributos, estilos, estructura y m\u00e1s. Es como tener superpoderes para transformar tu p\u00e1gina web en tiempo real.</p>"},{"location":"content/p11/#modificacion-de-contenido","title":"Modificaci\u00f3n de Contenido","text":""},{"location":"content/p11/#1-textcontent-texto-plano","title":"1. textContent - Texto Plano","text":"<p>La propiedad <code>textContent</code> permite leer y modificar solo el texto de un elemento, ignorando cualquier HTML.</p> <pre><code>&lt;div id=\"mensaje\"&gt;\n    &lt;strong&gt;Hola&lt;/strong&gt; mundo\n    &lt;span&gt;\u00a1Bienvenido!&lt;/span&gt;\n&lt;/div&gt;\n&lt;p id=\"descripcion\"&gt;Esta es una descripci\u00f3n inicial&lt;/p&gt;\n</code></pre> <pre><code>const mensaje = document.getElementById('mensaje');\nconst descripcion = document.getElementById('descripcion');\n\n// Leer contenido de texto\nconsole.log(mensaje.textContent); // \"Hola mundo \u00a1Bienvenido!\"\nconsole.log(descripcion.textContent); // \"Esta es una descripci\u00f3n inicial\"\n\n// Modificar contenido de texto\ndescripcion.textContent = 'Nueva descripci\u00f3n actualizada';\nmensaje.textContent = 'Texto completamente nuevo';\n\n// Agregar texto al existente\ndescripcion.textContent += ' - Texto agregado';\n</code></pre>"},{"location":"content/p11/#2-innerhtml-html-completo","title":"2. innerHTML - HTML Completo","text":"<p>La propiedad <code>innerHTML</code> permite leer y modificar el HTML completo dentro de un elemento.</p> <pre><code>&lt;div id=\"contenedor\"&gt;\n    &lt;p&gt;Contenido original&lt;/p&gt;\n&lt;/div&gt;\n&lt;ul id=\"lista\"&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;\n    &lt;li&gt;Item 2&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <pre><code>const contenedor = document.getElementById('contenedor');\nconst lista = document.getElementById('lista');\n\n// Leer HTML interno\nconsole.log(contenedor.innerHTML); // \"&lt;p&gt;Contenido original&lt;/p&gt;\"\n\n// Reemplazar HTML completo\ncontenedor.innerHTML = `\n    &lt;h2&gt;Nuevo T\u00edtulo&lt;/h2&gt;\n    &lt;p&gt;Nuevo p\u00e1rrafo con &lt;strong&gt;texto en negrita&lt;/strong&gt;&lt;/p&gt;\n    &lt;button onclick=\"alert('\u00a1Hola!')\"&gt;Hacer clic&lt;/button&gt;\n`;\n\n// Agregar HTML al existente\nlista.innerHTML += '&lt;li&gt;Item 3 agregado&lt;/li&gt;';\n\n// Crear lista din\u00e1mica\nconst frutas = ['Manzana', 'Banana', 'Naranja'];\nlista.innerHTML = frutas.map(fruta =&gt; `&lt;li&gt;${fruta}&lt;/li&gt;`).join('');\n</code></pre>"},{"location":"content/p11/#3-outerhtml-elemento-completo","title":"3. outerHTML - Elemento Completo","text":"<p>La propiedad <code>outerHTML</code> incluye el elemento mismo, no solo su contenido.</p> <pre><code>&lt;div id=\"caja\" class=\"destacada\"&gt;\n    &lt;p&gt;Contenido de la caja&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>const caja = document.getElementById('caja');\n\n// Leer HTML externo (incluye el elemento)\nconsole.log(caja.outerHTML);\n// \"&lt;div id='caja' class='destacada'&gt;&lt;p&gt;Contenido de la caja&lt;/p&gt;&lt;/div&gt;\"\n\n// Reemplazar el elemento completo\ncaja.outerHTML = '&lt;section class=\"nueva-seccion\"&gt;&lt;h2&gt;Nueva Secci\u00f3n&lt;/h2&gt;&lt;/section&gt;';\n</code></pre>"},{"location":"content/p11/#ejemplo-practico-editor-de-contenido","title":"Ejemplo Pr\u00e1ctico: Editor de Contenido","text":"<pre><code>&lt;div id=\"editor\"&gt;\n    &lt;h2 id=\"titulo\"&gt;T\u00edtulo Original&lt;/h2&gt;\n    &lt;p id=\"parrafo\"&gt;P\u00e1rrafo original&lt;/p&gt;\n    &lt;div id=\"contenido-html\"&gt;&lt;em&gt;Contenido con HTML&lt;/em&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=\"controles\"&gt;\n    &lt;input type=\"text\" id=\"nuevoTitulo\" placeholder=\"Nuevo t\u00edtulo\"&gt;\n    &lt;input type=\"text\" id=\"nuevoParrafo\" placeholder=\"Nuevo p\u00e1rrafo\"&gt;\n    &lt;textarea id=\"nuevoHTML\" placeholder=\"Nuevo HTML\"&gt;&lt;/textarea&gt;\n    &lt;button onclick=\"actualizarContenido()\"&gt;Actualizar&lt;/button&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>function actualizarContenido() {\n    const titulo = document.getElementById('titulo');\n    const parrafo = document.getElementById('parrafo');\n    const contenidoHTML = document.getElementById('contenido-html');\n\n    const nuevoTitulo = document.getElementById('nuevoTitulo').value;\n    const nuevoParrafo = document.getElementById('nuevoParrafo').value;\n    const nuevoHTML = document.getElementById('nuevoHTML').value;\n\n    // Actualizar solo si hay contenido nuevo\n    if (nuevoTitulo) {\n        titulo.textContent = nuevoTitulo;\n    }\n\n    if (nuevoParrafo) {\n        parrafo.textContent = nuevoParrafo;\n    }\n\n    if (nuevoHTML) {\n        contenidoHTML.innerHTML = nuevoHTML;\n    }\n\n    // Limpiar campos\n    document.getElementById('nuevoTitulo').value = '';\n    document.getElementById('nuevoParrafo').value = '';\n    document.getElementById('nuevoHTML').value = '';\n}\n</code></pre>"},{"location":"content/p11/#modificacion-de-atributos","title":"Modificaci\u00f3n de Atributos","text":""},{"location":"content/p11/#metodos-para-atributos","title":"M\u00e9todos para Atributos","text":"<pre><code>&lt;img id=\"imagen\" src=\"imagen1.jpg\" alt=\"Imagen original\" class=\"peque\u00f1a\"&gt;\n&lt;a id=\"enlace\" href=\"#\" target=\"_self\"&gt;Enlace&lt;/a&gt;\n&lt;input id=\"campo\" type=\"text\" placeholder=\"Escribe aqu\u00ed\" disabled&gt;\n</code></pre> <pre><code>const imagen = document.getElementById('imagen');\nconst enlace = document.getElementById('enlace');\nconst campo = document.getElementById('campo');\n\n// getAttribute() - Obtener atributo\nconsole.log(imagen.getAttribute('src')); // \"imagen1.jpg\"\nconsole.log(enlace.getAttribute('href')); // \"#\"\n\n// setAttribute() - Establecer atributo\nimagen.setAttribute('src', 'nueva-imagen.jpg');\nimagen.setAttribute('alt', 'Nueva descripci\u00f3n');\nenlace.setAttribute('href', 'https://ejemplo.com');\nenlace.setAttribute('target', '_blank');\n\n// removeAttribute() - Remover atributo\ncampo.removeAttribute('disabled');\nimagen.removeAttribute('class');\n\n// hasAttribute() - Verificar si existe atributo\nif (enlace.hasAttribute('target')) {\n    console.log('El enlace tiene atributo target');\n}\n\n// Acceso directo a propiedades comunes\nimagen.src = 'otra-imagen.jpg';\nimagen.alt = 'Otra descripci\u00f3n';\nenlace.href = 'https://otro-sitio.com';\ncampo.placeholder = 'Nuevo placeholder';\n</code></pre>"},{"location":"content/p11/#atributos-booleanos","title":"Atributos Booleanos","text":"<pre><code>&lt;input id=\"checkbox\" type=\"checkbox\"&gt;\n&lt;button id=\"boton\"&gt;Bot\u00f3n&lt;/button&gt;\n&lt;input id=\"texto\" type=\"text\"&gt;\n</code></pre> <pre><code>const checkbox = document.getElementById('checkbox');\nconst boton = document.getElementById('boton');\nconst texto = document.getElementById('texto');\n\n// Atributos booleanos (checked, disabled, hidden, etc.)\ncheckbox.checked = true; // Marcar checkbox\nboton.disabled = true; // Deshabilitar bot\u00f3n\ntexto.hidden = true; // Ocultar elemento\n\n// Alternar atributos booleanos\nfunction alternarCheckbox() {\n    checkbox.checked = !checkbox.checked;\n}\n\nfunction alternarBoton() {\n    boton.disabled = !boton.disabled;\n    boton.textContent = boton.disabled ? 'Deshabilitado' : 'Habilitado';\n}\n</code></pre>"},{"location":"content/p11/#atributos-de-datos-data-","title":"Atributos de Datos (data-*)","text":"<pre><code>&lt;div id=\"producto\" \n     data-id=\"123\" \n     data-precio=\"29.99\" \n     data-categoria=\"electronica\"\n     data-disponible=\"true\"&gt;\n    Producto\n&lt;/div&gt;\n</code></pre> <pre><code>const producto = document.getElementById('producto');\n\n// Acceder a atributos data con dataset\nconsole.log(producto.dataset.id); // \"123\"\nconsole.log(producto.dataset.precio); // \"29.99\"\nconsole.log(producto.dataset.categoria); // \"electronica\"\nconsole.log(producto.dataset.disponible); // \"true\"\n\n// Modificar atributos data\nproducto.dataset.precio = '24.99';\nproducto.dataset.descuento = '15';\nproducto.dataset.disponible = 'false';\n\n// Eliminar atributo data\ndelete producto.dataset.categoria;\n\n// Iterar sobre todos los atributos data\nfor (let [clave, valor] of Object.entries(producto.dataset)) {\n    console.log(`${clave}: ${valor}`);\n}\n</code></pre>"},{"location":"content/p11/#modificacion-de-estilos-css","title":"Modificaci\u00f3n de Estilos CSS","text":""},{"location":"content/p11/#1-propiedad-style-estilos-inline","title":"1. Propiedad style - Estilos Inline","text":"<pre><code>&lt;div id=\"caja\"&gt;Caja para estilizar&lt;/div&gt;\n&lt;p id=\"texto\"&gt;Texto para modificar&lt;/p&gt;\n</code></pre> <pre><code>const caja = document.getElementById('caja');\nconst texto = document.getElementById('texto');\n\n// Modificar estilos individuales\ncaja.style.backgroundColor = 'lightblue';\ncaja.style.color = 'darkblue';\ncaja.style.padding = '20px';\ncaja.style.border = '2px solid blue';\ncaja.style.borderRadius = '10px';\n\n// Propiedades con guiones se convierten a camelCase\ncaja.style.fontSize = '18px';\ncaja.style.fontWeight = 'bold';\ncaja.style.textAlign = 'center';\n\n// Usar variables para valores\nconst colorPrimario = '#3498db';\nconst tama\u00f1o = '16px';\n\ntexto.style.color = colorPrimario;\ntexto.style.fontSize = tama\u00f1o;\n\n// Leer estilos actuales\nconsole.log(caja.style.backgroundColor); // \"lightblue\"\nconsole.log(caja.style.padding); // \"20px\"\n</code></pre>"},{"location":"content/p11/#2-csstext-multiples-estilos","title":"2. cssText - M\u00faltiples Estilos","text":"<pre><code>// Establecer m\u00faltiples estilos de una vez\ncaja.style.cssText = `\n    background-color: lightgreen;\n    color: darkgreen;\n    padding: 15px;\n    margin: 10px;\n    border: 1px solid green;\n    border-radius: 5px;\n    font-size: 16px;\n`;\n\n// Agregar estilos a los existentes\ncaja.style.cssText += 'box-shadow: 0 2px 4px rgba(0,0,0,0.1);';\n\n// Leer todos los estilos\nconsole.log(caja.style.cssText);\n</code></pre>"},{"location":"content/p11/#3-getcomputedstyle-estilos-calculados","title":"3. getComputedStyle() - Estilos Calculados","text":"<pre><code>/* CSS en el archivo de estilos */\n.mi-clase {\n    color: red;\n    font-size: 14px;\n    margin: 10px;\n}\n</code></pre> <pre><code>&lt;div id=\"elemento\" class=\"mi-clase\" style=\"color: blue;\"&gt;Elemento&lt;/div&gt;\n</code></pre> <pre><code>const elemento = document.getElementById('elemento');\n\n// getComputedStyle devuelve los estilos finales calculados\nconst estilosCalculados = getComputedStyle(elemento);\n\nconsole.log(estilosCalculados.color); // \"rgb(0, 0, 255)\" (azul del style inline)\nconsole.log(estilosCalculados.fontSize); // \"14px\" (del CSS)\nconsole.log(estilosCalculados.margin); // \"10px\" (del CSS)\nconsole.log(estilosCalculados.display); // \"block\" (valor por defecto)\n\n// Obtener propiedades espec\u00edficas\nconst colorActual = getComputedStyle(elemento).getPropertyValue('color');\nconst fuenteActual = getComputedStyle(elemento).getPropertyValue('font-size');\n\nconsole.log('Color actual:', colorActual);\nconsole.log('Fuente actual:', fuenteActual);\n</code></pre>"},{"location":"content/p11/#ejemplo-practico-cambiador-de-temas","title":"Ejemplo Pr\u00e1ctico: Cambiador de Temas","text":"<pre><code>&lt;div id=\"contenido\"&gt;\n    &lt;h1&gt;Mi Sitio Web&lt;/h1&gt;\n    &lt;p&gt;Este es el contenido principal&lt;/p&gt;\n    &lt;button id=\"tema-claro\"&gt;Tema Claro&lt;/button&gt;\n    &lt;button id=\"tema-oscuro\"&gt;Tema Oscuro&lt;/button&gt;\n    &lt;button id=\"tema-colorido\"&gt;Tema Colorido&lt;/button&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>function configurarCambiadorTemas() {\n    const contenido = document.getElementById('contenido');\n    const temaClaro = document.getElementById('tema-claro');\n    const temaOscuro = document.getElementById('tema-oscuro');\n    const temaColorido = document.getElementById('tema-colorido');\n\n    function aplicarTemaClaro() {\n        contenido.style.cssText = `\n            background-color: white;\n            color: black;\n            padding: 20px;\n            border-radius: 8px;\n            transition: all 0.3s ease;\n        `;\n    }\n\n    function aplicarTemaOscuro() {\n        contenido.style.cssText = `\n            background-color: #2c3e50;\n            color: white;\n            padding: 20px;\n            border-radius: 8px;\n            transition: all 0.3s ease;\n        `;\n    }\n\n    function aplicarTemaColorido() {\n        contenido.style.cssText = `\n            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);\n            color: white;\n            padding: 20px;\n            border-radius: 8px;\n            transition: all 0.3s ease;\n            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);\n        `;\n    }\n\n    temaClaro.addEventListener('click', aplicarTemaClaro);\n    temaOscuro.addEventListener('click', aplicarTemaOscuro);\n    temaColorido.addEventListener('click', aplicarTemaColorido);\n\n    // Aplicar tema claro por defecto\n    aplicarTemaClaro();\n}\n\nconfigurarCambiadorTemas();\n</code></pre>"},{"location":"content/p11/#modificacion-de-clases-css","title":"Modificaci\u00f3n de Clases CSS","text":""},{"location":"content/p11/#classlist-gestion-de-clases","title":"classList - Gesti\u00f3n de Clases","text":"<pre><code>&lt;div id=\"elemento\" class=\"inicial activa\"&gt;Elemento con clases&lt;/div&gt;\n</code></pre> <pre><code>.inicial { background-color: lightgray; }\n.activa { border: 2px solid blue; }\n.destacada { background-color: yellow; }\n.grande { font-size: 24px; }\n.oculta { display: none; }\n</code></pre> <pre><code>const elemento = document.getElementById('elemento');\n\n// Leer clases actuales\nconsole.log(elemento.className); // \"inicial activa\"\nconsole.log(elemento.classList); // DOMTokenList [\"inicial\", \"activa\"]\n\n// add() - Agregar clase\nelemento.classList.add('destacada');\nelemento.classList.add('grande', 'nueva'); // M\u00faltiples clases\n\n// remove() - Remover clase\nelemento.classList.remove('inicial');\nelemento.classList.remove('activa', 'nueva'); // M\u00faltiples clases\n\n// toggle() - Alternar clase\nelemento.classList.toggle('oculta'); // Agrega si no existe, remueve si existe\nelemento.classList.toggle('destacada'); // Alterna\n\n// contains() - Verificar si tiene clase\nif (elemento.classList.contains('grande')) {\n    console.log('El elemento tiene la clase grande');\n}\n\n// replace() - Reemplazar clase\nelemento.classList.replace('destacada', 'importante');\n\n// Iterar sobre las clases\nelemento.classList.forEach(clase =&gt; {\n    console.log('Clase:', clase);\n});\n</code></pre>"},{"location":"content/p11/#ejemplo-practico-sistema-de-estados","title":"Ejemplo Pr\u00e1ctico: Sistema de Estados","text":"<pre><code>&lt;div id=\"tarjeta\" class=\"tarjeta\"&gt;\n    &lt;h3&gt;Producto&lt;/h3&gt;\n    &lt;p&gt;Descripci\u00f3n del producto&lt;/p&gt;\n    &lt;div class=\"controles\"&gt;\n        &lt;button onclick=\"cambiarEstado('normal')\"&gt;Normal&lt;/button&gt;\n        &lt;button onclick=\"cambiarEstado('destacado')\"&gt;Destacado&lt;/button&gt;\n        &lt;button onclick=\"cambiarEstado('agotado')\"&gt;Agotado&lt;/button&gt;\n        &lt;button onclick=\"cambiarEstado('oferta')\"&gt;En Oferta&lt;/button&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.tarjeta {\n    padding: 20px;\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    transition: all 0.3s ease;\n}\n\n.tarjeta.destacado {\n    background-color: #fff3cd;\n    border-color: #ffc107;\n    transform: scale(1.05);\n}\n\n.tarjeta.agotado {\n    background-color: #f8d7da;\n    border-color: #dc3545;\n    opacity: 0.7;\n}\n\n.tarjeta.oferta {\n    background-color: #d1ecf1;\n    border-color: #17a2b8;\n    box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n</code></pre> <pre><code>function cambiarEstado(nuevoEstado) {\n    const tarjeta = document.getElementById('tarjeta');\n\n    // Remover todos los estados anteriores\n    tarjeta.classList.remove('destacado', 'agotado', 'oferta');\n\n    // Agregar nuevo estado si no es 'normal'\n    if (nuevoEstado !== 'normal') {\n        tarjeta.classList.add(nuevoEstado);\n    }\n\n    console.log(`Estado cambiado a: ${nuevoEstado}`);\n    console.log('Clases actuales:', [...tarjeta.classList]);\n}\n</code></pre>"},{"location":"content/p11/#creacion-y-eliminacion-de-elementos","title":"Creaci\u00f3n y Eliminaci\u00f3n de Elementos","text":""},{"location":"content/p11/#crear-elementos","title":"Crear Elementos","text":"<pre><code>// createElement() - Crear elemento\nconst nuevoDiv = document.createElement('div');\nconst nuevoParrafo = document.createElement('p');\nconst nuevoBoton = document.createElement('button');\n\n// Configurar el elemento creado\nnuevoDiv.id = 'contenedor-nuevo';\nnuevoDiv.className = 'contenedor destacado';\nnuevoDiv.textContent = 'Contenedor creado din\u00e1micamente';\n\nnuevoParrafo.textContent = 'Este p\u00e1rrafo fue creado con JavaScript';\nnuevoParrafo.style.color = 'blue';\n\nnuevoBoton.textContent = 'Bot\u00f3n Din\u00e1mico';\nnuevoBoton.onclick = function() {\n    alert('\u00a1Bot\u00f3n din\u00e1mico clickeado!');\n};\n\n// appendChild() - Agregar al final\ndocument.body.appendChild(nuevoDiv);\nnuevoDiv.appendChild(nuevoParrafo);\nnuevoDiv.appendChild(nuevoBoton);\n</code></pre>"},{"location":"content/p11/#insertar-elementos-en-posiciones-especificas","title":"Insertar Elementos en Posiciones Espec\u00edficas","text":"<pre><code>&lt;ul id=\"lista\"&gt;\n    &lt;li&gt;Item 1&lt;/li&gt;\n    &lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <pre><code>const lista = document.getElementById('lista');\n\n// Crear nuevo elemento\nconst nuevoItem = document.createElement('li');\nnuevoItem.textContent = 'Item 2';\n\n// insertBefore() - Insertar antes de un elemento espec\u00edfico\nconst tercerItem = lista.children[1]; // \"Item 3\"\nlista.insertBefore(nuevoItem, tercerItem);\n\n// insertAdjacentElement() - Insertar en posici\u00f3n relativa\nconst otroItem = document.createElement('li');\notroItem.textContent = 'Item al inicio';\nlista.insertAdjacentElement('afterbegin', otroItem);\n\nconst itemFinal = document.createElement('li');\nitemFinal.textContent = 'Item al final';\nlista.insertAdjacentElement('beforeend', itemFinal);\n\n// insertAdjacentHTML() - Insertar HTML\nlista.insertAdjacentHTML('afterbegin', '&lt;li&gt;HTML insertado&lt;/li&gt;');\n</code></pre>"},{"location":"content/p11/#eliminar-elementos","title":"Eliminar Elementos","text":"<pre><code>&lt;div id=\"contenedor\"&gt;\n    &lt;p id=\"parrafo1\"&gt;P\u00e1rrafo 1&lt;/p&gt;\n    &lt;p id=\"parrafo2\"&gt;P\u00e1rrafo 2&lt;/p&gt;\n    &lt;p id=\"parrafo3\"&gt;P\u00e1rrafo 3&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>const contenedor = document.getElementById('contenedor');\nconst parrafo2 = document.getElementById('parrafo2');\n\n// remove() - Eliminar el elemento (m\u00e9todo moderno)\nparrafo2.remove();\n\n// removeChild() - Eliminar hijo espec\u00edfico (m\u00e9todo cl\u00e1sico)\nconst parrafo1 = document.getElementById('parrafo1');\ncontenedor.removeChild(parrafo1);\n\n// Eliminar todos los hijos\nwhile (contenedor.firstChild) {\n    contenedor.removeChild(contenedor.firstChild);\n}\n\n// O m\u00e1s simple con innerHTML\n// contenedor.innerHTML = '';\n</code></pre>"},{"location":"content/p11/#ejemplo-practico-lista-de-tareas-dinamica","title":"Ejemplo Pr\u00e1ctico: Lista de Tareas Din\u00e1mica","text":"<pre><code>&lt;div id=\"app-tareas\"&gt;\n    &lt;h2&gt;Lista de Tareas&lt;/h2&gt;\n    &lt;div class=\"agregar-tarea\"&gt;\n        &lt;input type=\"text\" id=\"nueva-tarea\" placeholder=\"Nueva tarea...\"&gt;\n        &lt;button onclick=\"agregarTarea()\"&gt;Agregar&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;ul id=\"lista-tareas\"&gt;&lt;/ul&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>let contadorTareas = 0;\n\nfunction agregarTarea() {\n    const input = document.getElementById('nueva-tarea');\n    const lista = document.getElementById('lista-tareas');\n    const textoTarea = input.value.trim();\n\n    if (!textoTarea) {\n        alert('Por favor, escribe una tarea');\n        return;\n    }\n\n    // Crear elementos\n    const li = document.createElement('li');\n    const span = document.createElement('span');\n    const botonCompletar = document.createElement('button');\n    const botonEliminar = document.createElement('button');\n\n    // Configurar elementos\n    contadorTareas++;\n    li.id = `tarea-${contadorTareas}`;\n    li.className = 'tarea';\n\n    span.textContent = textoTarea;\n    span.className = 'texto-tarea';\n\n    botonCompletar.textContent = '\u2713';\n    botonCompletar.className = 'btn-completar';\n    botonCompletar.onclick = function() {\n        completarTarea(li);\n    };\n\n    botonEliminar.textContent = '\u2717';\n    botonEliminar.className = 'btn-eliminar';\n    botonEliminar.onclick = function() {\n        eliminarTarea(li);\n    };\n\n    // Ensamblar y agregar\n    li.appendChild(span);\n    li.appendChild(botonCompletar);\n    li.appendChild(botonEliminar);\n    lista.appendChild(li);\n\n    // Limpiar input\n    input.value = '';\n    input.focus();\n}\n\nfunction completarTarea(elementoTarea) {\n    elementoTarea.classList.toggle('completada');\n    const span = elementoTarea.querySelector('.texto-tarea');\n\n    if (elementoTarea.classList.contains('completada')) {\n        span.style.textDecoration = 'line-through';\n        span.style.opacity = '0.6';\n    } else {\n        span.style.textDecoration = 'none';\n        span.style.opacity = '1';\n    }\n}\n\nfunction eliminarTarea(elementoTarea) {\n    if (confirm('\u00bfEst\u00e1s seguro de eliminar esta tarea?')) {\n        elementoTarea.remove();\n    }\n}\n\n// Permitir agregar tarea con Enter\ndocument.getElementById('nueva-tarea').addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n        agregarTarea();\n    }\n});\n</code></pre>"},{"location":"content/p11/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":""},{"location":"content/p11/#ejercicio-1-editor-de-perfil","title":"Ejercicio 1: Editor de Perfil","text":"<pre><code>&lt;div id=\"perfil\"&gt;\n    &lt;img id=\"avatar\" src=\"avatar-default.jpg\" alt=\"Avatar\"&gt;\n    &lt;h2 id=\"nombre\"&gt;Nombre Usuario&lt;/h2&gt;\n    &lt;p id=\"bio\"&gt;Biograf\u00eda del usuario&lt;/p&gt;\n    &lt;div class=\"controles\"&gt;\n        &lt;input type=\"text\" id=\"nuevo-nombre\" placeholder=\"Nuevo nombre\"&gt;\n        &lt;textarea id=\"nueva-bio\" placeholder=\"Nueva biograf\u00eda\"&gt;&lt;/textarea&gt;\n        &lt;input type=\"url\" id=\"nuevo-avatar\" placeholder=\"URL del avatar\"&gt;\n        &lt;button onclick=\"actualizarPerfil()\"&gt;Actualizar&lt;/button&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>function actualizarPerfil() {\n    const nombre = document.getElementById('nombre');\n    const bio = document.getElementById('bio');\n    const avatar = document.getElementById('avatar');\n\n    const nuevoNombre = document.getElementById('nuevo-nombre').value;\n    const nuevaBio = document.getElementById('nueva-bio').value;\n    const nuevoAvatar = document.getElementById('nuevo-avatar').value;\n\n    if (nuevoNombre) {\n        nombre.textContent = nuevoNombre;\n        document.getElementById('nuevo-nombre').value = '';\n    }\n\n    if (nuevaBio) {\n        bio.textContent = nuevaBio;\n        document.getElementById('nueva-bio').value = '';\n    }\n\n    if (nuevoAvatar) {\n        avatar.src = nuevoAvatar;\n        document.getElementById('nuevo-avatar').value = '';\n    }\n}\n</code></pre>"},{"location":"content/p11/#ejercicio-2-generador-de-tarjetas","title":"Ejercicio 2: Generador de Tarjetas","text":"<pre><code>function crearTarjeta(titulo, descripcion, imagen, enlace) {\n    // Crear elementos\n    const tarjeta = document.createElement('div');\n    const img = document.createElement('img');\n    const contenido = document.createElement('div');\n    const h3 = document.createElement('h3');\n    const p = document.createElement('p');\n    const a = document.createElement('a');\n\n    // Configurar elementos\n    tarjeta.className = 'tarjeta';\n    img.src = imagen;\n    img.alt = titulo;\n    contenido.className = 'contenido-tarjeta';\n    h3.textContent = titulo;\n    p.textContent = descripcion;\n    a.href = enlace;\n    a.textContent = 'Leer m\u00e1s';\n    a.target = '_blank';\n\n    // Ensamblar\n    contenido.appendChild(h3);\n    contenido.appendChild(p);\n    contenido.appendChild(a);\n    tarjeta.appendChild(img);\n    tarjeta.appendChild(contenido);\n\n    return tarjeta;\n}\n\n// Usar el generador\nconst contenedor = document.getElementById('contenedor-tarjetas');\nconst tarjeta1 = crearTarjeta(\n    'JavaScript B\u00e1sico',\n    'Aprende los fundamentos de JavaScript',\n    'js-logo.jpg',\n    'https://ejemplo.com/js'\n);\ncontenedor.appendChild(tarjeta1);\n</code></pre>"},{"location":"content/p11/#ejercicio-3-calculadora-de-estilos","title":"Ejercicio 3: Calculadora de Estilos","text":"<pre><code>function aplicarEstilosPersonalizados() {\n    const elemento = document.getElementById('elemento-prueba');\n\n    // Obtener valores de los controles\n    const color = document.getElementById('color').value;\n    const fondo = document.getElementById('fondo').value;\n    const tama\u00f1o = document.getElementById('tama\u00f1o').value;\n    const padding = document.getElementById('padding').value;\n    const borde = document.getElementById('borde').value;\n\n    // Aplicar estilos\n    elemento.style.color = color;\n    elemento.style.backgroundColor = fondo;\n    elemento.style.fontSize = tama\u00f1o + 'px';\n    elemento.style.padding = padding + 'px';\n    elemento.style.border = borde + 'px solid black';\n    elemento.style.borderRadius = '5px';\n    elemento.style.transition = 'all 0.3s ease';\n\n    // Mostrar CSS generado\n    const cssGenerado = `\n        color: ${color};\n        background-color: ${fondo};\n        font-size: ${tama\u00f1o}px;\n        padding: ${padding}px;\n        border: ${borde}px solid black;\n        border-radius: 5px;\n        transition: all 0.3s ease;\n    `;\n\n    document.getElementById('css-output').textContent = cssGenerado;\n}\n</code></pre>"},{"location":"content/p11/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":""},{"location":"content/p11/#1-seguridad-con-innerhtml","title":"1. Seguridad con innerHTML","text":"<pre><code>// \u274c Peligroso: puede ejecutar scripts maliciosos\nconst userInput = '&lt;script&gt;alert(\"XSS Attack!\")&lt;/script&gt;';\nelement.innerHTML = userInput;\n\n// \u2705 Seguro: usar textContent para texto plano\nelement.textContent = userInput;\n\n// \u2705 Seguro: sanitizar HTML si es necesario\nfunction sanitizeHTML(str) {\n    const temp = document.createElement('div');\n    temp.textContent = str;\n    return temp.innerHTML;\n}\n</code></pre>"},{"location":"content/p11/#2-rendimiento-con-modificaciones-masivas","title":"2. Rendimiento con Modificaciones Masivas","text":"<pre><code>// \u274c Ineficiente: m\u00faltiples reflows\nfor (let i = 0; i &lt; 1000; i++) {\n    const div = document.createElement('div');\n    div.textContent = `Item ${i}`;\n    document.body.appendChild(div);\n}\n\n// \u2705 Eficiente: usar DocumentFragment\nconst fragment = document.createDocumentFragment();\nfor (let i = 0; i &lt; 1000; i++) {\n    const div = document.createElement('div');\n    div.textContent = `Item ${i}`;\n    fragment.appendChild(div);\n}\ndocument.body.appendChild(fragment);\n\n// \u2705 Alternativa: construir HTML y usar innerHTML una vez\nlet html = '';\nfor (let i = 0; i &lt; 1000; i++) {\n    html += `&lt;div&gt;Item ${i}&lt;/div&gt;`;\n}\ndocument.getElementById('contenedor').innerHTML = html;\n</code></pre>"},{"location":"content/p11/#3-verificacion-de-elementos","title":"3. Verificaci\u00f3n de Elementos","text":"<pre><code>// \u2705 Siempre verificar que el elemento existe\nfunction modificarElemento(id, nuevoTexto) {\n    const elemento = document.getElementById(id);\n    if (elemento) {\n        elemento.textContent = nuevoTexto;\n    } else {\n        console.warn(`Elemento con ID '${id}' no encontrado`);\n    }\n}\n</code></pre>"},{"location":"content/p11/#resumen","title":"Resumen","text":"<p>En esta semana hemos aprendido a modificar elementos del DOM:</p> <ol> <li>Contenido: <code>textContent</code>, <code>innerHTML</code>, <code>outerHTML</code></li> <li>Atributos: <code>getAttribute()</code>, <code>setAttribute()</code>, <code>removeAttribute()</code>, <code>dataset</code></li> <li>Estilos: <code>style</code>, <code>cssText</code>, <code>getComputedStyle()</code></li> <li>Clases: <code>classList</code> con <code>add()</code>, <code>remove()</code>, <code>toggle()</code>, <code>contains()</code></li> <li>Estructura: <code>createElement()</code>, <code>appendChild()</code>, <code>remove()</code>, <code>insertBefore()</code></li> <li>Mejores pr\u00e1cticas: Seguridad, rendimiento y verificaci\u00f3n</li> </ol> <p>Con estos conocimientos puedes crear p\u00e1ginas web completamente din\u00e1micas e interactivas. La manipulaci\u00f3n del DOM es una de las habilidades m\u00e1s importantes en el desarrollo web frontend.</p> <p>Consejo</p> <p>Practica creando peque\u00f1os proyectos como listas de tareas, calculadoras o galer\u00edas de im\u00e1genes. \u00a1La pr\u00e1ctica hace al maestro!</p>"},{"location":"content/p11/#ejercicios-para-resolver","title":"Ejercicios para Resolver","text":"<p>A continuaci\u00f3n encontrar\u00e1s 5 ejercicios pr\u00e1cticos que combinan la modificaci\u00f3n del DOM con c\u00e1lculos b\u00e1sicos. Cada ejercicio utiliza inputs para recibir datos del usuario y buttons para ejecutar las operaciones.</p>"},{"location":"content/p11/#ejercicio-1-calculadora-basica","title":"Ejercicio 1: Calculadora B\u00e1sica","text":"<p>Crea una calculadora que realice las cuatro operaciones b\u00e1sicas (suma, resta, multiplicaci\u00f3n y divisi\u00f3n).</p> <p>Requisitos: - Dos campos de entrada para los n\u00fameros - Cuatro botones para las operaciones - Un \u00e1rea para mostrar el resultado - Validaci\u00f3n de entrada (n\u00fameros v\u00e1lidos) - Manejo de divisi\u00f3n por cero</p> <pre><code>&lt;div id=\"calculadora-basica\"&gt;\n    &lt;h3&gt;\ud83e\uddee Calculadora B\u00e1sica&lt;/h3&gt;\n    &lt;div class=\"inputs\"&gt;\n        &lt;input type=\"number\" id=\"num1\" placeholder=\"Primer n\u00famero\" step=\"any\"&gt;\n        &lt;input type=\"number\" id=\"num2\" placeholder=\"Segundo n\u00famero\" step=\"any\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"botones\"&gt;\n        &lt;button onclick=\"calcular('suma')\"&gt;\u2795 Sumar&lt;/button&gt;\n        &lt;button onclick=\"calcular('resta')\"&gt;\u2796 Restar&lt;/button&gt;\n        &lt;button onclick=\"calcular('multiplicacion')\"&gt;\u2716\ufe0f Multiplicar&lt;/button&gt;\n        &lt;button onclick=\"calcular('division')\"&gt;\u2797 Dividir&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;div id=\"resultado-calc\" class=\"resultado\"&gt;&lt;/div&gt;\n    &lt;button onclick=\"limpiarCalculadora()\"&gt;\ud83d\uddd1\ufe0f Limpiar&lt;/button&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>function calcular(operacion) {\n    const num1 = parseFloat(document.getElementById('num1').value);\n    const num2 = parseFloat(document.getElementById('num2').value);\n    const resultado = document.getElementById('resultado-calc');\n\n    // Validar que los n\u00fameros sean v\u00e1lidos\n    if (isNaN(num1) || isNaN(num2)) {\n        resultado.innerHTML = '&lt;span style=\"color: red;\"&gt;\u274c Por favor, ingresa n\u00fameros v\u00e1lidos&lt;/span&gt;';\n        return;\n    }\n\n    let operacionTexto = '';\n    let resultadoCalculo = 0;\n\n    switch(operacion) {\n        case 'suma':\n            resultadoCalculo = num1 + num2;\n            operacionTexto = `${num1} + ${num2}`;\n            break;\n        case 'resta':\n            resultadoCalculo = num1 - num2;\n            operacionTexto = `${num1} - ${num2}`;\n            break;\n        case 'multiplicacion':\n            resultadoCalculo = num1 * num2;\n            operacionTexto = `${num1} \u00d7 ${num2}`;\n            break;\n        case 'division':\n            if (num2 === 0) {\n                resultado.innerHTML = '&lt;span style=\"color: red;\"&gt;\u274c No se puede dividir por cero&lt;/span&gt;';\n                return;\n            }\n            resultadoCalculo = num1 / num2;\n            operacionTexto = `${num1} \u00f7 ${num2}`;\n            break;\n    }\n\n    resultado.innerHTML = `\n        &lt;div style=\"color: green;\"&gt;\n            &lt;strong&gt;\u2705 ${operacionTexto} = ${resultadoCalculo.toFixed(2)}&lt;/strong&gt;\n        &lt;/div&gt;\n    `;\n}\n\nfunction limpiarCalculadora() {\n    document.getElementById('num1').value = '';\n    document.getElementById('num2').value = '';\n    document.getElementById('resultado-calc').innerHTML = '';\n}\n</code></pre>"},{"location":"content/p11/#ejercicio-2-calculadora-de-area-y-perimetro","title":"Ejercicio 2: Calculadora de \u00c1rea y Per\u00edmetro","text":"<p>Desarrolla una calculadora que calcule el \u00e1rea y per\u00edmetro de diferentes figuras geom\u00e9tricas.</p> <p>Requisitos: - Selector para elegir la figura (cuadrado, rect\u00e1ngulo, c\u00edrculo, tri\u00e1ngulo) - Campos de entrada din\u00e1micos seg\u00fan la figura seleccionada - Botones para calcular \u00e1rea y per\u00edmetro - Mostrar f\u00f3rmulas utilizadas - Resultados con unidades</p> <pre><code>&lt;div id=\"calculadora-geometria\"&gt;\n    &lt;h3&gt;\ud83d\udcd0 Calculadora de Geometr\u00eda&lt;/h3&gt;\n    &lt;div class=\"selector-figura\"&gt;\n        &lt;label for=\"figura\"&gt;Selecciona una figura:&lt;/label&gt;\n        &lt;select id=\"figura\" onchange=\"cambiarFigura()\"&gt;\n            &lt;option value=\"\"&gt;-- Selecciona --&lt;/option&gt;\n            &lt;option value=\"cuadrado\"&gt;\ud83d\udfe6 Cuadrado&lt;/option&gt;\n            &lt;option value=\"rectangulo\"&gt;\ud83d\udfe8 Rect\u00e1ngulo&lt;/option&gt;\n            &lt;option value=\"circulo\"&gt;\ud83d\udfe1 C\u00edrculo&lt;/option&gt;\n            &lt;option value=\"triangulo\"&gt;\ud83d\udd3a Tri\u00e1ngulo&lt;/option&gt;\n        &lt;/select&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"inputs-figura\" class=\"inputs-dinamicos\"&gt;&lt;/div&gt;\n\n    &lt;div class=\"botones\" id=\"botones-geometria\" style=\"display: none;\"&gt;\n        &lt;button onclick=\"calcularArea()\"&gt;\ud83d\udccf Calcular \u00c1rea&lt;/button&gt;\n        &lt;button onclick=\"calcularPerimetro()\"&gt;\ud83d\udcd0 Calcular Per\u00edmetro&lt;/button&gt;\n        &lt;button onclick=\"calcularAmbos()\"&gt;\ud83d\udd22 Calcular Ambos&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"resultado-geometria\" class=\"resultado\"&gt;&lt;/div&gt;\n    &lt;div id=\"formulas\" class=\"formulas\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>function cambiarFigura() {\n    const figura = document.getElementById('figura').value;\n    const inputsContainer = document.getElementById('inputs-figura');\n    const botones = document.getElementById('botones-geometria');\n    const resultado = document.getElementById('resultado-geometria');\n    const formulas = document.getElementById('formulas');\n\n    // Limpiar contenido anterior\n    inputsContainer.innerHTML = '';\n    resultado.innerHTML = '';\n    formulas.innerHTML = '';\n\n    if (!figura) {\n        botones.style.display = 'none';\n        return;\n    }\n\n    botones.style.display = 'block';\n\n    switch(figura) {\n        case 'cuadrado':\n            inputsContainer.innerHTML = `\n                &lt;input type=\"number\" id=\"lado\" placeholder=\"Lado (cm)\" step=\"any\" min=\"0\"&gt;\n            `;\n            formulas.innerHTML = `\n                &lt;small&gt;&lt;strong&gt;F\u00f3rmulas:&lt;/strong&gt; \u00c1rea = lado\u00b2, Per\u00edmetro = 4 \u00d7 lado&lt;/small&gt;\n            `;\n            break;\n        case 'rectangulo':\n            inputsContainer.innerHTML = `\n                &lt;input type=\"number\" id=\"largo\" placeholder=\"Largo (cm)\" step=\"any\" min=\"0\"&gt;\n                &lt;input type=\"number\" id=\"ancho\" placeholder=\"Ancho (cm)\" step=\"any\" min=\"0\"&gt;\n            `;\n            formulas.innerHTML = `\n                &lt;small&gt;&lt;strong&gt;F\u00f3rmulas:&lt;/strong&gt; \u00c1rea = largo \u00d7 ancho, Per\u00edmetro = 2 \u00d7 (largo + ancho)&lt;/small&gt;\n            `;\n            break;\n        case 'circulo':\n            inputsContainer.innerHTML = `\n                &lt;input type=\"number\" id=\"radio\" placeholder=\"Radio (cm)\" step=\"any\" min=\"0\"&gt;\n            `;\n            formulas.innerHTML = `\n                &lt;small&gt;&lt;strong&gt;F\u00f3rmulas:&lt;/strong&gt; \u00c1rea = \u03c0 \u00d7 radio\u00b2, Per\u00edmetro = 2 \u00d7 \u03c0 \u00d7 radio&lt;/small&gt;\n            `;\n            break;\n        case 'triangulo':\n            inputsContainer.innerHTML = `\n                &lt;input type=\"number\" id=\"base\" placeholder=\"Base (cm)\" step=\"any\" min=\"0\"&gt;\n                &lt;input type=\"number\" id=\"altura\" placeholder=\"Altura (cm)\" step=\"any\" min=\"0\"&gt;\n                &lt;input type=\"number\" id=\"lado1\" placeholder=\"Lado 1 (cm)\" step=\"any\" min=\"0\"&gt;\n                &lt;input type=\"number\" id=\"lado2\" placeholder=\"Lado 2 (cm)\" step=\"any\" min=\"0\"&gt;\n                &lt;input type=\"number\" id=\"lado3\" placeholder=\"Lado 3 (cm)\" step=\"any\" min=\"0\"&gt;\n            `;\n            formulas.innerHTML = `\n                &lt;small&gt;&lt;strong&gt;F\u00f3rmulas:&lt;/strong&gt; \u00c1rea = (base \u00d7 altura) \u00f7 2, Per\u00edmetro = lado1 + lado2 + lado3&lt;/small&gt;\n            `;\n            break;\n    }\n}\n\nfunction calcularArea() {\n    const figura = document.getElementById('figura').value;\n    const resultado = document.getElementById('resultado-geometria');\n    let area = 0;\n    let valido = true;\n\n    switch(figura) {\n        case 'cuadrado':\n            const lado = parseFloat(document.getElementById('lado').value);\n            if (isNaN(lado) || lado &lt;= 0) {\n                valido = false;\n            } else {\n                area = lado * lado;\n            }\n            break;\n        case 'rectangulo':\n            const largo = parseFloat(document.getElementById('largo').value);\n            const ancho = parseFloat(document.getElementById('ancho').value);\n            if (isNaN(largo) || isNaN(ancho) || largo &lt;= 0 || ancho &lt;= 0) {\n                valido = false;\n            } else {\n                area = largo * ancho;\n            }\n            break;\n        case 'circulo':\n            const radio = parseFloat(document.getElementById('radio').value);\n            if (isNaN(radio) || radio &lt;= 0) {\n                valido = false;\n            } else {\n                area = Math.PI * radio * radio;\n            }\n            break;\n        case 'triangulo':\n            const base = parseFloat(document.getElementById('base').value);\n            const altura = parseFloat(document.getElementById('altura').value);\n            if (isNaN(base) || isNaN(altura) || base &lt;= 0 || altura &lt;= 0) {\n                valido = false;\n            } else {\n                area = (base * altura) / 2;\n            }\n            break;\n    }\n\n    if (!valido) {\n        resultado.innerHTML = '&lt;span style=\"color: red;\"&gt;\u274c Por favor, ingresa valores v\u00e1lidos y positivos&lt;/span&gt;';\n    } else {\n        resultado.innerHTML = `&lt;div style=\"color: blue;\"&gt;&lt;strong&gt;\ud83d\udccf \u00c1rea: ${area.toFixed(2)} cm\u00b2&lt;/strong&gt;&lt;/div&gt;`;\n    }\n}\n\nfunction calcularPerimetro() {\n    const figura = document.getElementById('figura').value;\n    const resultado = document.getElementById('resultado-geometria');\n    let perimetro = 0;\n    let valido = true;\n\n    switch(figura) {\n        case 'cuadrado':\n            const lado = parseFloat(document.getElementById('lado').value);\n            if (isNaN(lado) || lado &lt;= 0) {\n                valido = false;\n            } else {\n                perimetro = 4 * lado;\n            }\n            break;\n        case 'rectangulo':\n            const largo = parseFloat(document.getElementById('largo').value);\n            const ancho = parseFloat(document.getElementById('ancho').value);\n            if (isNaN(largo) || isNaN(ancho) || largo &lt;= 0 || ancho &lt;= 0) {\n                valido = false;\n            } else {\n                perimetro = 2 * (largo + ancho);\n            }\n            break;\n        case 'circulo':\n            const radio = parseFloat(document.getElementById('radio').value);\n            if (isNaN(radio) || radio &lt;= 0) {\n                valido = false;\n            } else {\n                perimetro = 2 * Math.PI * radio;\n            }\n            break;\n        case 'triangulo':\n            const lado1 = parseFloat(document.getElementById('lado1').value);\n            const lado2 = parseFloat(document.getElementById('lado2').value);\n            const lado3 = parseFloat(document.getElementById('lado3').value);\n            if (isNaN(lado1) || isNaN(lado2) || isNaN(lado3) || lado1 &lt;= 0 || lado2 &lt;= 0 || lado3 &lt;= 0) {\n                valido = false;\n            } else {\n                perimetro = lado1 + lado2 + lado3;\n            }\n            break;\n    }\n\n    if (!valido) {\n        resultado.innerHTML = '&lt;span style=\"color: red;\"&gt;\u274c Por favor, ingresa valores v\u00e1lidos y positivos&lt;/span&gt;';\n    } else {\n        resultado.innerHTML = `&lt;div style=\"color: green;\"&gt;&lt;strong&gt;\ud83d\udcd0 Per\u00edmetro: ${perimetro.toFixed(2)} cm&lt;/strong&gt;&lt;/div&gt;`;\n    }\n}\n\nfunction calcularAmbos() {\n    calcularArea();\n    setTimeout(() =&gt; {\n        const resultadoActual = document.getElementById('resultado-geometria').innerHTML;\n        calcularPerimetro();\n        const resultadoPerimetro = document.getElementById('resultado-geometria').innerHTML;\n        document.getElementById('resultado-geometria').innerHTML = resultadoActual + '&lt;br&gt;' + resultadoPerimetro;\n    }, 100);\n}\n</code></pre>"},{"location":"content/p11/#ejercicio-3-conversor-de-unidades","title":"Ejercicio 3: Conversor de Unidades","text":"<p>Crea un conversor que transforme entre diferentes unidades de medida.</p> <p>Requisitos: - Selector de tipo de conversi\u00f3n (temperatura, peso, longitud) - Campos para unidad origen y destino - Conversi\u00f3n bidireccional - Historial de conversiones - Validaci\u00f3n de datos</p> <pre><code>&lt;div id=\"conversor-unidades\"&gt;\n    &lt;h3&gt;\ud83d\udd04 Conversor de Unidades&lt;/h3&gt;\n    &lt;div class=\"selector-tipo\"&gt;\n        &lt;label for=\"tipo-conversion\"&gt;Tipo de conversi\u00f3n:&lt;/label&gt;\n        &lt;select id=\"tipo-conversion\" onchange=\"cambiarTipoConversion()\"&gt;\n            &lt;option value=\"\"&gt;-- Selecciona --&lt;/option&gt;\n            &lt;option value=\"temperatura\"&gt;\ud83c\udf21\ufe0f Temperatura&lt;/option&gt;\n            &lt;option value=\"peso\"&gt;\u2696\ufe0f Peso&lt;/option&gt;\n            &lt;option value=\"longitud\"&gt;\ud83d\udccf Longitud&lt;/option&gt;\n        &lt;/select&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"conversion-container\" style=\"display: none;\"&gt;\n        &lt;div class=\"conversion-inputs\"&gt;\n            &lt;div class=\"input-group\"&gt;\n                &lt;input type=\"number\" id=\"valor-origen\" placeholder=\"Valor a convertir\" step=\"any\"&gt;\n                &lt;select id=\"unidad-origen\"&gt;&lt;/select&gt;\n            &lt;/div&gt;\n            &lt;div class=\"conversion-arrow\"&gt;\u27a1\ufe0f&lt;/div&gt;\n            &lt;div class=\"input-group\"&gt;\n                &lt;input type=\"number\" id=\"valor-destino\" placeholder=\"Resultado\" readonly&gt;\n                &lt;select id=\"unidad-destino\"&gt;&lt;/select&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"botones\"&gt;\n            &lt;button onclick=\"convertir()\"&gt;\ud83d\udd04 Convertir&lt;/button&gt;\n            &lt;button onclick=\"intercambiarUnidades()\"&gt;\ud83d\udd00 Intercambiar&lt;/button&gt;\n            &lt;button onclick=\"limpiarConversor()\"&gt;\ud83d\uddd1\ufe0f Limpiar&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"resultado-conversion\" class=\"resultado\"&gt;&lt;/div&gt;\n    &lt;div id=\"historial-conversiones\" class=\"historial\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>const unidades = {\n    temperatura: {\n        'celsius': '\u00b0C',\n        'fahrenheit': '\u00b0F',\n        'kelvin': 'K'\n    },\n    peso: {\n        'gramos': 'g',\n        'kilogramos': 'kg',\n        'libras': 'lb',\n        'onzas': 'oz'\n    },\n    longitud: {\n        'metros': 'm',\n        'centimetros': 'cm',\n        'kilometros': 'km',\n        'pies': 'ft',\n        'pulgadas': 'in'\n    }\n};\n\nlet historialConversiones = [];\n\nfunction cambiarTipoConversion() {\n    const tipo = document.getElementById('tipo-conversion').value;\n    const container = document.getElementById('conversion-container');\n    const unidadOrigen = document.getElementById('unidad-origen');\n    const unidadDestino = document.getElementById('unidad-destino');\n\n    if (!tipo) {\n        container.style.display = 'none';\n        return;\n    }\n\n    container.style.display = 'block';\n\n    // Limpiar y llenar selectores de unidades\n    unidadOrigen.innerHTML = '';\n    unidadDestino.innerHTML = '';\n\n    for (let unidad in unidades[tipo]) {\n        const option1 = new Option(`${unidad} (${unidades[tipo][unidad]})`, unidad);\n        const option2 = new Option(`${unidad} (${unidades[tipo][unidad]})`, unidad);\n        unidadOrigen.add(option1);\n        unidadDestino.add(option2);\n    }\n\n    // Seleccionar diferentes unidades por defecto\n    if (unidadDestino.options.length &gt; 1) {\n        unidadDestino.selectedIndex = 1;\n    }\n\n    limpiarConversor();\n}\n\nfunction convertir() {\n    const tipo = document.getElementById('tipo-conversion').value;\n    const valor = parseFloat(document.getElementById('valor-origen').value);\n    const unidadOrigen = document.getElementById('unidad-origen').value;\n    const unidadDestino = document.getElementById('unidad-destino').value;\n    const resultado = document.getElementById('resultado-conversion');\n\n    if (isNaN(valor)) {\n        resultado.innerHTML = '&lt;span style=\"color: red;\"&gt;\u274c Por favor, ingresa un valor num\u00e9rico v\u00e1lido&lt;/span&gt;';\n        return;\n    }\n\n    let valorConvertido = 0;\n\n    switch(tipo) {\n        case 'temperatura':\n            valorConvertido = convertirTemperatura(valor, unidadOrigen, unidadDestino);\n            break;\n        case 'peso':\n            valorConvertido = convertirPeso(valor, unidadOrigen, unidadDestino);\n            break;\n        case 'longitud':\n            valorConvertido = convertirLongitud(valor, unidadOrigen, unidadDestino);\n            break;\n    }\n\n    document.getElementById('valor-destino').value = valorConvertido.toFixed(4);\n\n    const conversion = `${valor} ${unidades[tipo][unidadOrigen]} = ${valorConvertido.toFixed(4)} ${unidades[tipo][unidadDestino]}`;\n    resultado.innerHTML = `&lt;div style=\"color: green;\"&gt;&lt;strong&gt;\u2705 ${conversion}&lt;/strong&gt;&lt;/div&gt;`;\n\n    // Agregar al historial\n    historialConversiones.unshift(conversion);\n    if (historialConversiones.length &gt; 5) {\n        historialConversiones.pop();\n    }\n    actualizarHistorial();\n}\n\nfunction convertirTemperatura(valor, origen, destino) {\n    // Convertir todo a Celsius primero\n    let celsius = valor;\n    if (origen === 'fahrenheit') {\n        celsius = (valor - 32) * 5/9;\n    } else if (origen === 'kelvin') {\n        celsius = valor - 273.15;\n    }\n\n    // Convertir de Celsius al destino\n    if (destino === 'fahrenheit') {\n        return celsius * 9/5 + 32;\n    } else if (destino === 'kelvin') {\n        return celsius + 273.15;\n    }\n    return celsius;\n}\n\nfunction convertirPeso(valor, origen, destino) {\n    // Convertir todo a gramos primero\n    let gramos = valor;\n    switch(origen) {\n        case 'kilogramos': gramos = valor * 1000; break;\n        case 'libras': gramos = valor * 453.592; break;\n        case 'onzas': gramos = valor * 28.3495; break;\n    }\n\n    // Convertir de gramos al destino\n    switch(destino) {\n        case 'kilogramos': return gramos / 1000;\n        case 'libras': return gramos / 453.592;\n        case 'onzas': return gramos / 28.3495;\n        default: return gramos;\n    }\n}\n\nfunction convertirLongitud(valor, origen, destino) {\n    // Convertir todo a metros primero\n    let metros = valor;\n    switch(origen) {\n        case 'centimetros': metros = valor / 100; break;\n        case 'kilometros': metros = valor * 1000; break;\n        case 'pies': metros = valor * 0.3048; break;\n        case 'pulgadas': metros = valor * 0.0254; break;\n    }\n\n    // Convertir de metros al destino\n    switch(destino) {\n        case 'centimetros': return metros * 100;\n        case 'kilometros': return metros / 1000;\n        case 'pies': return metros / 0.3048;\n        case 'pulgadas': return metros / 0.0254;\n        default: return metros;\n    }\n}\n\nfunction intercambiarUnidades() {\n    const unidadOrigen = document.getElementById('unidad-origen');\n    const unidadDestino = document.getElementById('unidad-destino');\n    const valorOrigen = document.getElementById('valor-origen');\n    const valorDestino = document.getElementById('valor-destino');\n\n    // Intercambiar unidades\n    const tempUnidad = unidadOrigen.value;\n    unidadOrigen.value = unidadDestino.value;\n    unidadDestino.value = tempUnidad;\n\n    // Intercambiar valores\n    const tempValor = valorOrigen.value;\n    valorOrigen.value = valorDestino.value;\n    valorDestino.value = tempValor;\n\n    if (valorOrigen.value) {\n        convertir();\n    }\n}\n\nfunction limpiarConversor() {\n    document.getElementById('valor-origen').value = '';\n    document.getElementById('valor-destino').value = '';\n    document.getElementById('resultado-conversion').innerHTML = '';\n}\n\nfunction actualizarHistorial() {\n    const historial = document.getElementById('historial-conversiones');\n    if (historialConversiones.length === 0) {\n        historial.innerHTML = '';\n        return;\n    }\n\n    historial.innerHTML = `\n        &lt;h4&gt;\ud83d\udccb Historial de Conversiones&lt;/h4&gt;\n        &lt;ul&gt;\n            ${historialConversiones.map(conversion =&gt; `&lt;li&gt;${conversion}&lt;/li&gt;`).join('')}\n        &lt;/ul&gt;\n    `;\n}\n</code></pre>"},{"location":"content/p11/#ejercicio-4-calculadora-de-propinas-y-division-de-cuentas","title":"Ejercicio 4: Calculadora de Propinas y Divisi\u00f3n de Cuentas","text":"<p>Desarrolla una calculadora para restaurantes que calcule propinas y divida cuentas entre varias personas.</p> <p>Requisitos: - Campo para el total de la cuenta - Selector de porcentaje de propina o campo personalizado - N\u00famero de personas para dividir - C\u00e1lculo de propina total y por persona - Resumen detallado de la cuenta</p> <pre><code>&lt;div id=\"calculadora-propinas\"&gt;\n    &lt;h3&gt;\ud83c\udf7d\ufe0f Calculadora de Propinas&lt;/h3&gt;\n\n    &lt;div class=\"input-cuenta\"&gt;\n        &lt;label for=\"total-cuenta\"&gt;\ud83d\udcb0 Total de la cuenta:&lt;/label&gt;\n        &lt;input type=\"number\" id=\"total-cuenta\" placeholder=\"0.00\" step=\"0.01\" min=\"0\"&gt;\n        &lt;span&gt;$&lt;/span&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"propina-section\"&gt;\n        &lt;label&gt;\ud83c\udfaf Porcentaje de propina:&lt;/label&gt;\n        &lt;div class=\"propina-botones\"&gt;\n            &lt;button onclick=\"seleccionarPropina(10)\" class=\"btn-propina\"&gt;10%&lt;/button&gt;\n            &lt;button onclick=\"seleccionarPropina(15)\" class=\"btn-propina\"&gt;15%&lt;/button&gt;\n            &lt;button onclick=\"seleccionarPropina(18)\" class=\"btn-propina\"&gt;18%&lt;/button&gt;\n            &lt;button onclick=\"seleccionarPropina(20)\" class=\"btn-propina\"&gt;20%&lt;/button&gt;\n            &lt;button onclick=\"seleccionarPropina(25)\" class=\"btn-propina\"&gt;25%&lt;/button&gt;\n        &lt;/div&gt;\n        &lt;div class=\"propina-personalizada\"&gt;\n            &lt;label for=\"propina-custom\"&gt;O ingresa un porcentaje personalizado:&lt;/label&gt;\n            &lt;input type=\"number\" id=\"propina-custom\" placeholder=\"%\" step=\"0.1\" min=\"0\" max=\"100\"&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"personas-section\"&gt;\n        &lt;label for=\"num-personas\"&gt;\ud83d\udc65 N\u00famero de personas:&lt;/label&gt;\n        &lt;input type=\"number\" id=\"num-personas\" value=\"1\" min=\"1\" max=\"50\"&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"botones\"&gt;\n        &lt;button onclick=\"calcularPropina()\"&gt;\ud83e\uddee Calcular&lt;/button&gt;\n        &lt;button onclick=\"limpiarPropinas()\"&gt;\ud83d\uddd1\ufe0f Limpiar&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"resultado-propinas\" class=\"resultado-detallado\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>let propinaSeleccionada = 15; // Propina por defecto\n\nfunction seleccionarPropina(porcentaje) {\n    propinaSeleccionada = porcentaje;\n    document.getElementById('propina-custom').value = '';\n\n    // Actualizar estilos de botones\n    const botones = document.querySelectorAll('.btn-propina');\n    botones.forEach(btn =&gt; btn.classList.remove('activo'));\n    event.target.classList.add('activo');\n\n    // Calcular autom\u00e1ticamente si hay datos\n    const totalCuenta = document.getElementById('total-cuenta').value;\n    if (totalCuenta) {\n        calcularPropina();\n    }\n}\n\nfunction calcularPropina() {\n    const totalCuenta = parseFloat(document.getElementById('total-cuenta').value);\n    const propinaCustom = parseFloat(document.getElementById('propina-custom').value);\n    const numPersonas = parseInt(document.getElementById('num-personas').value);\n    const resultado = document.getElementById('resultado-propinas');\n\n    // Validaciones\n    if (isNaN(totalCuenta) || totalCuenta &lt;= 0) {\n        resultado.innerHTML = '&lt;span style=\"color: red;\"&gt;\u274c Por favor, ingresa un total de cuenta v\u00e1lido&lt;/span&gt;';\n        return;\n    }\n\n    if (isNaN(numPersonas) || numPersonas &lt; 1) {\n        resultado.innerHTML = '&lt;span style=\"color: red;\"&gt;\u274c El n\u00famero de personas debe ser al menos 1&lt;/span&gt;';\n        return;\n    }\n\n    // Determinar porcentaje de propina\n    let porcentajePropina = propinaSeleccionada;\n    if (!isNaN(propinaCustom) &amp;&amp; propinaCustom &gt;= 0) {\n        porcentajePropina = propinaCustom;\n    }\n\n    // C\u00e1lculos\n    const montoPropinaTotal = totalCuenta * (porcentajePropina / 100);\n    const totalConPropina = totalCuenta + montoPropinaTotal;\n    const cuentaPorPersona = totalCuenta / numPersonas;\n    const propinaPorPersona = montoPropinaTotal / numPersonas;\n    const totalPorPersona = totalConPropina / numPersonas;\n\n    // Mostrar resultados\n    resultado.innerHTML = `\n        &lt;div class=\"resumen-cuenta\"&gt;\n            &lt;h4&gt;\ud83d\udcca Resumen de la Cuenta&lt;/h4&gt;\n            &lt;div class=\"linea-resumen\"&gt;\n                &lt;span&gt;Subtotal:&lt;/span&gt;\n                &lt;span&gt;$${totalCuenta.toFixed(2)}&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=\"linea-resumen\"&gt;\n                &lt;span&gt;Propina (${porcentajePropina}%):&lt;/span&gt;\n                &lt;span&gt;$${montoPropinaTotal.toFixed(2)}&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=\"linea-resumen total\"&gt;\n                &lt;span&gt;&lt;strong&gt;Total:&lt;/strong&gt;&lt;/span&gt;\n                &lt;span&gt;&lt;strong&gt;$${totalConPropina.toFixed(2)}&lt;/strong&gt;&lt;/span&gt;\n            &lt;/div&gt;\n\n            &lt;hr&gt;\n\n            &lt;h4&gt;\ud83d\udc65 Divisi\u00f3n entre ${numPersonas} persona${numPersonas &gt; 1 ? 's' : ''}&lt;/h4&gt;\n            &lt;div class=\"linea-resumen\"&gt;\n                &lt;span&gt;Cuenta por persona:&lt;/span&gt;\n                &lt;span&gt;$${cuentaPorPersona.toFixed(2)}&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=\"linea-resumen\"&gt;\n                &lt;span&gt;Propina por persona:&lt;/span&gt;\n                &lt;span&gt;$${propinaPorPersona.toFixed(2)}&lt;/span&gt;\n            &lt;/div&gt;\n            &lt;div class=\"linea-resumen total\"&gt;\n                &lt;span&gt;&lt;strong&gt;Total por persona:&lt;/strong&gt;&lt;/span&gt;\n                &lt;span&gt;&lt;strong&gt;$${totalPorPersona.toFixed(2)}&lt;/strong&gt;&lt;/span&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"consejo-propina\"&gt;\n                ${obtenerConsejoServicio(porcentajePropina)}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    `;\n}\n\nfunction obtenerConsejoServicio(porcentaje) {\n    if (porcentaje &lt; 10) {\n        return '&lt;div style=\"color: #e74c3c;\"&gt;\ud83e\udd14 Propina baja - \u00bfHubo alg\u00fan problema con el servicio?&lt;/div&gt;';\n    } else if (porcentaje &gt;= 10 &amp;&amp; porcentaje &lt; 15) {\n        return '&lt;div style=\"color: #f39c12;\"&gt;\ud83d\ude10 Propina est\u00e1ndar - Servicio b\u00e1sico&lt;/div&gt;';\n    } else if (porcentaje &gt;= 15 &amp;&amp; porcentaje &lt; 20) {\n        return '&lt;div style=\"color: #27ae60;\"&gt;\ud83d\ude0a Buena propina - Servicio satisfactorio&lt;/div&gt;';\n    } else if (porcentaje &gt;= 20 &amp;&amp; porcentaje &lt; 25) {\n        return '&lt;div style=\"color: #2ecc71;\"&gt;\ud83d\ude04 Excelente propina - Muy buen servicio&lt;/div&gt;';\n    } else {\n        return '&lt;div style=\"color: #9b59b6;\"&gt;\ud83c\udf1f Propina excepcional - Servicio extraordinario&lt;/div&gt;';\n    }\n}\n\nfunction limpiarPropinas() {\n    document.getElementById('total-cuenta').value = '';\n    document.getElementById('propina-custom').value = '';\n    document.getElementById('num-personas').value = '1';\n    document.getElementById('resultado-propinas').innerHTML = '';\n\n    // Limpiar selecci\u00f3n de botones\n    const botones = document.querySelectorAll('.btn-propina');\n    botones.forEach(btn =&gt; btn.classList.remove('activo'));\n\n    propinaSeleccionada = 15;\n}\n\n// Event listeners para c\u00e1lculo autom\u00e1tico\ndocument.getElementById('total-cuenta').addEventListener('input', function() {\n    if (this.value) calcularPropina();\n});\n\ndocument.getElementById('propina-custom').addEventListener('input', function() {\n    if (this.value &amp;&amp; document.getElementById('total-cuenta').value) {\n        calcularPropina();\n    }\n});\n\ndocument.getElementById('num-personas').addEventListener('input', function() {\n    if (document.getElementById('total-cuenta').value) {\n        calcularPropina();\n    }\n});\n</code></pre>"},{"location":"content/p11/#ejercicio-5-sistema-de-puntuacion-y-estadisticas","title":"Ejercicio 5: Sistema de Puntuaci\u00f3n y Estad\u00edsticas","text":"<p>Crea un sistema que registre puntuaciones de juegos o ex\u00e1menes y calcule estad\u00edsticas.</p> <p>Requisitos: - Agregar puntuaciones individuales - Calcular promedio, m\u00e1ximo, m\u00ednimo - Mostrar distribuci\u00f3n de calificaciones - Historial de puntuaciones - Exportar estad\u00edsticas</p> <pre><code>&lt;div id=\"sistema-puntuaciones\"&gt;\n    &lt;h3&gt;\ud83c\udfaf Sistema de Puntuaciones&lt;/h3&gt;\n\n    &lt;div class=\"agregar-puntuacion\"&gt;\n        &lt;div class=\"input-group\"&gt;\n            &lt;input type=\"text\" id=\"nombre-estudiante\" placeholder=\"Nombre del estudiante\"&gt;\n            &lt;input type=\"number\" id=\"puntuacion\" placeholder=\"Puntuaci\u00f3n\" min=\"0\" max=\"100\" step=\"0.1\"&gt;\n            &lt;button onclick=\"agregarPuntuacion()\"&gt;\u2795 Agregar&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"controles\"&gt;\n        &lt;button onclick=\"calcularEstadisticas()\"&gt;\ud83d\udcca Calcular Estad\u00edsticas&lt;/button&gt;\n        &lt;button onclick=\"mostrarDistribucion()\"&gt;\ud83d\udcc8 Ver Distribuci\u00f3n&lt;/button&gt;\n        &lt;button onclick=\"exportarDatos()\"&gt;\ud83d\udcbe Exportar&lt;/button&gt;\n        &lt;button onclick=\"limpiarTodo()\"&gt;\ud83d\uddd1\ufe0f Limpiar Todo&lt;/button&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"lista-puntuaciones\" class=\"lista-puntuaciones\"&gt;&lt;/div&gt;\n    &lt;div id=\"estadisticas\" class=\"estadisticas\"&gt;&lt;/div&gt;\n    &lt;div id=\"distribucion\" class=\"distribucion\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>let puntuaciones = [];\nlet contadorId = 0;\n\nfunction agregarPuntuacion() {\n    const nombre = document.getElementById('nombre-estudiante').value.trim();\n    const puntuacion = parseFloat(document.getElementById('puntuacion').value);\n\n    // Validaciones\n    if (!nombre) {\n        alert('\u274c Por favor, ingresa el nombre del estudiante');\n        return;\n    }\n\n    if (isNaN(puntuacion) || puntuacion &lt; 0 || puntuacion &gt; 100) {\n        alert('\u274c La puntuaci\u00f3n debe ser un n\u00famero entre 0 y 100');\n        return;\n    }\n\n    // Agregar puntuaci\u00f3n\n    const nuevaPuntuacion = {\n        id: ++contadorId,\n        nombre: nombre,\n        puntuacion: puntuacion,\n        fecha: new Date().toLocaleString(),\n        letra: obtenerCalificacionLetra(puntuacion)\n    };\n\n    puntuaciones.push(nuevaPuntuacion);\n\n    // Limpiar campos\n    document.getElementById('nombre-estudiante').value = '';\n    document.getElementById('puntuacion').value = '';\n\n    // Actualizar vista\n    mostrarListaPuntuaciones();\n    calcularEstadisticas();\n\n    document.getElementById('nombre-estudiante').focus();\n}\n\nfunction obtenerCalificacionLetra(puntuacion) {\n    if (puntuacion &gt;= 90) return 'A';\n    if (puntuacion &gt;= 80) return 'B';\n    if (puntuacion &gt;= 70) return 'C';\n    if (puntuacion &gt;= 60) return 'D';\n    return 'F';\n}\n\nfunction mostrarListaPuntuaciones() {\n    const lista = document.getElementById('lista-puntuaciones');\n\n    if (puntuaciones.length === 0) {\n        lista.innerHTML = '&lt;p&gt;No hay puntuaciones registradas&lt;/p&gt;';\n        return;\n    }\n\n    const puntuacionesOrdenadas = [...puntuaciones].sort((a, b) =&gt; b.puntuacion - a.puntuacion);\n\n    lista.innerHTML = `\n        &lt;h4&gt;\ud83d\udccb Lista de Puntuaciones (${puntuaciones.length} registros)&lt;/h4&gt;\n        &lt;div class=\"tabla-puntuaciones\"&gt;\n            &lt;div class=\"header-tabla\"&gt;\n                &lt;span&gt;Nombre&lt;/span&gt;\n                &lt;span&gt;Puntuaci\u00f3n&lt;/span&gt;\n                &lt;span&gt;Letra&lt;/span&gt;\n                &lt;span&gt;Fecha&lt;/span&gt;\n                &lt;span&gt;Acciones&lt;/span&gt;\n            &lt;/div&gt;\n            ${puntuacionesOrdenadas.map(p =&gt; `\n                &lt;div class=\"fila-tabla\"&gt;\n                    &lt;span&gt;${p.nombre}&lt;/span&gt;\n                    &lt;span&gt;${p.puntuacion}&lt;/span&gt;\n                    &lt;span class=\"letra-${p.letra.toLowerCase()}\"&gt;${p.letra}&lt;/span&gt;\n                    &lt;span&gt;${p.fecha}&lt;/span&gt;\n                    &lt;span&gt;\n                        &lt;button onclick=\"eliminarPuntuacion(${p.id})\" class=\"btn-eliminar\"&gt;\ud83d\uddd1\ufe0f&lt;/button&gt;\n                    &lt;/span&gt;\n                &lt;/div&gt;\n            `).join('')}\n        &lt;/div&gt;\n    `;\n}\n\nfunction eliminarPuntuacion(id) {\n    if (confirm('\u00bfEst\u00e1s seguro de eliminar esta puntuaci\u00f3n?')) {\n        puntuaciones = puntuaciones.filter(p =&gt; p.id !== id);\n        mostrarListaPuntuaciones();\n        calcularEstadisticas();\n        mostrarDistribucion();\n    }\n}\n\nfunction calcularEstadisticas() {\n    const estadisticas = document.getElementById('estadisticas');\n\n    if (puntuaciones.length === 0) {\n        estadisticas.innerHTML = '';\n        return;\n    }\n\n    const valores = puntuaciones.map(p =&gt; p.puntuacion);\n    const suma = valores.reduce((a, b) =&gt; a + b, 0);\n    const promedio = suma / valores.length;\n    const maximo = Math.max(...valores);\n    const minimo = Math.min(...valores);\n    const mediana = calcularMediana(valores);\n\n    // Contar calificaciones por letra\n    const conteoLetras = puntuaciones.reduce((acc, p) =&gt; {\n        acc[p.letra] = (acc[p.letra] || 0) + 1;\n        return acc;\n    }, {});\n\n    // Calcular porcentajes de aprobaci\u00f3n\n    const aprobados = puntuaciones.filter(p =&gt; p.puntuacion &gt;= 60).length;\n    const porcentajeAprobacion = (aprobados / puntuaciones.length) * 100;\n\n    estadisticas.innerHTML = `\n        &lt;h4&gt;\ud83d\udcca Estad\u00edsticas&lt;/h4&gt;\n        &lt;div class=\"grid-estadisticas\"&gt;\n            &lt;div class=\"stat-card\"&gt;\n                &lt;div class=\"stat-valor\"&gt;${promedio.toFixed(2)}&lt;/div&gt;\n                &lt;div class=\"stat-label\"&gt;Promedio&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-card\"&gt;\n                &lt;div class=\"stat-valor\"&gt;${maximo}&lt;/div&gt;\n                &lt;div class=\"stat-label\"&gt;M\u00e1ximo&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-card\"&gt;\n                &lt;div class=\"stat-valor\"&gt;${minimo}&lt;/div&gt;\n                &lt;div class=\"stat-label\"&gt;M\u00ednimo&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-card\"&gt;\n                &lt;div class=\"stat-valor\"&gt;${mediana.toFixed(2)}&lt;/div&gt;\n                &lt;div class=\"stat-label\"&gt;Mediana&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-card\"&gt;\n                &lt;div class=\"stat-valor\"&gt;${porcentajeAprobacion.toFixed(1)}%&lt;/div&gt;\n                &lt;div class=\"stat-label\"&gt;Aprobaci\u00f3n&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"stat-card\"&gt;\n                &lt;div class=\"stat-valor\"&gt;${puntuaciones.length}&lt;/div&gt;\n                &lt;div class=\"stat-label\"&gt;Total&lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"distribucion-letras\"&gt;\n            &lt;h5&gt;Distribuci\u00f3n por Calificaciones:&lt;/h5&gt;\n            ${Object.entries(conteoLetras).map(([letra, cantidad]) =&gt; `\n                &lt;div class=\"barra-letra\"&gt;\n                    &lt;span class=\"letra-${letra.toLowerCase()}\"&gt;${letra}: ${cantidad} (${((cantidad/puntuaciones.length)*100).toFixed(1)}%)&lt;/span&gt;\n                    &lt;div class=\"barra-progreso\"&gt;\n                        &lt;div class=\"progreso-${letra.toLowerCase()}\" style=\"width: ${(cantidad/puntuaciones.length)*100}%\"&gt;&lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            `).join('')}\n        &lt;/div&gt;\n    `;\n}\n\nfunction calcularMediana(valores) {\n    const ordenados = [...valores].sort((a, b) =&gt; a - b);\n    const medio = Math.floor(ordenados.length / 2);\n\n    if (ordenados.length % 2 === 0) {\n        return (ordenados[medio - 1] + ordenados[medio]) / 2;\n    } else {\n        return ordenados[medio];\n    }\n}\n\nfunction mostrarDistribucion() {\n    const distribucion = document.getElementById('distribucion');\n\n    if (puntuaciones.length === 0) {\n        distribucion.innerHTML = '';\n        return;\n    }\n\n    // Crear rangos de puntuaci\u00f3n\n    const rangos = {\n        '90-100': 0, '80-89': 0, '70-79': 0, '60-69': 0, '50-59': 0, '0-49': 0\n    };\n\n    puntuaciones.forEach(p =&gt; {\n        const punt = p.puntuacion;\n        if (punt &gt;= 90) rangos['90-100']++;\n        else if (punt &gt;= 80) rangos['80-89']++;\n        else if (punt &gt;= 70) rangos['70-79']++;\n        else if (punt &gt;= 60) rangos['60-69']++;\n        else if (punt &gt;= 50) rangos['50-59']++;\n        else rangos['0-49']++;\n    });\n\n    const maxCantidad = Math.max(...Object.values(rangos));\n\n    distribucion.innerHTML = `\n        &lt;h4&gt;\ud83d\udcc8 Distribuci\u00f3n de Puntuaciones&lt;/h4&gt;\n        &lt;div class=\"histograma\"&gt;\n            ${Object.entries(rangos).map(([rango, cantidad]) =&gt; `\n                &lt;div class=\"barra-histograma\"&gt;\n                    &lt;div class=\"barra\" style=\"height: ${maxCantidad &gt; 0 ? (cantidad/maxCantidad)*100 : 0}%\"&gt;\n                        &lt;span class=\"valor-barra\"&gt;${cantidad}&lt;/span&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"etiqueta-rango\"&gt;${rango}&lt;/div&gt;\n                &lt;/div&gt;\n            `).join('')}\n        &lt;/div&gt;\n    `;\n}\n\nfunction exportarDatos() {\n    if (puntuaciones.length === 0) {\n        alert('\u274c No hay datos para exportar');\n        return;\n    }\n\n    const valores = puntuaciones.map(p =&gt; p.puntuacion);\n    const suma = valores.reduce((a, b) =&gt; a + b, 0);\n    const promedio = suma / valores.length;\n\n    const datosExport = {\n        fecha_exportacion: new Date().toLocaleString(),\n        total_registros: puntuaciones.length,\n        estadisticas: {\n            promedio: promedio.toFixed(2),\n            maximo: Math.max(...valores),\n            minimo: Math.min(...valores),\n            mediana: calcularMediana(valores).toFixed(2)\n        },\n        puntuaciones: puntuaciones\n    };\n\n    const dataStr = JSON.stringify(datosExport, null, 2);\n    const dataBlob = new Blob([dataStr], {type: 'application/json'});\n    const url = URL.createObjectURL(dataBlob);\n\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `puntuaciones_${new Date().toISOString().split('T')[0]}.json`;\n    link.click();\n\n    URL.revokeObjectURL(url);\n    alert('\u2705 Datos exportados exitosamente');\n}\n\nfunction limpiarTodo() {\n    if (puntuaciones.length === 0) {\n        alert('\u274c No hay datos para limpiar');\n        return;\n    }\n\n    if (confirm('\u00bfEst\u00e1s seguro de eliminar todas las puntuaciones?')) {\n        puntuaciones = [];\n        contadorId = 0;\n        document.getElementById('lista-puntuaciones').innerHTML = '';\n        document.getElementById('estadisticas').innerHTML = '';\n        document.getElementById('distribucion').innerHTML = '';\n        alert('\u2705 Todos los datos han sido eliminados');\n    }\n}\n\n// Event listener para agregar puntuaci\u00f3n con Enter\ndocument.getElementById('puntuacion').addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n        agregarPuntuacion();\n    }\n});\n</code></pre>"},{"location":"content/p11/#estilos-css-para-los-ejercicios","title":"Estilos CSS para los Ejercicios","text":"<p>Para que los ejercicios se vean mejor, agrega estos estilos CSS:</p> <pre><code>/* Estilos generales para los ejercicios */\n.inputs, .botones, .controles {\n    margin: 15px 0;\n    display: flex;\n    gap: 10px;\n    flex-wrap: wrap;\n}\n\n.resultado, .resultado-detallado {\n    margin: 15px 0;\n    padding: 15px;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n    background-color: #f9f9f9;\n    min-height: 50px;\n}\n\n/* Ejercicio 1: Calculadora B\u00e1sica */\n#calculadora-basica input {\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    width: 150px;\n}\n\n#calculadora-basica button {\n    padding: 10px 15px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n#calculadora-basica button:hover {\n    background-color: #0056b3;\n}\n\n/* Ejercicio 2: Geometr\u00eda */\n.inputs-dinamicos {\n    margin: 15px 0;\n}\n\n.inputs-dinamicos input {\n    margin: 5px;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n}\n\n.formulas {\n    margin: 10px 0;\n    padding: 10px;\n    background-color: #e7f3ff;\n    border-radius: 4px;\n}\n\n/* Ejercicio 3: Conversor */\n.conversion-inputs {\n    display: flex;\n    align-items: center;\n    gap: 15px;\n    margin: 20px 0;\n}\n\n.input-group {\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.conversion-arrow {\n    font-size: 24px;\n    color: #007bff;\n}\n\n.historial {\n    margin-top: 20px;\n    padding: 15px;\n    background-color: #f8f9fa;\n    border-radius: 5px;\n}\n\n/* Ejercicio 4: Propinas */\n.propina-botones {\n    display: flex;\n    gap: 10px;\n    margin: 10px 0;\n}\n\n.btn-propina {\n    padding: 8px 12px;\n    border: 2px solid #007bff;\n    background-color: white;\n    color: #007bff;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.btn-propina.activo, .btn-propina:hover {\n    background-color: #007bff;\n    color: white;\n}\n\n.resumen-cuenta {\n    background-color: white;\n    padding: 20px;\n    border-radius: 8px;\n    border: 1px solid #ddd;\n}\n\n.linea-resumen {\n    display: flex;\n    justify-content: space-between;\n    margin: 8px 0;\n}\n\n.linea-resumen.total {\n    border-top: 2px solid #333;\n    padding-top: 8px;\n    font-size: 1.1em;\n}\n\n/* Ejercicio 5: Puntuaciones */\n.tabla-puntuaciones {\n    display: grid;\n    grid-template-columns: 2fr 1fr 1fr 2fr 1fr;\n    gap: 10px;\n    margin: 15px 0;\n}\n\n.header-tabla {\n    display: contents;\n    font-weight: bold;\n    background-color: #f8f9fa;\n}\n\n.fila-tabla {\n    display: contents;\n}\n\n.fila-tabla &gt; span {\n    padding: 8px;\n    border-bottom: 1px solid #eee;\n}\n\n.grid-estadisticas {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n    gap: 15px;\n    margin: 20px 0;\n}\n\n.stat-card {\n    text-align: center;\n    padding: 15px;\n    background-color: white;\n    border-radius: 8px;\n    border: 1px solid #ddd;\n}\n\n.stat-valor {\n    font-size: 24px;\n    font-weight: bold;\n    color: #007bff;\n}\n\n.stat-label {\n    font-size: 12px;\n    color: #666;\n    margin-top: 5px;\n}\n\n.letra-a { color: #28a745; }\n.letra-b { color: #17a2b8; }\n.letra-c { color: #ffc107; }\n.letra-d { color: #fd7e14; }\n.letra-f { color: #dc3545; }\n\n.histograma {\n    display: flex;\n    align-items: end;\n    gap: 10px;\n    height: 200px;\n    margin: 20px 0;\n}\n\n.barra-histograma {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.barra {\n    width: 100%;\n    background-color: #007bff;\n    display: flex;\n    align-items: end;\n    justify-content: center;\n    min-height: 20px;\n    border-radius: 4px 4px 0 0;\n}\n\n.valor-barra {\n    color: white;\n    font-weight: bold;\n    padding: 5px;\n}\n\n.etiqueta-rango {\n    margin-top: 10px;\n    font-size: 12px;\n    text-align: center;\n}\n</code></pre>"},{"location":"content/p11/#instrucciones-para-resolver","title":"Instrucciones para Resolver","text":"<ol> <li>Copia el c\u00f3digo HTML y JavaScript de cada ejercicio en archivos separados</li> <li>Agrega los estilos CSS para mejorar la apariencia</li> <li>Prueba cada funcionalidad paso a paso</li> <li>Modifica y experimenta con diferentes valores y casos</li> <li>Agrega validaciones adicionales seg\u00fan consideres necesario</li> </ol> <p>Estos ejercicios te ayudar\u00e1n a practicar: - Manipulaci\u00f3n del DOM - Eventos de click - Validaci\u00f3n de formularios - C\u00e1lculos matem\u00e1ticos - Modificaci\u00f3n din\u00e1mica de contenido - Gesti\u00f3n de estado en JavaScript</p> <p>\u00a1Divi\u00e9rtete programando y aprendiendo! \ud83d\ude80</p>"},{"location":"content/p12/","title":"Semana 12 - Evaluaci\u00f3n de Conocimiento","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma: <pre><code>https://seia-stalone.vercel.app/\n</code></pre></p>"},{"location":"content/p12/#codigo-3cpji7ft","title":"C\u00f3digo: 3CPJI7FT","text":""},{"location":"content/p13/","title":"Semana 13 - M\u00e9todos As\u00edncronos y Fetch en JavaScript con Mockoon Playground","text":""},{"location":"content/p13/#introduccion","title":"Introducci\u00f3n","text":"<p>JavaScript es un lenguaje de programaci\u00f3n que, por naturaleza, es s\u00edncrono y de un solo hilo, lo que significa que ejecuta una tarea a la vez en un orden secuencial. Sin embargo, muchas operaciones, como solicitudes HTTP, acceso a bases de datos o lectura de archivos, son as\u00edncronas porque pueden tardar un tiempo indeterminado en completarse. Para manejar estas operaciones, JavaScript proporciona mecanismos como callbacks, promesas, y las palabras clave <code>async/await</code>, junto con la API moderna <code>fetch</code> para realizar solicitudes HTTP.</p> <p>En este documento, exploraremos en detalle:</p> <ol> <li>\u00bfQu\u00e9 es la programaci\u00f3n as\u00edncrona?</li> <li>Mecanismos para manejar asincron\u00eda en JavaScript:<ul> <li>Callbacks</li> <li>Promesas</li> <li>Async/Await</li> </ul> </li> <li>La API <code>fetch</code>: c\u00f3mo realizar solicitudes HTTP</li> <li>Uso de Mockoon Playground para probar APIs</li> <li>Ejemplos pr\u00e1cticos completos con Mockoon Playground</li> <li>Buenas pr\u00e1cticas y manejo de errores</li> </ol> <p>Los ejemplos utilizan el endpoint p\u00fablico de Mockoon Playground en <code>https://playground.mockoon.com/users</code>, que proporciona una API simulada para pruebas sin necesidad de configurar un servidor local.</p>"},{"location":"content/p13/#que-es-la-programacion-asincrona","title":"\u00bfQu\u00e9 es la programaci\u00f3n as\u00edncrona?","text":"<p>La programaci\u00f3n as\u00edncrona permite que el c\u00f3digo contin\u00fae ejecut\u00e1ndose mientras se espera que una operaci\u00f3n de larga duraci\u00f3n (como una solicitud HTTP) se complete, sin bloquear el hilo principal. Esto es crucial en aplicaciones web para mejorar la experiencia del usuario, ya que evita que la interfaz se \"congele\" mientras se espera una respuesta.</p> <p>JavaScript utiliza el event loop (bucle de eventos) para manejar operaciones as\u00edncronas. El event loop permite que las tareas as\u00edncronas se procesen en segundo plano y se ejecuten una vez que est\u00e9n listas, mientras el resto del c\u00f3digo sigue ejecut\u00e1ndose.</p>"},{"location":"content/p13/#mecanismos-para-manejar-asincronia-en-javascript","title":"Mecanismos para manejar asincron\u00eda en JavaScript","text":""},{"location":"content/p13/#1-callbacks","title":"1. Callbacks","text":"<p>Los callbacks son funciones que se pasan como argumentos a otras funciones y se ejecutan una vez que la operaci\u00f3n as\u00edncrona ha terminado. Aunque son un enfoque antiguo, es importante entenderlos porque son la base de los m\u00e9todos modernos.</p>"},{"location":"content/p13/#ejemplo-de-callback","title":"Ejemplo de callback","text":"<pre><code>function obtenerDatos(url, callback) {\n  fetch(url)\n    .then(response =&gt; {\n      if (!response.ok) {\n        throw new Error('Error en la solicitud');\n      }\n      return response.json();\n    })\n    .then(data =&gt; callback(null, data))\n    .catch(error =&gt; callback(error, null));\n}\n\nobtenerDatos('https://playground.mockoon.com/users', function (error, datos) {\n  if (error) {\n    console.error('Error:', error.message);\n    return;\n  }\n  console.log('Datos recibidos:', datos);\n});\n</code></pre> <p>Problema con callbacks: Cuando se anidan m\u00faltiples callbacks, se genera el problema conocido como \"callback hell\" o \"pir\u00e1mide de la fatalidad\", que hace que el c\u00f3digo sea dif\u00edcil de leer y mantener.</p>"},{"location":"content/p13/#2-promesas","title":"2. Promesas","text":"<p>Las promesas son objetos que representan la eventual finalizaci\u00f3n (o falla) de una operaci\u00f3n as\u00edncrona. Una promesa puede estar en uno de tres estados:</p> <ul> <li>Pending (pendiente): La operaci\u00f3n a\u00fan no se ha completado.</li> <li>Fulfilled (resuelta): La operaci\u00f3n se complet\u00f3 con \u00e9xito.</li> <li>Rejected (rechazada): La operaci\u00f3n fall\u00f3.</li> </ul>"},{"location":"content/p13/#estructura-de-una-promesa","title":"Estructura de una promesa","text":"<pre><code>const promesa = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    const exito = true;\n    if (exito) {\n      resolve('\u00a1Operaci\u00f3n exitosa!');\n    } else {\n      reject(new Error('Algo sali\u00f3 mal'));\n    }\n  }, 2000);\n});\n\npromesa\n  .then((resultado) =&gt; {\n    console.log(resultado); // \u00a1Operaci\u00f3n exitosa!\n  })\n  .catch((error) =&gt; {\n    console.error(error.message); // Algo sali\u00f3 mal\n  });\n</code></pre> <p>Las promesas permiten encadenar operaciones con <code>.then()</code> y manejar errores con <code>.catch()</code>, lo que mejora la legibilidad respecto a los callbacks.</p>"},{"location":"content/p13/#3-asyncawait","title":"3. Async/Await","text":"<p>La sintaxis <code>async/await</code> es una forma m\u00e1s moderna y legible de trabajar con promesas. Una funci\u00f3n marcada con la palabra clave <code>async</code> siempre devuelve una promesa, y dentro de ella se puede usar <code>await</code> para esperar a que una promesa se resuelva.</p>"},{"location":"content/p13/#ejemplo-de-asyncawait","title":"Ejemplo de async/await","text":"<pre><code>async function obtenerDatos() {\n  try {\n    const respuesta = await fetch('https://playground.mockoon.com/users');\n    if (!respuesta.ok) {\n      throw new Error(`Error HTTP: ${respuesta.status}`);\n    }\n    const datos = await respuesta.json();\n    console.log('Datos recibidos:', datos);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n}\n\nobtenerDatos();\n</code></pre> <p>Ventajas de async/await:</p> <ul> <li>C\u00f3digo m\u00e1s limpio y similar al s\u00edncrono.</li> <li>Mejor manejo de errores con bloques <code>try/catch</code>.</li> <li>Evita el encadenamiento excesivo de <code>.then()</code>.</li> </ul>"},{"location":"content/p13/#la-api-fetch","title":"La API <code>fetch</code>","text":"<p>La API <code>fetch</code> es una interfaz moderna de JavaScript que permite realizar solicitudes HTTP (como GET, POST, PUT, DELETE, etc.) de manera sencilla. Es m\u00e1s limpia que la antigua <code>XMLHttpRequest</code> y est\u00e1 basada en promesas.</p>"},{"location":"content/p13/#caracteristicas-de-fetch","title":"Caracter\u00edsticas de <code>fetch</code>","text":"<ul> <li>Basada en promesas: Devuelve una promesa que se resuelve en un objeto <code>Response</code>.</li> <li>Soporte para m\u00faltiples formatos: Puede manejar JSON, texto, blobs, etc.</li> <li>Configuraci\u00f3n flexible: Permite configurar headers, m\u00e9todos, cuerpos de solicitud, etc.</li> <li>No rechaza autom\u00e1ticamente en errores HTTP: A diferencia de otras APIs, <code>fetch</code> no rechaza la promesa en errores como <code>404</code> o <code>500</code>; en su lugar, devuelve un objeto <code>Response</code> con la propiedad <code>ok</code> en <code>false</code>.</li> </ul>"},{"location":"content/p13/#estructura-basica-de-una-solicitud-con-fetch","title":"Estructura b\u00e1sica de una solicitud con <code>fetch</code>","text":"<pre><code>fetch('https://playground.mockoon.com/users')\n  .then((respuesta) =&gt; {\n    if (!respuesta.ok) {\n      throw new Error(`Error HTTP: ${respuesta.status}`);\n    }\n    return respuesta.json();\n  })\n  .then((datos) =&gt; {\n    console.log('Datos:', datos);\n  })\n  .catch((error) =&gt; {\n    console.error('Error:', error.message);\n  });\n</code></pre> <p>Con async/await, la misma solicitud se escribir\u00eda as\u00ed:</p> <pre><code>async function obtenerDatos() {\n  try {\n    const respuesta = await fetch('https://playground.mockoon.com/users');\n    if (!respuesta.ok) {\n      throw new Error(`Error HTTP: ${respuesta.status}`);\n    }\n    const datos = await respuesta.json();\n    console.log('Datos:', datos);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n}\n\nobtenerDatos();\n</code></pre>"},{"location":"content/p13/#uso-de-mockoon-playground-para-probar-apis","title":"Uso de Mockoon Playground para probar APIs","text":"<p>Mockoon Playground es un servicio en l\u00ednea proporcionado por Mockoon que ofrece endpoints API simulados para pruebas r\u00e1pidas. El endpoint <code>https://playground.mockoon.com/users</code> devuelve una lista de usuarios en formato JSON, ideal para probar solicitudes HTTP sin necesidad de configurar un servidor local.</p>"},{"location":"content/p13/#caracteristicas-del-endpoint-httpsplaygroundmockooncomusers","title":"Caracter\u00edsticas del endpoint <code>https://playground.mockoon.com/users</code>","text":"<ul> <li>M\u00e9todo: GET</li> <li>Respuesta: Lista de usuarios en formato JSON, por ejemplo:   <pre><code>[\n  { \"id\": 1, \"name\": \"John Doe\", \"email\": \"john.doe@example.com\" },\n  { \"id\": 2, \"name\": \"Jane Smith\", \"email\": \"jane.smith@example.com\" }\n]\n</code></pre></li> <li>Limitaciones: El playground es de solo lectura (soporta principalmente GET). Solicitudes como POST o PUT no est\u00e1n habilitadas en este endpoint p\u00fablico.</li> </ul> <p>Debido a las limitaciones del playground, los ejemplos se centrar\u00e1n en solicitudes GET y simular\u00e1n escenarios de error (como tiempos de espera o fallos de red) en lugar de POST, ya que el endpoint no soporta escritura.</p>"},{"location":"content/p13/#ejemplos-practicos-completos-con-mockoon-playground","title":"Ejemplos pr\u00e1cticos completos con Mockoon Playground","text":"<p>A continuaci\u00f3n, presento ejemplos que utilizan <code>fetch</code> para interactuar con el endpoint <code>https://playground.mockoon.com/users</code>, combinando promesas, async/await y manejo de errores.</p>"},{"location":"content/p13/#ejemplo-1-solicitud-get-con-mockoon-playground","title":"Ejemplo 1: Solicitud GET con Mockoon Playground","text":"<p>Este ejemplo obtiene la lista de usuarios desde el endpoint <code>GET https://playground.mockoon.com/users</code>.</p> <pre><code>async function obtenerUsuariosPlayground() {\n  try {\n    const respuesta = await fetch('https://playground.mockoon.com/users');\n    if (!respuesta.ok) {\n      throw new Error(`Error HTTP: ${respuesta.status}`);\n    }\n    const usuarios = await respuesta.json();\n    console.log('Usuarios obtenidos desde Mockoon Playground:', usuarios);\n  } catch (error) {\n    console.error('Error al obtener usuarios:', error.message);\n  }\n}\n\nobtenerUsuariosPlayground();\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>La solicitud se realiza al endpoint <code>https://playground.mockoon.com/users</code>.</li> <li>Se verifica si la respuesta es exitosa con <code>respuesta.ok</code>.</li> <li>Los datos JSON se procesan y se imprimen en la consola.</li> <li>Si hay un error de red (por ejemplo, falta de conexi\u00f3n), se captura en el bloque <code>catch</code>.</li> </ul> <p>Salida esperada (puede variar seg\u00fan el estado del playground):</p> <pre><code>Usuarios obtenidos desde Mockoon Playground: [\n  { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\n  { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com' }\n]\n</code></pre>"},{"location":"content/p13/#ejemplo-2-simulacion-de-solicitud-post-nota-aclaratoria","title":"Ejemplo 2: Simulaci\u00f3n de solicitud POST (nota aclaratoria)","text":"<p>Dado que el endpoint <code>https://playground.mockoon.com/users</code> no soporta solicitudes POST, este ejemplo muestra c\u00f3mo se escribir\u00eda el c\u00f3digo si el endpoint lo permitiera, junto con una nota aclaratoria.</p> <pre><code>async function crearUsuarioPlayground() {\n  console.warn('Nota: El endpoint https://playground.mockoon.com/users no soporta POST. Este es un ejemplo ilustrativo.');\n  try {\n    const nuevoUsuario = {\n      name: 'Ana L\u00f3pez',\n      email: 'ana.lopez@example.com',\n    };\n\n    const respuesta = await fetch('https://playground.mockoon.com/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(nuevoUsuario),\n    });\n\n    if (!respuesta.ok) {\n      throw new Error(`Error HTTP: ${respuesta.status}`);\n    }\n\n    const usuarioCreado = await respuesta.json();\n    console.log('Usuario creado en Mockoon Playground:', usuarioCreado);\n  } catch (error) {\n    console.error('Error al crear usuario:', error.message);\n  }\n}\n\ncrearUsuarioPlayground();\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Este c\u00f3digo intenta enviar una solicitud POST, pero el endpoint del playground devolver\u00e1 un error (por ejemplo, 405 Method Not Allowed).</li> <li>La advertencia inicial aclara que el endpoint no soporta POST, y el ejemplo sirve como referencia para casos donde se use un endpoint que s\u00ed lo permita.</li> <li>Para probar solicitudes POST reales, se recomienda configurar un servidor Mockoon local o usar otra API que soporte escritura.</li> </ul> <p>Salida esperada: <pre><code>Nota: El endpoint https://playground.mockoon.com/users no soporta POST. Este es un ejemplo ilustrativo.\nError al crear usuario: Error HTTP: 405\n</code></pre></p>"},{"location":"content/p13/#ejemplo-3-manejo-de-errores-con-tiempo-de-espera","title":"Ejemplo 3: Manejo de errores con tiempo de espera","text":"<p>Este ejemplo implementa un tiempo de espera para la solicitud GET, simulando un escenario donde la respuesta del servidor es demasiado lenta.</p> <pre><code>async function fetchConTimeout(url, opciones, timeout = 5000) {\n  const controller = new AbortController();\n  const id = setTimeout(() =&gt; controller.abort(), timeout);\n\n  try {\n    const respuesta = await fetch(url, {\n      ...opciones,\n      signal: controller.signal,\n    });\n    clearTimeout(id);\n    if (!respuesta.ok) {\n      throw new Error(`Error HTTP: ${respuesta.status}`);\n    }\n    return respuesta;\n  } catch (error) {\n    clearTimeout(id);\n    throw error;\n  }\n}\n\nasync function obtenerUsuariosConTimeout() {\n  try {\n    const respuesta = await fetchConTimeout('https://playground.mockoon.com/users', {}, 3000);\n    const usuarios = await respuesta.json();\n    console.log('Usuarios obtenidos:', usuarios);\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Error: La solicitud excedi\u00f3 el tiempo l\u00edmite de 3 segundos');\n    } else {\n      console.error('Error:', error.message);\n    }\n  }\n}\n\nobtenerUsuariosConTimeout();\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>La funci\u00f3n <code>fetchConTimeout</code> agrega un tiempo de espera a la solicitud usando <code>AbortController</code>.</li> <li>Si la solicitud tarda m\u00e1s de 3 segundos, se lanza un <code>AbortError</code>.</li> <li>Este ejemplo es \u00fatil para manejar APIs externas como el Mockoon Playground, donde los tiempos de respuesta pueden variar.</li> </ul> <p>Salida esperada (si la solicitud es r\u00e1pida): <pre><code>Usuarios obtenidos: [\n  { id: 1, name: 'John Doe', email: 'john.doe@example.com' },\n  { id: 2, name: 'Jane Smith', email: 'jane.smith@example.com' }\n]\n</code></pre></p> <p>Salida esperada (si la solicitud excede el tiempo): <pre><code>Error: La solicitud excedi\u00f3 el tiempo l\u00edmite de 3 segundos\n</code></pre></p>"},{"location":"content/p13/#ejemplo-4-aplicacion-web-simple-con-mockoon-playground","title":"Ejemplo 4: Aplicaci\u00f3n web simple con Mockoon Playground","text":"<p>Este ejemplo crea una p\u00e1gina web que usa <code>fetch</code> para obtener usuarios desde <code>https://playground.mockoon.com/users</code> y muestra los resultados en el DOM.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Interfaz con Mockoon Playground&lt;/title&gt;\n  &lt;style&gt;\n    body { font-family: Arial, sans-serif; padding: 20px; }\n    #resultado { margin-top: 20px; }\n    button { padding: 10px; margin: 5px; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Interfaz con Mockoon Playground&lt;/h1&gt;\n  &lt;button onclick=\"obtenerUsuarios()\"&gt;Obtener Usuarios&lt;/button&gt;\n  &lt;div id=\"resultado\"&gt;&lt;/div&gt;\n\n  &lt;script&gt;\n    async function obtenerUsuarios() {\n      try {\n        const respuesta = await fetch('https://playground.mockoon.com/users');\n        if (!respuesta.ok) {\n          throw new Error(`Error HTTP: ${respuesta.status}`);\n        }\n        const usuarios = await respuesta.json();\n        mostrarResultado('Usuarios:', usuarios);\n      } catch (error) {\n        mostrarResultado('Error:', error.message);\n      }\n    }\n\n    function mostrarResultado(titulo, datos) {\n      const resultadoDiv = document.getElementById('resultado');\n      resultadoDiv.innerHTML = `&lt;h2&gt;${titulo}&lt;/h2&gt;&lt;pre&gt;${JSON.stringify(datos, null, 2)}&lt;/pre&gt;`;\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Se crea una p\u00e1gina HTML con un bot\u00f3n para obtener usuarios desde <code>https://playground.mockoon.com/users</code>.</li> <li>La funci\u00f3n <code>obtenerUsuarios</code> usa <code>fetch</code> con async/await para realizar la solicitud.</li> <li>Los resultados o errores se muestran en el DOM usando la funci\u00f3n <code>mostrarResultado</code>.</li> <li>No se incluye un bot\u00f3n para POST debido a las limitaciones del endpoint.</li> </ul> <p>Instrucciones:</p> <ol> <li>Guarda el c\u00f3digo en un archivo <code>index.html</code>.</li> <li>Abre <code>index.html</code> en un navegador (puedes usar un servidor local como <code>Live Server</code> en VS Code para evitar problemas de CORS, aunque el endpoint de Mockoon Playground suele incluir headers CORS permisivos).</li> <li>Haz clic en el bot\u00f3n para ver la lista de usuarios.</li> </ol>"},{"location":"content/p13/#ejercicios-fetch-y-tabla-con-asyncawait","title":"Ejercicios Fetch y Tabla con Async/Await","text":""},{"location":"content/p13/#modelo-de-datos","title":"Modelo de Datos","text":"<pre><code>[\n  {\n    \"id\": 1,\n    \"name\": \"string\",\n    \"email\": \"string@domain.com\",\n    \"age\": 30\n  }\n]\n</code></pre>"},{"location":"content/p13/#ejercicio-1-cargar-usuarios-basicos","title":"Ejercicio 1: Cargar usuarios b\u00e1sicos","text":"<pre><code>&lt;table id=\"table1\"&gt;&lt;/table&gt;\n&lt;script&gt;\nasync function loadUsers1() {\n  try {\n    const res = await fetch('https://api.example.com/users');\n    const data = await res.json();\n    const table = document.getElementById('table1');\n    table.innerHTML = '&lt;tr&gt;&lt;th&gt;ID&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;/tr&gt;' +\n      data.map(user =&gt; `&lt;tr&gt;&lt;td&gt;${user.id}&lt;/td&gt;&lt;td&gt;${user.name}&lt;/td&gt;&lt;/tr&gt;`).join('');\n  } catch (err) {\n    console.error(err);\n  }\n}\nloadUsers1();\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p13/#ejercicio-2-mostrar-email-y-edad","title":"Ejercicio 2: Mostrar email y edad","text":"<pre><code>&lt;table id=\"table2\"&gt;&lt;/table&gt;\n&lt;script&gt;\nasync function loadUsers2() {\n  try {\n    const res = await fetch('https://api.example.com/users');\n    const data = await res.json();\n    const table = document.getElementById('table2');\n    table.innerHTML = '&lt;tr&gt;&lt;th&gt;Email&lt;/th&gt;&lt;th&gt;Age&lt;/th&gt;&lt;/tr&gt;' +\n      data.map(user =&gt; `&lt;tr&gt;&lt;td&gt;${user.email}&lt;/td&gt;&lt;td&gt;${user.age}&lt;/td&gt;&lt;/tr&gt;`).join('');\n  } catch (err) {\n    console.error(err);\n  }\n}\nloadUsers2();\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p13/#ejercicio-3-filtrar-mayores-de-25","title":"Ejercicio 3: Filtrar mayores de 25","text":"<pre><code>&lt;table id=\"table3\"&gt;&lt;/table&gt;\n&lt;script&gt;\nasync function loadUsers3() {\n  try {\n    const res = await fetch('https://api.example.com/users');\n    const data = await res.json();\n    const table = document.getElementById('table3');\n    table.innerHTML = '&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Age&lt;/th&gt;&lt;/tr&gt;' +\n      data\n        .filter(user =&gt; user.age &gt; 25)\n        .map(user =&gt; `&lt;tr&gt;&lt;td&gt;${user.name}&lt;/td&gt;&lt;td&gt;${user.age}&lt;/td&gt;&lt;/tr&gt;`).join('');\n  } catch (err) {\n    console.error(err);\n  }\n}\nloadUsers3();\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p13/#ejercicio-4-ordenar-por-nombre","title":"Ejercicio 4: Ordenar por nombre","text":"<pre><code>&lt;table id=\"table4\"&gt;&lt;/table&gt;\n&lt;script&gt;\nasync function loadUsers4() {\n  try {\n    const res = await fetch('https://api.example.com/users');\n    const data = await res.json();\n    const table = document.getElementById('table4');\n    table.innerHTML = '&lt;tr&gt;&lt;th&gt;ID&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;/tr&gt;' +\n      data\n        .sort((a, b) =&gt; a.name.localeCompare(b.name))\n        .map(user =&gt; `&lt;tr&gt;&lt;td&gt;${user.id}&lt;/td&gt;&lt;td&gt;${user.name}&lt;/td&gt;&lt;/tr&gt;`).join('');\n  } catch (err) {\n    console.error(err);\n  }\n}\nloadUsers4();\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p13/#ejercicio-5-manejo-de-errores","title":"Ejercicio 5: Manejo de errores","text":"<pre><code>&lt;table id=\"table5\"&gt;&lt;/table&gt;\n&lt;script&gt;\nasync function loadUsers5() {\n  try {\n    const res = await fetch('https://api.example.com/users');\n    const data = await res.json();\n    const table = document.getElementById('table5');\n    table.innerHTML = '&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Email&lt;/th&gt;&lt;/tr&gt;' +\n      data.map(user =&gt; `&lt;tr&gt;&lt;td&gt;${user.name}&lt;/td&gt;&lt;td&gt;${user.email}&lt;/td&gt;&lt;/tr&gt;`).join('');\n  } catch (err) {\n    document.getElementById('table5').innerHTML = '&lt;tr&gt;&lt;td&gt;Error loading data&lt;/td&gt;&lt;/tr&gt;';\n  }\n}\nloadUsers5();\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p13/#tutorial-manipulacion-de-tablas-html-con-javascript","title":"Tutorial: Manipulaci\u00f3n de Tablas HTML con JavaScript","text":"<p>Este tutorial cubre todas las formas de manipular una tabla HTML ya creada utilizando JavaScript. Se asume que tienes una tabla b\u00e1sica en tu HTML y deseas modificarla din\u00e1micamente. El tutorial est\u00e1 estructurado para ser claro y pr\u00e1ctico, con ejemplos de c\u00f3digo que puedes probar directamente.</p>"},{"location":"content/p13/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Las tablas HTML (<code>&lt;table&gt;</code>) son elementos comunes para mostrar datos estructurados. JavaScript permite manipular estas tablas din\u00e1micamente, lo que incluye agregar, eliminar o modificar filas, celdas, contenido, estilos y atributos. Este tutorial utiliza el DOM (Document Object Model) para realizar estas operaciones.</p>"},{"location":"content/p13/#2-estructura-html-base","title":"2. Estructura HTML Base","text":"<p>Para los ejemplos, usaremos la siguiente tabla HTML:</p> <pre><code>&lt;table id=\"miTabla\" border=\"1\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Nombre&lt;/th&gt;\n      &lt;th&gt;Edad&lt;/th&gt;\n      &lt;th&gt;Ciudad&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Juan&lt;/td&gt;\n      &lt;td&gt;25&lt;/td&gt;\n      &lt;td&gt;Madrid&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;Mar\u00eda&lt;/td&gt;\n      &lt;td&gt;30&lt;/td&gt;\n      &lt;td&gt;Barcelona&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <p>El atributo <code>id=\"miTabla\"</code> facilita la selecci\u00f3n de la tabla con JavaScript. Aseg\u00farate de incluir esta tabla en tu archivo HTML antes de ejecutar los scripts.</p>"},{"location":"content/p13/#3-seleccionar-una-tabla","title":"3. Seleccionar una Tabla","text":"<p>Para manipular una tabla, primero debes seleccionarla. Aqu\u00ed hay varias formas de hacerlo:</p> <pre><code>// Seleccionar por ID\nconst tabla = document.getElementById('miTabla');\n\n// Seleccionar por clase (si tiene class=\"tabla\")\nconst tablaPorClase = document.querySelector('.tabla');\n\n// Seleccionar todas las tablas\nconst todasLasTablas = document.getElementsByTagName('table');\n\n// Seleccionar la primera tabla\nconst primeraTabla = document.querySelector('table');\n</code></pre> <p>Nota: Usaremos <code>document.getElementById('miTabla')</code> en los ejemplos por simplicidad.</p>"},{"location":"content/p13/#4-manipular-filas","title":"4. Manipular Filas","text":"<p>Las filas de una tabla se representan con el elemento <code>&lt;tr&gt;</code>. Puedes agregar, eliminar o modificar filas en el <code>&lt;tbody&gt;</code> o <code>&lt;thead&gt;</code>.</p>"},{"location":"content/p13/#41-agregar-una-fila","title":"4.1 Agregar una Fila","text":"<p>Para agregar una fila al <code>&lt;tbody&gt;</code>:</p> <pre><code>const tabla = document.getElementById('miTabla');\nconst tbody = tabla.getElementsByTagName('tbody')[0];\nconst nuevaFila = tbody.insertRow(); // Inserta al final\n\n// Agregar celdas a la fila\nconst celda1 = nuevaFila.insertCell();\nconst celda2 = nuevaFila.insertCell();\nconst celda3 = nuevaFila.insertCell();\n\ncelda1.textContent = 'Pedro';\ncelda2.textContent = '28';\ncelda3.textContent = 'Sevilla';\n</code></pre> <p>Tambi\u00e9n puedes especificar el \u00edndice donde insertar la fila:</p> <pre><code>const nuevaFila = tbody.insertRow(0); // Inserta en la primera posici\u00f3n\n</code></pre>"},{"location":"content/p13/#42-eliminar-una-fila","title":"4.2 Eliminar una Fila","text":"<p>Para eliminar una fila espec\u00edfica:</p> <pre><code>const tabla = document.getElementById('miTabla');\nconst tbody = tabla.getElementsByTagName('tbody')[0];\ntbody.deleteRow(0); // Elimina la primera fila\n</code></pre> <p>Para eliminar todas las filas:</p> <pre><code>while (tbody.rows.length &gt; 0) {\n  tbody.deleteRow(0);\n}\n</code></pre>"},{"location":"content/p13/#43-modificar-una-fila","title":"4.3 Modificar una Fila","text":"<p>Para modificar el contenido de una fila existente:</p> <pre><code>const tabla = document.getElementById('miTabla');\nconst fila = tabla.rows[1]; // Segunda fila (\u00edndice 1)\nfila.cells[0].textContent = 'Ana'; // Cambia la primera celda\nfila.cells[1].textContent = '35';\nfila.cells[2].textContent = 'Valencia';\n</code></pre>"},{"location":"content/p13/#5-manipular-celdas","title":"5. Manipular Celdas","text":"<p>Las celdas se representan con <code>&lt;td&gt;</code> (o <code>&lt;th&gt;</code> en encabezados). Puedes manipularlas individualmente.</p>"},{"location":"content/p13/#51-agregar-una-celda","title":"5.1 Agregar una Celda","text":"<p>Para agregar una celda a una fila existente:</p> <pre><code>const tabla = document.getElementById('miTabla');\nconst fila = tabla.rows[1];\nconst nuevaCelda = fila.insertCell(); // Inserta al final\nnuevaCelda.textContent = 'Nueva Celda';\n</code></pre>"},{"location":"content/p13/#52-eliminar-una-celda","title":"5.2 Eliminar una Celda","text":"<p>Para eliminar una celda espec\u00edfica:</p> <pre><code>const tabla = document.getElementById('miTabla');\nconst fila = tabla.rows[1];\nfila.deleteCell(0); // Elimina la primera celda\n</code></pre>"},{"location":"content/p13/#53-modificar-una-celda","title":"5.3 Modificar una Celda","text":"<p>Para cambiar el contenido de una celda:</p> <pre><code>const tabla = document.getElementById('miTabla');\nconst celda = tabla.rows[1].cells[0];\ncelda.textContent = 'Modificado';\n</code></pre>"},{"location":"content/p13/#6-manipular-contenido-de-la-tabla","title":"6. Manipular Contenido de la Tabla","text":"<p>Adem\u00e1s de filas y celdas, puedes modificar el contenido, atributos y estilos de la tabla.</p>"},{"location":"content/p13/#61-cambiar-texto-o-html","title":"6.1 Cambiar Texto o HTML","text":"<p>Para cambiar el texto:</p> <pre><code>const celda = document.getElementById('miTabla').rows[1].cells[0];\ncelda.textContent = 'Nuevo Texto';\n</code></pre> <p>Para insertar HTML:</p> <pre><code>celda.innerHTML = '&lt;strong&gt;Texto en negrita&lt;/strong&gt;';\n</code></pre>"},{"location":"content/p13/#62-agregar-atributos","title":"6.2 Agregar Atributos","text":"<p>Para agregar o modificar atributos:</p> <pre><code>const tabla = document.getElementById('miTabla');\ntabla.setAttribute('class', 'tabla-estilizada');\ntabla.rows[1].cells[0].setAttribute('data-id', '123');\n</code></pre>"},{"location":"content/p13/#63-modificar-estilos","title":"6.3 Modificar Estilos","text":"<p>Para cambiar estilos con CSS:</p> <pre><code>const tabla = document.getElementById('miTabla');\ntabla.style.border = '2px solid blue';\ntabla.rows[1].cells[0].style.backgroundColor = 'yellow';\n</code></pre> <p>O usando clases CSS:</p> <pre><code>tabla.classList.add('borde-azul');\n</code></pre>"},{"location":"content/p13/#7-iterar-sobre-filas-y-celdas","title":"7. Iterar Sobre Filas y Celdas","text":"<p>Puedes recorrer todas las filas y celdas para realizar operaciones masivas:</p> <pre><code>const tabla = document.getElementById('miTabla');\nfor (let fila of tabla.rows) {\n  for (let celda of fila.cells) {\n    celda.style.backgroundColor = 'lightgray';\n  }\n}\n</code></pre>"},{"location":"content/p13/#8-manipular-encabezados-thead-y-cuerpo-tbody","title":"8. Manipular Encabezados (thead) y Cuerpo (tbody)","text":"<p>Para trabajar espec\u00edficamente con <code>&lt;thead&gt;</code> o <code>&lt;tbody&gt;</code>:</p> <pre><code>const tabla = document.getElementById('miTabla');\nconst thead = tabla.getElementsByTagName('thead')[0];\nconst tbody = tabla.getElementsByTagName('tbody')[0];\n\n// Agregar una fila al thead\nconst nuevaFilaThead = thead.insertRow();\nconst celdaThead = nuevaFilaThead.insertCell();\nceldaThead.textContent = 'Nuevo Encabezado';\n</code></pre>"},{"location":"content/p13/#9-ejemplo-completo","title":"9. Ejemplo Completo","text":"<p>Aqu\u00ed tienes un ejemplo completo que combina varias operaciones:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Manipulaci\u00f3n de Tablas&lt;/title&gt;\n  &lt;style&gt;\n    table { border-collapse: collapse; }\n    th, td { border: 1px solid black; padding: 8px; }\n    .resaltado { background-color: yellow; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;table id=\"miTabla\"&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;Nombre&lt;/th&gt;\n        &lt;th&gt;Edad&lt;/th&gt;\n        &lt;th&gt;Ciudad&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Juan&lt;/td&gt;\n        &lt;td&gt;25&lt;/td&gt;\n        &lt;td&gt;Madrid&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Mar\u00eda&lt;/td&gt;\n        &lt;td&gt;30&lt;/td&gt;\n        &lt;td&gt;Barcelona&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n\n  &lt;script&gt;\n    const tabla = document.getElementById('miTabla');\n    const tbody = tabla.getElementsByTagName('tbody')[0];\n\n    // Agregar una fila\n    const nuevaFila = tbody.insertRow();\n    nuevaFila.insertCell().textContent = 'Pedro';\n    nuevaFila.insertCell().textContent = '28';\n    nuevaFila.insertCell().textContent = 'Sevilla';\n\n    // Modificar una celda\n    tabla.rows[1].cells[0].textContent = 'Ana';\n\n    // Resaltar filas pares\n    for (let i = 0; i &lt; tbody.rows.length; i++) {\n      if (i % 2 === 0) {\n        tbody.rows[i].classList.add('resaltado');\n      }\n    }\n\n    // Eliminar la segunda fila\n    tbody.deleteRow(1);\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/p13/#actividad-consumo-de-la-api-de-peliculas-con-mockoon-playground-post-y-put-habilitados","title":"Actividad: Consumo de la API de Pel\u00edculas con Mockoon Playground (POST y PUT habilitados)","text":""},{"location":"content/p13/#introduccion_1","title":"Introducci\u00f3n","text":"<p>En esta actividad, practicar\u00e1s el uso de m\u00e9todos as\u00edncronos en JavaScript, espec\u00edficamente la API <code>fetch</code> y la sintaxis <code>async/await</code>, para interactuar con el endpoint p\u00fablico de Mockoon Playground en <code>https://playground.mockoon.com/movies</code>. Este endpoint devuelve una lista de pel\u00edculas en formato JSON y soporta solicitudes GET, POST y PUT, lo que permite realizar operaciones de lectura, creaci\u00f3n y actualizaci\u00f3n de pel\u00edculas.</p> <p>La actividad est\u00e1 dise\u00f1ada para reforzar tus habilidades en:</p> <ul> <li>Realizar solicitudes HTTP (GET, POST, PUT) usando <code>fetch</code>.</li> <li>Manejar respuestas as\u00edncronas con <code>async/await</code>.</li> <li>Procesar datos JSON y mostrarlos en una interfaz web.</li> <li>Implementar manejo de errores para escenarios como fallos de red o respuestas no exitosas.</li> </ul>"},{"location":"content/p13/#objetivos","title":"Objetivos","text":"<ol> <li>Realizar una solicitud GET al endpoint <code>https://playground.mockoon.com/movies</code> para obtener una lista de pel\u00edculas.</li> <li>Crear una nueva pel\u00edcula usando una solicitud POST con un objeto JSON proporcionado.</li> <li>Actualizar una pel\u00edcula existente usando una solicitud PUT.</li> <li>Crear una p\u00e1gina web que muestre la lista de pel\u00edculas en una tabla HTML y permita crear o actualizar pel\u00edculas.</li> <li>Implementar manejo de errores para mostrar mensajes al usuario en caso de fallos.</li> </ol>"},{"location":"content/p13/#requisitos-previos","title":"Requisitos previos","text":"<ul> <li>Conocimientos b\u00e1sicos de HTML, CSS y JavaScript.</li> <li>Comprensi\u00f3n de promesas y <code>async/await</code> en JavaScript.</li> <li>Un navegador web moderno (como Chrome o Firefox).</li> <li>Un editor de c\u00f3digo (como VS Code) y, opcionalmente, una extensi\u00f3n como Live Server para servir la p\u00e1gina HTML localmente.</li> </ul>"},{"location":"content/p13/#descripcion-del-endpoint","title":"Descripci\u00f3n del endpoint","text":"<p>El endpoint <code>https://playground.mockoon.com/movies</code> es un servicio p\u00fablico de Mockoon Playground que simula una API de pel\u00edculas. Sus caracter\u00edsticas son:</p> <ul> <li> <p>M\u00e9todo GET:</p> <ul> <li>URL: <code>https://playground.mockoon.com/movies</code></li> <li>Respuesta: Un arreglo de objetos JSON con informaci\u00f3n de pel\u00edculas, por ejemplo:   <pre><code>[\n  {\n    \"id\": 1,\n    \"title\": \"The Shawshank Redemption\",\n    \"year\": 1994,\n    \"director\": \"Frank Darabont\",\n    \"genre\": \"Drama\",\n    \"rating\": 9.3,\n    \"isPopular\": true\n  },\n  {\n    \"id\": 2,\n    \"title\": \"The Godfather\",\n    \"year\": 1972,\n    \"director\": \"Francis Ford Coppola\",\n    \"genre\": \"Crime\",\n    \"rating\": 9.2,\n    \"isPopular\": true\n  }\n]\n</code></pre></li> </ul> </li> <li> <p>M\u00e9todo POST:</p> <ul> <li>URL: <code>https://playground.mockoon.com/movies</code></li> <li>Cuerpo: Objeto JSON con los campos <code>title</code>, <code>year</code>, <code>director</code>, <code>genre</code>, <code>rating</code>, <code>isPopular</code>.</li> <li>Respuesta: Devuelve el objeto creado con un <code>id</code> asignado por la API.</li> </ul> </li> <li> <p>M\u00e9todo PUT:</p> <ul> <li>URL: <code>https://playground.mockoon.com/movies/:id</code> (por ejemplo, <code>https://playground.mockoon.com/movies/1</code>)</li> <li>Cuerpo: Objeto JSON con los campos a actualizar.</li> <li>Respuesta: Devuelve el objeto actualizado.</li> </ul> </li> <li> <p>Notas: El endpoint es p\u00fablico y soporta CORS, por lo que no requiere configuraci\u00f3n adicional para pruebas desde un navegador.</p> </li> </ul>"},{"location":"content/p13/#instrucciones","title":"Instrucciones","text":"<p>Sigue estos pasos para completar la actividad:</p> <ol> <li> <p>Crea la estructura HTML:</p> <ul> <li>Crea un archivo <code>index.html</code> con una interfaz que incluya:<ul> <li>Un bot\u00f3n para cargar la lista de pel\u00edculas (GET).</li> <li>Un formulario para crear una nueva pel\u00edcula (POST).</li> <li>Un formulario para actualizar una pel\u00edcula existente (PUT).</li> <li>Una tabla para mostrar las pel\u00edculas.</li> <li>Un \u00e1rea para mostrar mensajes de error.</li> </ul> </li> <li>A\u00f1ade estilos CSS para que la interfaz sea clara y legible.</li> </ul> </li> <li> <p>Implementa la l\u00f3gica JavaScript:</p> <ul> <li>Escribe funciones as\u00edncronas para:<ul> <li>Obtener la lista de pel\u00edculas (<code>GET</code>).</li> <li>Crear una nueva pel\u00edcula (<code>POST</code>) usando el objeto JSON corregido.</li> <li>Actualizar una pel\u00edcula existente (<code>PUT</code>).</li> </ul> </li> <li>Usa <code>fetch</code> con <code>async/await</code> y maneja errores con <code>try/catch</code>.</li> <li>Actualiza din\u00e1micamente la tabla con los resultados.</li> </ul> </li> <li> <p>Prueba la aplicaci\u00f3n:</p> <ul> <li>Abre <code>index.html</code> en un navegador (usa un servidor local si es necesario).</li> <li>Prueba cargar las pel\u00edculas, crear una nueva pel\u00edcula y actualizar una existente.</li> <li>Simula errores (por ejemplo, enviando un ID inv\u00e1lido en PUT) para verificar el manejo de errores.</li> </ul> </li> </ol>"},{"location":"content/p13/#plantilla-inicial","title":"Plantilla inicial","text":"<p>Aqu\u00ed tienes una plantilla inicial para <code>index.html</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Soluci\u00f3n: Gesti\u00f3n de Pel\u00edculas&lt;/title&gt;\n  &lt;style&gt;\n    body {\n      font-family: Arial, sans-serif;\n      padding: 20px;\n      max-width: 900px;\n      margin: 0 auto;\n    }\n    h1, h2 {\n      color: #333;\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      margin-top: 20px;\n    }\n    th, td {\n      border: 1px solid #ddd;\n      padding: 10px;\n      text-align: left;\n    }\n    th {\n      background-color: #f2f2f2;\n      cursor: pointer;\n    }\n    tr:nth-child(even) {\n      background-color: #f9f9f9;\n    }\n    #error, #exito {\n      margin-top: 10px;\n      padding: 10px;\n      border-radius: 5px;\n    }\n    #error {\n      color: red;\n      background-color: #ffe6e6;\n    }\n    #exito {\n      color: green;\n      background-color: #e6ffe6;\n    }\n    #loading {\n      color: #007bff;\n      font-weight: bold;\n      margin-top: 10px;\n    }\n    button, input[type=\"submit\"] {\n      padding: 10px 20px;\n      background-color: #007bff;\n      color: white;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      margin: 5px;\n    }\n    button:hover, input[type=\"submit\"]:hover {\n      background-color: #0056b3;\n    }\n    form {\n      margin: 20px 0;\n      padding: 15px;\n      background-color: #f8f8f8;\n      border-radius: 5px;\n    }\n    label {\n      display: block;\n      margin: 8px 0;\n    }\n    input[type=\"text\"], input[type=\"number\"] {\n      padding: 8px;\n      width: 100%;\n      max-width: 300px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n    }\n    input[type=\"checkbox\"] {\n      margin-left: 10px;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Gesti\u00f3n de Pel\u00edculas&lt;/h1&gt;\n  &lt;button onclick=\"cargarPeliculas()\"&gt;Cargar Pel\u00edculas&lt;/button&gt;\n  &lt;div id=\"loading\" style=\"display: none;\"&gt;Cargando...&lt;/div&gt;\n\n  &lt;h2&gt;Crear Nueva Pel\u00edcula&lt;/h2&gt;\n  &lt;form id=\"form-crear\" onsubmit=\"event.preventDefault(); crearPelicula();\"&gt;\n    &lt;label&gt;T\u00edtulo: &lt;input type=\"text\" id=\"crear-titulo\" required&gt;&lt;/label&gt;\n    &lt;label&gt;G\u00e9nero: &lt;input type=\"text\" id=\"crear-genero\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Director: &lt;input type=\"text\" id=\"crear-director\" required&gt;&lt;/label&gt;\n    &lt;label&gt;A\u00f1o: &lt;input type=\"number\" id=\"crear-anio\" min=\"1888\" max=\"2025\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Calificaci\u00f3n: &lt;input type=\"number\" id=\"crear-rating\" step=\"0.1\" min=\"0\" max=\"10\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Popular: &lt;input type=\"checkbox\" id=\"crear-popular\"&gt;&lt;/label&gt;\n    &lt;input type=\"submit\" value=\"Crear Pel\u00edcula\"&gt;\n  &lt;/form&gt;\n\n  &lt;h2&gt;Actualizar Pel\u00edcula&lt;/h2&gt;\n  &lt;form id=\"form-actualizar\" onsubmit=\"event.preventDefault(); actualizarPelicula();\"&gt;\n    &lt;label&gt;ID: &lt;input type=\"text\" id=\"actualizar-id\" required&gt;&lt;/label&gt;\n    &lt;label&gt;T\u00edtulo: &lt;input type=\"text\" id=\"actualizar-titulo\" required&gt;&lt;/label&gt;\n    &lt;label&gt;G\u00e9nero: &lt;input type=\"text\" id=\"actualizar-genero\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Director: &lt;input type=\"text\" id=\"actualizar-director\" required&gt;&lt;/label&gt;\n    &lt;label&gt;A\u00f1o: &lt;input type=\"number\" id=\"actualizar-anio\" min=\"1888\" max=\"2025\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Calificaci\u00f3n: &lt;input type=\"number\" id=\"actualizar-rating\" step=\"0.1\" min=\"0\" max=\"10\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Popular: &lt;input type=\"checkbox\" id=\"actualizar-popular\"&gt;&lt;/label&gt;\n    &lt;input type=\"submit\" value=\"Actualizar Pel\u00edcula\"&gt;\n  &lt;/form&gt;\n\n  &lt;table id=\"tabla-peliculas\"&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;ID&lt;/th&gt;\n        &lt;th&gt;T\u00edtulo&lt;/th&gt;\n        &lt;th&gt;G\u00e9nero&lt;/th&gt;\n        &lt;th&gt;Director&lt;/th&gt;\n        &lt;th&gt;A\u00f1o&lt;/th&gt;\n        &lt;th&gt;Calificaci\u00f3n&lt;/th&gt;\n        &lt;th&gt;Popular&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody id=\"cuerpo-tabla\"&gt;&lt;/tbody&gt;\n  &lt;/table&gt;\n  &lt;div id=\"exito\"&gt;&lt;/div&gt;\n  &lt;div id=\"error\"&gt;&lt;/div&gt;\n\n  &lt;script&gt;\n\n\n    // Cargar pel\u00edculas (GET)\n    async function cargarPeliculas() {\n\n    }\n\n    // Crear pel\u00edcula (POST)\n    async function crearPelicula() {\n\n    }\n\n    // Actualizar pel\u00edcula (PUT)\n    async function actualizarPelicula() {\n\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/p13/#solucion","title":"Soluci\u00f3n","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Soluci\u00f3n: Gesti\u00f3n de Pel\u00edculas&lt;/title&gt;\n  &lt;style&gt;\n    body {\n      font-family: Arial, sans-serif;\n      padding: 20px;\n      max-width: 900px;\n      margin: 0 auto;\n    }\n    h1, h2 {\n      color: #333;\n    }\n    table {\n      width: 100%;\n      border-collapse: collapse;\n      margin-top: 20px;\n    }\n    th, td {\n      border: 1px solid #ddd;\n      padding: 10px;\n      text-align: left;\n    }\n    th {\n      background-color: #f2f2f2;\n      cursor: pointer;\n    }\n    tr:nth-child(even) {\n      background-color: #f9f9f9;\n    }\n    #error, #exito {\n      margin-top: 10px;\n      padding: 10px;\n      border-radius: 5px;\n    }\n    #error {\n      color: red;\n      background-color: #ffe6e6;\n    }\n    #exito {\n      color: green;\n      background-color: #e6ffe6;\n    }\n    #loading {\n      color: #007bff;\n      font-weight: bold;\n      margin-top: 10px;\n    }\n    button, input[type=\"submit\"] {\n      padding: 10px 20px;\n      background-color: #007bff;\n      color: white;\n      border: none;\n      border-radius: 5px;\n      cursor: pointer;\n      margin: 5px;\n    }\n    button:hover, input[type=\"submit\"]:hover {\n      background-color: #0056b3;\n    }\n    form {\n      margin: 20px 0;\n      padding: 15px;\n      background-color: #f8f8f8;\n      border-radius: 5px;\n    }\n    label {\n      display: block;\n      margin: 8px 0;\n    }\n    input[type=\"text\"], input[type=\"number\"] {\n      padding: 8px;\n      width: 100%;\n      max-width: 300px;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n    }\n    input[type=\"checkbox\"] {\n      margin-left: 10px;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Gesti\u00f3n de Pel\u00edculas&lt;/h1&gt;\n  &lt;button onclick=\"cargarPeliculas()\"&gt;Cargar Pel\u00edculas&lt;/button&gt;\n  &lt;div id=\"loading\" style=\"display: none;\"&gt;Cargando...&lt;/div&gt;\n\n  &lt;h2&gt;Crear Nueva Pel\u00edcula&lt;/h2&gt;\n  &lt;form id=\"form-crear\" onsubmit=\"event.preventDefault(); crearPelicula();\"&gt;\n    &lt;label&gt;T\u00edtulo: &lt;input type=\"text\" id=\"crear-titulo\" required&gt;&lt;/label&gt;\n    &lt;label&gt;G\u00e9nero: &lt;input type=\"text\" id=\"crear-genero\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Director: &lt;input type=\"text\" id=\"crear-director\" required&gt;&lt;/label&gt;\n    &lt;label&gt;A\u00f1o: &lt;input type=\"number\" id=\"crear-anio\" min=\"1888\" max=\"2025\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Calificaci\u00f3n: &lt;input type=\"number\" id=\"crear-rating\" step=\"0.1\" min=\"0\" max=\"10\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Popular: &lt;input type=\"checkbox\" id=\"crear-popular\"&gt;&lt;/label&gt;\n    &lt;input type=\"submit\" value=\"Crear Pel\u00edcula\"&gt;\n  &lt;/form&gt;\n\n  &lt;h2&gt;Actualizar Pel\u00edcula&lt;/h2&gt;\n  &lt;form id=\"form-actualizar\" onsubmit=\"event.preventDefault(); actualizarPelicula();\"&gt;\n    &lt;label&gt;ID: &lt;input type=\"text\" id=\"actualizar-id\" required&gt;&lt;/label&gt;\n    &lt;label&gt;T\u00edtulo: &lt;input type=\"text\" id=\"actualizar-titulo\" required&gt;&lt;/label&gt;\n    &lt;label&gt;G\u00e9nero: &lt;input type=\"text\" id=\"actualizar-genero\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Director: &lt;input type=\"text\" id=\"actualizar-director\" required&gt;&lt;/label&gt;\n    &lt;label&gt;A\u00f1o: &lt;input type=\"number\" id=\"actualizar-anio\" min=\"1888\" max=\"2025\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Calificaci\u00f3n: &lt;input type=\"number\" id=\"actualizar-rating\" step=\"0.1\" min=\"0\" max=\"10\" required&gt;&lt;/label&gt;\n    &lt;label&gt;Popular: &lt;input type=\"checkbox\" id=\"actualizar-popular\"&gt;&lt;/label&gt;\n    &lt;input type=\"submit\" value=\"Actualizar Pel\u00edcula\"&gt;\n  &lt;/form&gt;\n\n  &lt;table id=\"tabla-peliculas\"&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;ID&lt;/th&gt;\n        &lt;th&gt;T\u00edtulo&lt;/th&gt;\n        &lt;th&gt;G\u00e9nero&lt;/th&gt;\n        &lt;th&gt;Director&lt;/th&gt;\n        &lt;th&gt;A\u00f1o&lt;/th&gt;\n        &lt;th&gt;Calificaci\u00f3n&lt;/th&gt;\n        &lt;th&gt;Popular&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody id=\"cuerpo-tabla\"&gt;&lt;/tbody&gt;\n  &lt;/table&gt;\n  &lt;div id=\"exito\"&gt;&lt;/div&gt;\n  &lt;div id=\"error\"&gt;&lt;/div&gt;\n\n  &lt;script&gt;\n    // Funci\u00f3n auxiliar para mostrar mensajes temporales\n    function mostrarMensaje(tipo, mensaje) {\n      const div = document.getElementById(tipo);\n      div.textContent = mensaje;\n      setTimeout(() =&gt; div.textContent = '', 5000);\n    }\n\n    // Cargar pel\u00edculas (GET)\n    async function cargarPeliculas() {\n      const tablaCuerpo = document.getElementById('cuerpo-tabla');\n      const errorDiv = document.getElementById('error');\n      const exitoDiv = document.getElementById('exito');\n      const loadingDiv = document.getElementById('loading');\n\n      tablaCuerpo.innerHTML = '';\n      errorDiv.textContent = '';\n      exitoDiv.textContent = '';\n      loadingDiv.style.display = 'block';\n\n      try {\n        const respuesta = await fetch('https://playground.mockoon.com/movies', {\n          method: 'GET',\n          headers: {\n            'Accept': 'application/json'\n          }\n        });\n        if (!respuesta.ok) {\n          throw new Error(`Error HTTP: ${respuesta.status}`);\n        }\n        const peliculas = await respuesta.json();\n        peliculas.forEach(pelicula =&gt; {\n          const fila = document.createElement('tr');\n          fila.innerHTML = `\n            &lt;td&gt;${pelicula.id}&lt;/td&gt;\n            &lt;td&gt;${pelicula.title}&lt;/td&gt;\n            &lt;td&gt;${pelicula.genre}&lt;/td&gt;\n            &lt;td&gt;${pelicula.director}&lt;/td&gt;\n            &lt;td&gt;${pelicula.year}&lt;/td&gt;\n            &lt;td&gt;${pelicula.rating}&lt;/td&gt;\n            &lt;td&gt;${pelicula.isPopular ? 'S\u00ed' : 'No'}&lt;/td&gt;\n          `;\n          tablaCuerpo.appendChild(fila);\n        });\n        mostrarMensaje('exito', 'Pel\u00edculas cargadas correctamente');\n      } catch (error) {\n        mostrarMensaje('error', `Error al cargar las pel\u00edculas: ${error.message}`);\n      } finally {\n        loadingDiv.style.display = 'none';\n      }\n    }\n\n    // Crear pel\u00edcula (POST)\n    async function crearPelicula() {\n      const tablaCuerpo = document.getElementById('cuerpo-tabla');\n      const errorDiv = document.getElementById('error');\n      const exitoDiv = document.getElementById('exito');\n      const loadingDiv = document.getElementById('loading');\n\n      errorDiv.textContent = '';\n      exitoDiv.textContent = '';\n      loadingDiv.style.display = 'block';\n\n      try {\n        const anio = parseInt(document.getElementById('crear-anio').value);\n        if (anio &lt; 1888 || anio &gt; 2025) {\n          throw new Error('El a\u00f1o debe estar entre 1888 y 2025');\n        }\n        const rating = parseFloat(document.getElementById('crear-rating').value);\n        if (rating &lt; 0 || rating &gt; 10) {\n          throw new Error('La calificaci\u00f3n debe estar entre 0 y 10');\n        }\n\n        const nuevaPelicula = {\n          title: document.getElementById('crear-titulo').value.trim(),\n          genre: document.getElementById('crear-genero').value.trim(),\n          director: document.getElementById('crear-director').value.trim(),\n          year: anio,\n          rating: rating,\n          isPopular: document.getElementById('crear-popular').checked\n        };\n\n        const respuesta = await fetch('https://playground.mockoon.com/movies', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify(nuevaPelicula)\n        });\n\n        if (!respuesta.ok) {\n          throw new Error(`Error HTTP: ${respuesta.status}`);\n        }\n\n        const peliculaCreada = await respuesta.json();\n        const fila = document.createElement('tr');\n        fila.innerHTML = `\n          &lt;td&gt;${peliculaCreada.id}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.title}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.genre}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.director}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.year}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.rating}&lt;/td&gt;\n          &lt;td&gt;${peliculaCreada.isPopular ? 'S\u00ed' : 'No'}&lt;/td&gt;\n        `;\n        tablaCuerpo.appendChild(fila);\n        document.getElementById('form-crear').reset();\n        mostrarMensaje('exito', 'Pel\u00edcula creada correctamente');\n      } catch (error) {\n        mostrarMensaje('error', `Error al crear la pel\u00edcula: ${error.message}`);\n      } finally {\n        loadingDiv.style.display = 'none';\n      }\n    }\n\n    // Actualizar pel\u00edcula (PUT)\n    async function actualizarPelicula() {\n      const tablaCuerpo = document.getElementById('cuerpo-tabla');\n      const errorDiv = document.getElementById('error');\n      const exitoDiv = document.getElementById('exito');\n      const loadingDiv = document.getElementById('loading');\n\n      errorDiv.textContent = '';\n      exitoDiv.textContent = '';\n      loadingDiv.style.display = 'block';\n\n      try {\n        const id = document.getElementById('actualizar-id').value.trim();\n        const anio = parseInt(document.getElementById('actualizar-anio').value);\n        if (anio &lt; 1888 || anio &gt; 2025) {\n          throw new Error('El a\u00f1o debe estar entre 1888 y 2025');\n        }\n        const rating = parseFloat(document.getElementById('actualizar-rating').value);\n        if (rating &lt; 0 || rating &gt; 10) {\n          throw new Error('La calificaci\u00f3n debe estar entre 0 y 10');\n        }\n\n        const peliculaActualizada = {\n          title: document.getElementById('actualizar-titulo').value.trim(),\n          genre: document.getElementById('actualizar-genero').value.trim(),\n          director: document.getElementById('actualizar-director').value.trim(),\n          year: anio,\n          rating: rating,\n          isPopular: document.getElementById('actualizar-popular').checked\n        };\n\n        const respuesta = await fetch(`https://playground.mockoon.com/movies/${id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify(peliculaActualizada)\n        });\n\n        if (!respuesta.ok) {\n          throw new Error(`Error HTTP: ${respuesta.status}`);\n        }\n\n        await cargarPeliculas(); // Recargar la lista para reflejar los cambios\n        document.getElementById('form-actualizar').reset();\n        mostrarMensaje('exito', 'Pel\u00edcula actualizada correctamente');\n      } catch (error) {\n        mostrarMensaje('error', `Error al actualizar la pel\u00edcula: ${error.message}`);\n      } finally {\n        loadingDiv.style.display = 'none';\n      }\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"content/p13/#tareas-a-completar","title":"Tareas a completar","text":"<ol> <li> <p>Implementa la funci\u00f3n <code>cargarPeliculas</code>:</p> <ul> <li>Usa <code>fetch</code> con <code>async/await</code> para obtener las pel\u00edculas de <code>https://playground.mockoon.com/movies</code>.</li> <li>Verifica que la respuesta sea exitosa (<code>response.ok</code>).</li> <li>Rellena la tabla con los datos obtenidos.</li> </ul> </li> <li> <p>Implementa la funci\u00f3n <code>crearPelicula</code>:</p> <ul> <li>Obt\u00e9n los datos del formulario de creaci\u00f3n.</li> <li>Env\u00eda una solicitud POST con el objeto JSON corregido.</li> <li>Actualiza la tabla con la nueva pel\u00edcula.</li> </ul> </li> <li> <p>Implementa la funci\u00f3n <code>actualizarPelicula</code>:</p> <ul> <li>Obt\u00e9n los datos del formulario de actualizaci\u00f3n, incluyendo el ID.</li> <li>Env\u00eda una solicitud PUT al endpoint <code>https://playground.mockoon.com/movies/:id</code>.</li> <li>Actualiza la tabla con los datos modificados.</li> </ul> </li> </ol>"},{"location":"content/p14/","title":"Semana 14 - Tutorial Completo sobre Eventos en JavaScript","text":""},{"location":"content/p14/#introduccion","title":"Introducci\u00f3n","text":"<p>Los eventos en JavaScript son acciones o sucesos que ocurren en una p\u00e1gina web, como un clic del rat\u00f3n, el desplazamiento de la p\u00e1gina, la pulsaci\u00f3n de una tecla o la carga de un documento. JavaScript permite detectar estos eventos y ejecutar c\u00f3digo en respuesta, lo que hace que las p\u00e1ginas web sean interactivas. Este tutorial cubre todo lo que necesitas saber sobre los eventos en JavaScript, desde los conceptos b\u00e1sicos hasta t\u00e9cnicas avanzadas, con ejemplos pr\u00e1cticos.</p>"},{"location":"content/p14/#que-son-los-eventos","title":"\u00bfQu\u00e9 son los eventos?","text":"<p>Un evento es una se\u00f1al que indica que algo ha sucedido en el sistema. Por ejemplo:</p> <ul> <li>El usuario hace clic en un bot\u00f3n (<code>click</code>).</li> <li>El usuario mueve el rat\u00f3n sobre un elemento (<code>mouseover</code>).</li> <li>Una p\u00e1gina termina de cargarse (<code>load</code>).</li> <li>Se pulsa una tecla en el teclado (<code>keydown</code>).</li> </ul> <p>Los eventos son gestionados por el modelo de eventos del DOM (Document Object Model), que permite a JavaScript interactuar con los elementos de una p\u00e1gina web. Cada evento est\u00e1 representado por un objeto <code>Event</code> que contiene informaci\u00f3n sobre lo que ocurri\u00f3.</p>"},{"location":"content/p14/#tipos-de-eventos","title":"Tipos de Eventos","text":"<p>Existen muchos tipos de eventos en JavaScript, organizados en categor\u00edas principales. A continuaci\u00f3n, se incluye un ejemplo pr\u00e1ctico para cada evento listado:</p>"},{"location":"content/p14/#1-eventos-de-raton","title":"1. Eventos de Rat\u00f3n","text":"<ul> <li> <p><code>click</code>: Se dispara cuando se hace clic en un elemento.   <pre><code>&lt;button id=\"botonClick\"&gt;Haz clic&lt;/button&gt;\n&lt;script&gt;\n  const botonClick = document.getElementById('botonClick');\n  botonClick.addEventListener('click', () =&gt; {\n    alert('\u00a1Bot\u00f3n clicado!');\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>dblclick</code>: Se dispara tras un doble clic.   <pre><code>&lt;div id=\"dobleClic\"&gt;Haz doble clic aqu\u00ed&lt;/div&gt;\n&lt;script&gt;\n  const dobleClic = document.getElementById('dobleClic');\n  dobleClic.addEventListener('dblclick', () =&gt; {\n    dobleClic.style.backgroundColor = 'lightblue';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>mousedown</code>: Cuando se presiona un bot\u00f3n del rat\u00f3n.   <pre><code>&lt;div id=\"mouseDown\"&gt;Presiona el rat\u00f3n&lt;/div&gt;\n&lt;script&gt;\n  const mouseDown = document.getElementById('mouseDown');\n  mouseDown.addEventListener('mousedown', () =&gt; {\n    mouseDown.textContent = '\u00a1Rat\u00f3n presionado!';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>mouseup</code>: Cuando se suelta un bot\u00f3n del rat\u00f3n.   <pre><code>&lt;div id=\"mouseUp\"&gt;Suelta el rat\u00f3n&lt;/div&gt;\n&lt;script&gt;\n  const mouseUp = document.getElementById('mouseUp');\n  mouseUp.addEventListener('mouseup', () =&gt; {\n    mouseUp.textContent = '\u00a1Rat\u00f3n soltado!';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>mousemove</code>: Cuando el rat\u00f3n se mueve sobre un elemento.   <pre><code>&lt;div id=\"mouseMove\" style=\"width: 200px; height: 200px; background: lightgray;\"&gt;Mueve el rat\u00f3n&lt;/div&gt;\n&lt;script&gt;\n  const mouseMove = document.getElementById('mouseMove');\n  mouseMove.addEventListener('mousemove', (e) =&gt; {\n    mouseMove.textContent = `X: ${e.clientX}, Y: ${e.clientY}`;\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>mouseenter</code>: Cuando el rat\u00f3n entra en un elemento.   <pre><code>&lt;div id=\"mouseEnter\" style=\"width: 100px; height: 100px; background: lightcoral;\"&gt;Entra con el rat\u00f3n&lt;/div&gt;\n&lt;script&gt;\n  const mouseEnter = document.getElementById('mouseEnter');\n  mouseEnter.addEventListener('mouseenter', () =&gt; {\n    mouseEnter.style.backgroundColor = 'lightgreen';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>mouseleave</code>: Cuando el rat\u00f3n sale de un elemento.   <pre><code>&lt;div id=\"mouseLeave\" style=\"width: 100px; height: 100px; background: lightgreen;\"&gt;Sale con el rat\u00f3n&lt;/div&gt;\n&lt;script&gt;\n  const mouseLeave = document.getElementById('mouseLeave');\n  mouseLeave.addEventListener('mouseleave', () =&gt; {\n    mouseLeave.style.backgroundColor = 'lightcoral';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> </ul>"},{"location":"content/p14/#2-eventos-de-teclado","title":"2. Eventos de Teclado","text":"<ul> <li> <p><code>keydown</code>: Cuando se presiona una tecla.   <pre><code>&lt;input id=\"keyDown\" type=\"text\" placeholder=\"Presiona una tecla\"&gt;\n&lt;script&gt;\n  const keyDown = document.getElementById('keyDown');\n  keyDown.addEventListener('keydown', (e) =&gt; {\n    console.log(`Tecla presionada: ${e.key}`);\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>keyup</code>: Cuando se suelta una tecla.   <pre><code>&lt;input id=\"keyUp\" type=\"text\" placeholder=\"Suelta una tecla\"&gt;\n&lt;script&gt;\n  const keyUp = document.getElementById('keyUp');\n  keyUp.addEventListener('keyup', (e) =&gt; {\n    console.log(`Tecla soltada: ${e.key}`);\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>keypress</code>: Cuando se presiona y suelta una tecla (en desuso, se recomienda usar <code>keydown</code>).   <pre><code>&lt;input id=\"keyPress\" type=\"text\" placeholder=\"Presiona una tecla\"&gt;\n&lt;script&gt;\n  const keyPress = document.getElementById('keyPress');\n  keyPress.addEventListener('keypress', (e) =&gt; {\n    console.log(`Tecla presionada y soltada: ${e.key}`);\n  });\n&lt;/script&gt;\n</code></pre></p> </li> </ul>"},{"location":"content/p14/#3-eventos-de-formulario","title":"3. Eventos de Formulario","text":"<ul> <li> <p><code>submit</code>: Cuando se env\u00eda un formulario.   <pre><code>&lt;form id=\"formSubmit\"&gt;\n  &lt;input type=\"text\" required&gt;\n  &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n&lt;script&gt;\n  const formSubmit = document.getElementById('formSubmit');\n  formSubmit.addEventListener('submit', (e) =&gt; {\n    e.preventDefault();\n    alert('Formulario enviado');\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>change</code>: Cuando cambia el valor de un elemento de formulario.   <pre><code>&lt;select id=\"selectChange\"&gt;\n  &lt;option value=\"1\"&gt;Opci\u00f3n 1&lt;/option&gt;\n  &lt;option value=\"2\"&gt;Opci\u00f3n 2&lt;/option&gt;\n&lt;/select&gt;\n&lt;script&gt;\n  const selectChange = document.getElementById('selectChange');\n  selectChange.addEventListener('change', (e) =&gt; {\n    console.log(`Valor seleccionado: ${e.target.value}`);\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>focus</code>: Cuando un elemento recibe el foco.   <pre><code>&lt;input id=\"inputFocus\" type=\"text\" placeholder=\"Haz foco aqu\u00ed\"&gt;\n&lt;script&gt;\n  const inputFocus = document.getElementById('inputFocus');\n  inputFocus.addEventListener('focus', () =&gt; {\n    inputFocus.style.backgroundColor = 'yellow';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>blur</code>: Cuando un elemento pierde el foco.   <pre><code>&lt;input id=\"inputBlur\" type=\"text\" placeholder=\"Pierde el foco\"&gt;\n&lt;script&gt;\n  const inputBlur = document.getElementById('inputBlur');\n  inputBlur.addEventListener('blur', () =&gt; {\n    inputBlur.style.backgroundColor = 'white';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> </ul>"},{"location":"content/p14/#4-eventos-de-ventana-y-documento","title":"4. Eventos de Ventana y Documento","text":"<ul> <li> <p><code>load</code>: Cuando la p\u00e1gina o un recurso termina de cargarse.   <pre><code>&lt;img id=\"imagenLoad\" src=\"https://via.placeholder.com/150\" alt=\"Imagen\"&gt;\n&lt;script&gt;\n  const imagenLoad = document.getElementById('imagenLoad');\n  imagenLoad.addEventListener('load', () =&gt; {\n    console.log('Imagen cargada correctamente');\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>resize</code>: Cuando se redimensiona la ventana del navegador.   <pre><code>&lt;div id=\"resizeInfo\"&gt;Redimensiona la ventana&lt;/div&gt;\n&lt;script&gt;\n  const resizeInfo = document.getElementById('resizeInfo');\n  window.addEventListener('resize', () =&gt; {\n    resizeInfo.textContent = `Tama\u00f1o ventana: ${window.innerWidth}x${window.innerHeight}`;\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>scroll</code>: Cuando el usuario desplaza la p\u00e1gina.   <pre><code>&lt;div style=\"height: 2000px;\"&gt;Despl\u00e1zate...&lt;/div&gt;\n&lt;script&gt;\n  window.addEventListener('scroll', () =&gt; {\n    console.log(`Posici\u00f3n de desplazamiento: ${window.scrollY}`);\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>unload</code>: Cuando la p\u00e1gina se cierra (poco usado).   <pre><code>&lt;script&gt;\n  window.addEventListener('unload', () =&gt; {\n    console.log('P\u00e1gina cerrada');\n  });\n&lt;/script&gt;\n</code></pre></p> </li> </ul>"},{"location":"content/p14/#5-eventos-tactiles-para-dispositivos-moviles","title":"5. Eventos T\u00e1ctiles (para dispositivos m\u00f3viles)","text":"<ul> <li> <p><code>touchstart</code>: Cuando se toca la pantalla.   <pre><code>&lt;div id=\"touchStart\" style=\"width: 200px; height: 200px; background: lightblue;\"&gt;Toca aqu\u00ed&lt;/div&gt;\n&lt;script&gt;\n  const touchStart = document.getElementById('touchStart');\n  touchStart.addEventListener('touchstart', () =&gt; {\n    touchStart.textContent = '\u00a1Pantalla tocada!';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>touchmove</code>: Cuando se mueve el dedo por la pantalla.   <pre><code>&lt;div id=\"touchMove\" style=\"width: 200px; height: 200px; background: lightyellow;\"&gt;Mueve el dedo&lt;/div&gt;\n&lt;script&gt;\n  const touchMove = document.getElementById('touchMove');\n  touchMove.addEventListener('touchmove', (e) =&gt; {\n    e.preventDefault();\n    touchMove.textContent = `Toque en X: ${e.touches[0].clientX}`;\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>touchend</code>: Cuando se levanta el dedo de la pantalla.   <pre><code>&lt;div id=\"touchEnd\" style=\"width: 200px; height: 200px; background: lightpink;\"&gt;Levanta el dedo&lt;/div&gt;\n&lt;script&gt;\n  const touchEnd = document.getElementById('touchEnd');\n  touchEnd.addEventListener('touchend', () =&gt; {\n    touchEnd.textContent = '\u00a1Toque terminado!';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> </ul>"},{"location":"content/p14/#6-otros-eventos","title":"6. Otros Eventos","text":"<ul> <li> <p><code>error</code>: Cuando ocurre un error (por ejemplo, al cargar una imagen).   <pre><code>&lt;img id=\"imagenError\" src=\"imagen_inexistente.jpg\" alt=\"Imagen rota\"&gt;\n&lt;script&gt;\n  const imagenError = document.getElementById('imagenError');\n  imagenError.addEventListener('error', () =&gt; {\n    console.log('Error al cargar la imagen');\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>drag</code>: Para eventos de arrastrar y soltar.   <pre><code>&lt;div id=\"dragElement\" draggable=\"true\" style=\"width: 100px; height: 100px; background: lightgray;\"&gt;Arrastra&lt;/div&gt;\n&lt;script&gt;\n  const dragElement = document.getElementById('dragElement');\n  dragElement.addEventListener('drag', () =&gt; {\n    console.log('Elemento siendo arrastrado');\n  });\n&lt;/script&gt;\n</code></pre></p> </li> <li> <p><code>animationend</code>: Cuando termina una animaci\u00f3n CSS.   <pre><code>&lt;style&gt;\n  @keyframes girar {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n  }\n  #animacion {\n    width: 100px;\n    height: 100px;\n    background: lightblue;\n    animation: girar 2s linear;\n  }\n&lt;/style&gt;\n&lt;div id=\"animacion\"&gt;&lt;/div&gt;\n&lt;script&gt;\n  const animacion = document.getElementById('animacion');\n  animacion.addEventListener('animationend', () =&gt; {\n    animacion.style.backgroundColor = 'lightgreen';\n  });\n&lt;/script&gt;\n</code></pre></p> </li> </ul> <p>Puedes consultar una lista completa en la Referencia de Eventos de MDN.</p>"},{"location":"content/p14/#como-manejar-eventos","title":"C\u00f3mo Manejar Eventos","text":"<p>Hay tres formas principales de asociar eventos a elementos en JavaScript:</p>"},{"location":"content/p14/#1-atributos-html-no-recomendado","title":"1. Atributos HTML (No recomendado)","text":"<p>Puedes agregar un manejador de eventos directamente en el HTML usando atributos como <code>onclick</code>. Este m\u00e9todo es simple pero desaconsejado porque mezcla la l\u00f3gica de JavaScript con el HTML, dificultando el mantenimiento.</p> <p>Ejemplo: <pre><code>&lt;button onclick=\"saludar()\"&gt;Saludar&lt;/button&gt;\n&lt;script&gt;\n  function saludar() {\n    alert('\u00a1Hola!');\n  }\n&lt;/script&gt;\n</code></pre></p>"},{"location":"content/p14/#2-propiedades-de-evento-en-javascript","title":"2. Propiedades de Evento en JavaScript","text":"<p>Puedes asignar una funci\u00f3n a una propiedad de evento de un elemento en JavaScript, como <code>element.onclick</code>. Este m\u00e9todo es mejor que los atributos HTML, pero solo permite asignar un manejador por evento.</p> <p>Ejemplo: <pre><code>&lt;button id=\"boton\"&gt;Saludar&lt;/button&gt;\n&lt;script&gt;\n  const boton = document.getElementById('boton');\n  boton.onclick = function() {\n    alert('\u00a1Hola!');\n  };\n&lt;/script&gt;\n</code></pre></p>"},{"location":"content/p14/#3-metodo-addeventlistener-recomendado","title":"3. M\u00e9todo <code>addEventListener</code> (Recomendado)","text":"<p>El m\u00e9todo <code>addEventListener</code> es la forma moderna y m\u00e1s flexible de manejar eventos. Permite agregar m\u00faltiples manejadores para el mismo evento y proporciona mejor control.</p> <p>Sintaxis: <pre><code>element.addEventListener('event', callback, options);\n</code></pre> - <code>event</code>: Nombre del evento (sin el prefijo <code>on</code>, por ejemplo, <code>click</code>). - <code>callback</code>: Funci\u00f3n que se ejecutar\u00e1 cuando ocurra el evento. - <code>options</code>: Objeto opcional con configuraciones (por ejemplo, <code>{ once: true }</code> para ejecutar el evento solo una vez).</p> <p>Ejemplo: <pre><code>&lt;button id=\"boton\"&gt;Saludar&lt;/button&gt;\n&lt;script&gt;\n  const boton = document.getElementById('boton');\n  boton.addEventListener('click', function() {\n    alert('\u00a1Hola!');\n  });\n&lt;/script&gt;\n</code></pre></p> <p>Ventajas de <code>addEventListener</code>: - Permite m\u00faltiples manejadores para un mismo evento. - Es m\u00e1s f\u00e1cil de mantener y depurar. - Soporta opciones avanzadas como captura de eventos o ejecuci\u00f3n \u00fanica.</p>"},{"location":"content/p14/#el-objeto-event","title":"El Objeto <code>Event</code>","text":"<p>Cada vez que ocurre un evento, JavaScript crea un objeto <code>Event</code> que contiene detalles sobre el evento. Este objeto se pasa autom\u00e1ticamente a la funci\u00f3n manejadora.</p> <p>Propiedades comunes del objeto <code>Event</code>:</p> <ul> <li><code>type</code>: Tipo de evento (por ejemplo, <code>click</code>).</li> <li><code>target</code>: Elemento que desencaden\u00f3 el evento.</li> <li><code>currentTarget</code>: Elemento al que est\u00e1 asociado el manejador.</li> <li><code>clientX</code>, <code>clientY</code>: Coordenadas del rat\u00f3n en la ventana.</li> <li><code>key</code>: Tecla presionada (para eventos de teclado).</li> <li><code>code</code>: C\u00f3digo f\u00edsico de la tecla (por ejemplo, <code>Enter</code>).</li> </ul> <p>Ejemplo: Mostrar informaci\u00f3n del evento <pre><code>&lt;button id=\"boton\"&gt;Haz clic&lt;/button&gt;\n&lt;script&gt;\n  const boton = document.getElementById('boton');\n  boton.addEventListener('click', function(evento) {\n    console.log('Tipo de evento:', evento.type);\n    console.log('Elemento objetivo:', evento.target);\n    console.log('Coordenadas X/Y:', evento.clientX, evento.clientY);\n  });\n&lt;/script&gt;\n</code></pre></p>"},{"location":"content/p14/#propagacion-de-eventos","title":"Propagaci\u00f3n de Eventos","text":"<p>Los eventos en el DOM siguen un flujo de propagaci\u00f3n con tres fases: 1. Captura: El evento desciende desde el elemento ra\u00edz (<code>document</code>) hasta el elemento objetivo. 2. Objetivo: El evento ocurre en el elemento objetivo. 3. Burbujeo: El evento asciende desde el elemento objetivo hasta el elemento ra\u00edz.</p> <p>Por defecto, los manejadores de eventos se ejecutan en la fase de burbujeo. Puedes cambiar esto usando el par\u00e1metro <code>options</code> en <code>addEventListener</code>:</p> <pre><code>element.addEventListener('click', callback, { capture: true });\n</code></pre> <p>Ejemplo de burbujeo: <pre><code>&lt;div id=\"padre\"&gt;\n  &lt;button id=\"hijo\"&gt;Clic aqu\u00ed&lt;/button&gt;\n&lt;/div&gt;\n&lt;script&gt;\n  const padre = document.getElementById('padre');\n  const hijo = document.getElementById('hijo');\n\n  padre.addEventListener('click', () =&gt; console.log('Clic en padre'));\n  hijo.addEventListener('click', () =&gt; console.log('Clic en hijo'));\n&lt;/script&gt;\n</code></pre> Al hacer clic en el bot\u00f3n, se ejecutan ambos manejadores (primero el del hijo, luego el del padre) debido al burbujeo.</p> <p>Detener la propagaci\u00f3n: Puedes usar <code>event.stopPropagation()</code> para evitar que el evento siga propag\u00e1ndose.</p> <pre><code>hijo.addEventListener('click', (evento) =&gt; {\n  console.log('Clic en hijo');\n  evento.stopPropagation();\n});\n</code></pre>"},{"location":"content/p14/#prevencion-de-comportamientos-predeterminados","title":"Prevenci\u00f3n de Comportamientos Predeterminados","text":"<p>Algunos eventos tienen comportamientos predeterminados, como el env\u00edo de un formulario o el clic en un enlace. Puedes prevenirlos usando <code>event.preventDefault()</code>.</p> <p>Ejemplo: Evitar el env\u00edo de un formulario <pre><code>&lt;form id=\"formulario\"&gt;\n  &lt;input type=\"text\" required&gt;\n  &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n&lt;script&gt;\n  const formulario = document.getElementById('formulario');\n  formulario.addEventListener('submit', (evento) =&gt; {\n    evento.preventDefault();\n    console.log('Formulario no enviado');\n  });\n&lt;/script&gt;\n</code></pre></p>"},{"location":"content/p14/#ejemplos-practicos","title":"Ejemplos Pr\u00e1cticos","text":""},{"location":"content/p14/#1-contador-de-clics","title":"1. Contador de Clics","text":"<p>Un bot\u00f3n que cuenta cu\u00e1ntas veces se ha hecho clic.</p> <pre><code>&lt;button id=\"boton\"&gt;Clics: &lt;span id=\"contador\"&gt;0&lt;/span&gt;&lt;/button&gt;\n&lt;script&gt;\n  const boton = document.getElementById('boton');\n  const contador = document.getElementById('contador');\n  let clics = 0;\n\n  boton.addEventListener('click', () =&gt; {\n    clics++;\n    contador.textContent = clics;\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p14/#2-detectar-tecla-enter","title":"2. Detectar Tecla Enter","text":"<p>Mostrar un mensaje cuando se presiona la tecla Enter en un campo de texto.</p> <pre><code>&lt;input id=\"campo\" type=\"text\" placeholder=\"Escribe y presiona Enter\"&gt;\n&lt;script&gt;\n  const campo = document.getElementById('campo');\n  campo.addEventListener('keydown', (evento) =&gt; {\n    if (evento.code === 'Enter') {\n      alert('Has presionado Enter: ' + campo.value);\n    }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p14/#3-cambiar-color-de-fondo-al-desplazar","title":"3. Cambiar Color de Fondo al Desplazar","text":"<p>Cambiar el color de fondo de la p\u00e1gina seg\u00fan la posici\u00f3n del desplazamiento.</p> <pre><code>&lt;div style=\"height: 2000px;\"&gt;Despl\u00e1zate...&lt;/div&gt;\n&lt;script&gt;\n  document.addEventListener('scroll', () =&gt; {\n    const posicion = window.scrollY;\n    document.body.style.backgroundColor = `rgb(${posicion % 255}, 100, 150)`;\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p14/#4-validacion-de-formulario","title":"4. Validaci\u00f3n de Formulario","text":"<p>Validar un formulario antes de enviarlo.</p> <pre><code>&lt;form id=\"formulario\"&gt;\n  &lt;input type=\"email\" id=\"email\" placeholder=\"Correo electr\u00f3nico\" required&gt;\n  &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n&lt;script&gt;\n  const formulario = document.getElementById('formulario');\n  const email = document.getElementById('email');\n\n  formulario.addEventListener('submit', (evento) =&gt; {\n    evento.preventDefault();\n    if (email.value.includes('@')) {\n      console.log('Correo v\u00e1lido:', email.value);\n    } else {\n      alert('Por favor, ingresa un correo v\u00e1lido.');\n    }\n  });\n&lt;/script&gt;\n</code></pre>"},{"location":"content/p14/#buenas-practicas","title":"Buenas Pr\u00e1cticas","text":"<ol> <li>Usa <code>addEventListener</code>: Es la forma m\u00e1s moderna y flexible de manejar eventos.</li> <li>Evita el c\u00f3digo en HTML: Separa la l\u00f3gica de JavaScript del HTML para mejorar la mantenibilidad.</li> <li>Limpia los manejadores: Usa <code>removeEventListener</code> para eliminar manejadores de eventos cuando ya no sean necesarios, especialmente en aplicaciones de una sola p\u00e1gina (SPA).</li> </ol> <pre><code>const manejador = () =&gt; console.log('Clic');\nboton.addEventListener('click', manejador);\n// M\u00e1s tarde...\nboton.removeEventListener('click', manejador);\n</code></pre> <ol> <li>Optimiza el rendimiento: Evita agregar demasiados manejadores de eventos. Usa delegaci\u00f3n de eventos para manejar eventos en elementos din\u00e1micos.</li> </ol> <p>Ejemplo de delegaci\u00f3n: <pre><code>&lt;ul id=\"lista\"&gt;\n  &lt;li&gt;Elemento 1&lt;/li&gt;\n  &lt;li&gt;Elemento 2&lt;/li&gt;\n&lt;/ul&gt;\n&lt;script&gt;\n  const lista = document.getElementById('lista');\n  lista.addEventListener('click', (evento) =&gt; {\n    if (evento.target.tagName === 'LI') {\n      console.log('Clic en:', evento.target.textContent);\n    }\n  });\n&lt;/script&gt;\n</code></pre></p> <ol> <li>Prueba en diferentes dispositivos: Aseg\u00farate de que los eventos t\u00e1ctiles y de rat\u00f3n funcionen correctamente en m\u00f3viles y escritorios.</li> <li>Usa nombres descriptivos: Nombra las funciones manejadoras de forma que indiquen su prop\u00f3sito, como <code>mane Vitality: manejarClicBoton</code> en lugar de <code>funcion</code>.</li> </ol>"},{"location":"content/p15/","title":"Semana 15 - Tutorial: Consumo de una API RESTful con HTML, CSS y JavaScript usando MockAPI.io","text":"<p>Este tutorial te guiar\u00e1 paso a paso para crear una interfaz web que consuma una API RESTful generada con MockAPI.io. Aprender\u00e1s a realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) sobre una entidad, utilizando HTML, CSS y JavaScript con la API Fetch. La interfaz ser\u00e1 responsiva, manejar\u00e1 errores y actualizar\u00e1 el DOM din\u00e1micamente. En este caso, usaremos una API de gesti\u00f3n de tareas como ejemplo.</p>"},{"location":"content/p15/#prerrequisitos","title":"Prerrequisitos","text":"<ul> <li>Conocimientos b\u00e1sicos de HTML, CSS y JavaScript.</li> <li>Acceso a un navegador web moderno.</li> <li>Una cuenta en MockAPI.io para crear una API simulada.</li> </ul>"},{"location":"content/p15/#paso-1-configurar-la-api-en-mockapiio","title":"Paso 1: Configurar la API en MockAPI.io","text":"<ol> <li> <p>Crea una cuenta:</p> <ul> <li>Visita MockAPI.io y reg\u00edstrate o inicia sesi\u00f3n.</li> </ul> </li> <li> <p>Crea un proyecto:</p> <ul> <li>Haz clic en \"New Project\" y n\u00f3mbralo, por ejemplo, \"TaskManager\".</li> </ul> </li> <li> <p>Define una entidad:</p> <ul> <li>Crea una nueva entidad llamada <code>tasks</code> con los siguientes campos:<ul> <li><code>id</code> (generado autom\u00e1ticamente por MockAPI).</li> <li><code>title</code> (tipo String, por ejemplo, \"Comprar v\u00edveres\").</li> <li><code>completed</code> (tipo Boolean, por ejemplo, false).</li> </ul> </li> <li>Opcional: Agrega un campo <code>category</code> (tipo String) para un ejemplo extendido.</li> </ul> </li> <li> <p>Genera datos de prueba:</p> <ul> <li>Usa la opci\u00f3n de MockAPI para generar datos de ejemplo (por ejemplo, 5 tareas).</li> </ul> </li> <li> <p>Obt\u00e9n la URL base de la API:</p> <ul> <li>MockAPI te proporcionar\u00e1 una URL base, como <code>https://&lt;project-id&gt;.mockapi.io/api/v1/tasks</code>. Gu\u00e1rdala, ya que la usar\u00e1s en el c\u00f3digo.</li> </ul> </li> </ol> <p>Endpoints disponibles:</p> <ul> <li><code>GET /tasks</code>: Obtiene todas las tareas.</li> <li><code>POST /tasks</code>: Crea una nueva tarea.</li> <li><code>PUT /tasks/:id</code>: Actualiza una tarea existente.</li> <li><code>DELETE /tasks/:id</code>: Elimina una tarea.</li> <li>Opcional: <code>GET /tasks?category=valor</code> para filtrar por categor\u00eda (si se incluye el campo <code>category</code>).</li> </ul>"},{"location":"content/p15/#paso-2-crear-la-estructura-html","title":"Paso 2: Crear la estructura HTML","text":"<p>Crea un archivo <code>index.html</code> con un formulario para agregar tareas y una lista para mostrarlas.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Gesti\u00f3n de Tareas con MockAPI&lt;/title&gt;\n  &lt;style&gt;\n    body {\n      font-family: Arial, sans-serif;\n      max-width: 800px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n    .form-container {\n      margin-bottom: 20px;\n    }\n    input, button {\n      padding: 8px;\n      margin: 5px;\n    }\n    .task-list {\n      list-style: none;\n      padding: 0;\n    }\n    .task-item {\n      border: 1px solid #ccc;\n      padding: 10px;\n      margin: 5px 0;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    .error {\n      color: red;\n    }\n    @media (max-width: 600px) {\n      input, button {\n        width: 100%;\n        box-sizing: border-box;\n      }\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Gesti\u00f3n de Tareas&lt;/h1&gt;\n  &lt;div class=\"form-container\"&gt;\n    &lt;input type=\"text\" id=\"taskTitle\" placeholder=\"T\u00edtulo de la tarea\" required&gt;\n    &lt;button onclick=\"crearTarea()\"&gt;Crear Tarea&lt;/button&gt;\n  &lt;/div&gt;\n  &lt;p id=\"mensaje\" class=\"error\"&gt;&lt;/p&gt;\n  &lt;ul id=\"taskList\" class=\"task-list\"&gt;&lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>HTML: Incluye un formulario con un campo de texto para el t\u00edtulo de la tarea y un bot\u00f3n para crearla. Una lista (<code>&lt;ul&gt;</code>) mostrar\u00e1 las tareas.</li> <li>CSS: Define un dise\u00f1o limpio y responsivo usando media queries para adaptarse a dispositivos m\u00f3viles.</li> </ul>"},{"location":"content/p15/#paso-3-implementar-el-consumo-de-la-api-con-javascript","title":"Paso 3: Implementar el consumo de la API con JavaScript","text":"<p>Agrega el siguiente script al final del <code>&lt;body&gt;</code> en <code>index.html</code> para consumir la API de MockAPI.io.</p> <pre><code>&lt;script&gt;\n  const API_URL = 'https://&lt;project-id&gt;.mockapi.io/api/v1/tasks'; // Reemplaza con tu URL de MockAPI\n  const taskList = document.getElementById('taskList');\n  const taskTitle = document.getElementById('taskTitle');\n  const mensaje = document.getElementById('mensaje');\n\n  // Cargar tareas al iniciar\n  cargarTareas();\n\n  // Funci\u00f3n para cargar y mostrar tareas\n  async function cargarTareas() {\n    try {\n      const response = await fetch(API_URL);\n      if (!response.ok) throw new Error('Error al cargar tareas');\n      const tareas = await response.json();\n      taskList.innerHTML = '';\n      tareas.forEach(tarea =&gt; {\n        const li = document.createElement('li');\n        li.className = 'task-item';\n        li.innerHTML = `\n          &lt;span&gt;${tarea.title} ${tarea.completed ? '(Completada)' : ''}&lt;/span&gt;\n          &lt;div&gt;\n            &lt;button onclick=\"editarTarea(${tarea.id}, '${tarea.title}', ${tarea.completed})\"&gt;Editar&lt;/button&gt;\n            &lt;button onclick=\"eliminarTarea(${tarea.id})\"&gt;Eliminar&lt;/button&gt;\n          &lt;/div&gt;\n        `;\n        taskList.appendChild(li);\n      });\n    } catch (error) {\n      mensaje.textContent = error.message;\n    }\n  }\n\n  // Funci\u00f3n para crear una tarea\n  async function crearTarea() {\n    const title = taskTitle.value.trim();\n    if (!title) {\n      mensaje.textContent = 'El t\u00edtulo es obligatorio';\n      return;\n    }\n    try {\n      const response = await fetch(API_URL, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ title, completed: false })\n      });\n      if (!response.ok) throw new Error('Error al crear tarea');\n      taskTitle.value = '';\n      mensaje.textContent = 'Tarea creada con \u00e9xito';\n      cargarTareas();\n    } catch (error) {\n      mensaje.textContent = error.message;\n    }\n  }\n\n  // Funci\u00f3n para editar una tarea\n  async function editarTarea(id, currentTitle, currentCompleted) {\n    const newTitle = prompt('Editar t\u00edtulo:', currentTitle);\n    const newCompleted = confirm('\u00bfLa tarea est\u00e1 completada?');\n    if (newTitle &amp;&amp; newTitle.trim()) {\n      try {\n        const response = await fetch(`${API_URL}/${id}`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ title: newTitle.trim(), completed: newCompleted })\n        });\n        if (!response.ok) throw new Error('Error al editar tarea');\n        mensaje.textContent = 'Tarea editada con \u00e9xito';\n        cargarTareas();\n      } catch (error) {\n        mensaje.textContent = error.message;\n      }\n    }\n  }\n\n  // Funci\u00f3n para eliminar una tarea\n  async function eliminarTarea(id) {\n    if (confirm('\u00bfSeguro que quieres eliminar esta tarea?')) {\n      try {\n        const response = await fetch(`${API_URL}/${id}`, {\n          method: 'DELETE'\n        });\n        if (!response.ok) throw new Error('Error al eliminar tarea');\n        mensaje.textContent = 'Tarea eliminada con \u00e9xito';\n        cargarTareas();\n      } catch (error) {\n        mensaje.textContent = error.message;\n      }\n    }\n  }\n&lt;/script&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>API_URL: Reemplaza <code>&lt;project-id&gt;</code> con el ID de tu proyecto en MockAPI.io.</li> <li>cargarTareas: Usa <code>GET /tasks</code> para obtener todas las tareas y las muestra din\u00e1micamente en el DOM.</li> <li>crearTarea: Valida el t\u00edtulo, env\u00eda un <code>POST /tasks</code> con el t\u00edtulo y <code>completed: false</code>.</li> <li>editarTarea: Usa <code>prompt</code> y <code>confirm</code> para actualizar el t\u00edtulo y el estado <code>completed</code>, enviando un <code>PUT /tasks/:id</code>.</li> <li>eliminarTarea: Confirma la eliminaci\u00f3n y env\u00eda un <code>DELETE /tasks/:id</code>.</li> <li>Manejo de errores: Usa <code>try-catch</code> para capturar errores y muestra mensajes al usuario.</li> </ul>"},{"location":"content/p15/#paso-4-probar-la-aplicacion","title":"Paso 4: Probar la aplicaci\u00f3n","text":"<ol> <li> <p>Ejecuta la aplicaci\u00f3n:</p> <ul> <li>Guarda el archivo <code>index.html</code> y \u00e1brelo en un navegador (puedes usar una extensi\u00f3n como Live Server en VS Code para un servidor local).</li> </ul> </li> <li> <p>Prueba las operaciones CRUD:</p> <ul> <li>Crear: Ingresa un t\u00edtulo y haz clic en \"Crear Tarea\".</li> <li>Leer: Verifica que las tareas se muestren en la lista al cargar la p\u00e1gina.</li> <li>Actualizar: Haz clic en \"Editar\" para modificar el t\u00edtulo o el estado de una tarea.</li> <li>Eliminar: Haz clic en \"Eliminar\" y confirma para borrar una tarea.</li> </ul> </li> <li> <p>Verifica en MockAPI:</p> <ul> <li>Accede al panel de MockAPI.io para confirmar que las tareas se crean, actualizan o eliminan en la base de datos simulada.</li> </ul> </li> </ol>"},{"location":"content/p15/#paso-5-agregar-funcionalidad-adicional-opcional","title":"Paso 5: Agregar funcionalidad adicional (Opcional)","text":"<p>Si tu API incluye un campo <code>category</code>, puedes extender la interfaz para filtrar tareas por categor\u00eda.</p> <ol> <li> <p>Modifica el HTML:    Agrega un <code>&lt;select&gt;</code> para seleccionar categor\u00edas:    <pre><code>&lt;div class=\"form-container\"&gt;\n  &lt;input type=\"text\" id=\"taskTitle\" placeholder=\"T\u00edtulo de la tarea\" required&gt;\n  &lt;select id=\"categorySelect\"&gt;\n    &lt;option value=\"\"&gt;Todas las categor\u00edas&lt;/option&gt;\n  &lt;/select&gt;\n  &lt;button onclick=\"crearTarea()\"&gt;Crear Tarea&lt;/button&gt;\n&lt;/div&gt;\n</code></pre></p> </li> <li> <p>Actualiza el JavaScript:    Agrega funciones para cargar categor\u00edas y filtrar tareas:    <pre><code>const categorySelect = document.getElementById('categorySelect');\n\n// Cargar categor\u00edas al iniciar\nasync function cargarCategorias() {\n  try {\n    const response = await fetch('https://&lt;project-id&gt;.mockapi.io/api/v1/categories');\n    if (!response.ok) throw new Error('Error al cargar categor\u00edas');\n    const categorias = await response.json();\n    categorias.forEach(categoria =&gt; {\n      const option = document.createElement('option');\n      option.value = categoria.name;\n      option.textContent = categoria.name;\n      categorySelect.appendChild(option);\n    });\n  } catch (error) {\n    mensaje.textContent = error.message;\n  }\n}\n\n// Modificar cargarTareas para filtrar por categor\u00eda\nasync function cargarTareas() {\n  const category = categorySelect.value;\n  const url = category ? `${API_URL}?category=${category}` : API_URL;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) throw new Error('Error al cargar tareas');\n    const tareas = await response.json();\n    taskList.innerHTML = '';\n    tareas.forEach(tarea =&gt; {\n      const li = document.createElement('li');\n      li.className = 'task-item';\n      li.innerHTML = `\n        &lt;span&gt;${tarea.title} (${tarea.category || 'Sin categor\u00eda'}) ${tarea.completed ? '(Completada)' : ''}&lt;/span&gt;\n        &lt;div&gt;\n          &lt;button onclick=\"editarTarea(${tarea.id}, '${tarea.title}', ${tarea.completed}, '${tarea.category || ''}')\"&gt;Editar&lt;/button&gt;\n          &lt;button onclick=\"eliminarTarea(${tarea.id})\"&gt;Eliminar&lt;/button&gt;\n        &lt;/div&gt;\n      `;\n      taskList.appendChild(li);\n    });\n  } catch (error) {\n    mensaje.textContent = error.message;\n  }\n}\n\n// Modificar crearTarea para incluir categor\u00eda\nasync function crearTarea() {\n  const title = taskTitle.value.trim();\n  const category = categorySelect.value || null;\n  if (!title) {\n    mensaje.textContent = 'El t\u00edtulo es obligatorio';\n    return;\n  }\n  try {\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ title, completed: false, category })\n    });\n    if (!response.ok) throw new Error('Error al crear tarea');\n    taskTitle.value = '';\n    mensaje.textContent = 'Tarea creada con \u00e9xito';\n    cargarTareas();\n  } catch (error) {\n    mensaje.textContent = error.message;\n  }\n}\n\n// Modificar editarTarea para incluir categor\u00eda\nasync function editarTarea(id, currentTitle, currentCompleted, currentCategory) {\n  const newTitle = prompt('Editar t\u00edtulo:', currentTitle);\n  const newCompleted = confirm('\u00bfLa tarea est\u00e1 completada?');\n  const newCategory = prompt('Editar categor\u00eda:', currentCategory);\n  if (newTitle &amp;&amp; newTitle.trim()) {\n    try {\n      const response = await fetch(`${API_URL}/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ title: newTitle.trim(), completed: newCompleted, category: newCategory || null })\n      });\n      if (!response.ok) throw new Error('Error al editar tarea');\n      mensaje.textContent = 'Tarea editada con \u00e9xito';\n      cargarTareas();\n    } catch (error) {\n      mensaje.textContent = error.message;\n    }\n  }\n}\n\n// Actualizar tareas al cambiar categor\u00eda\ncategorySelect.addEventListener('change', cargarTareas);\n\n// Cargar categor\u00edas al iniciar\ncargarCategorias();\n</code></pre></p> </li> <li> <p>Configura la entidad <code>categories</code> en MockAPI:</p> <ul> <li>Crea una entidad <code>categories</code> con un campo <code>name</code> (tipo String, por ejemplo, \"Trabajo\", \"Personal\").</li> <li>Genera datos de prueba para las categor\u00edas.</li> </ul> </li> </ol> <p>Explicaci\u00f3n:</p> <ul> <li>cargarCategorias: Obtiene las categor\u00edas desde <code>GET /categories</code> y llena el <code>&lt;select&gt;</code>.</li> <li>cargarTareas: Filtra tareas por categor\u00eda usando <code>GET /tasks?category=valor</code>.</li> <li>crearTarea y editarTarea: Incluyen el campo <code>category</code> en las solicitudes <code>POST</code> y <code>PUT</code>.</li> </ul>"},{"location":"content/p15/#paso-6-documentar-el-proyecto","title":"Paso 6: Documentar el proyecto","text":"<p>Crea un archivo <code>README.md</code> para documentar tu proyecto:</p>"},{"location":"content/p15/#gestion-de-tareas-con-mockapiio","title":"Gesti\u00f3n de Tareas con MockAPI.io","text":""},{"location":"content/p15/#descripcion","title":"Descripci\u00f3n","text":"<p>Una aplicaci\u00f3n web que consume una API RESTful creada con MockAPI.io para gestionar tareas. Permite realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) sobre tareas, con un dise\u00f1o responsivo y manejo de errores.</p>"},{"location":"content/p15/#requisitos","title":"Requisitos","text":"<ul> <li>Navegador web moderno.</li> <li>API configurada en MockAPI.io con la entidad <code>tasks</code> (campos: <code>id</code>, <code>title</code>, <code>completed</code>, opcional: <code>category</code>).</li> </ul>"},{"location":"content/p15/#como-ejecutar","title":"C\u00f3mo ejecutar","text":"<ol> <li>Clona este repositorio o copia el c\u00f3digo de <code>index.html</code>.</li> <li>Reemplaza <code>API_URL</code> en el script con la URL de tu proyecto en MockAPI.io.</li> <li>Abre <code>index.html</code> en un navegador (puedes usar un servidor local como Live Server).</li> </ol>"},{"location":"content/p15/#endpoints-consumidos","title":"Endpoints consumidos","text":"<ul> <li><code>GET /tasks</code>: Obtiene todas las tareas.</li> <li><code>POST /tasks</code>: Crea una nueva tarea.</li> <li><code>PUT /tasks/:id</code>: Actualiza una tarea.</li> <li><code>DELETE /tasks/:id</code>: Elimina una tarea.</li> <li>Opcional: <code>GET /tasks?category=valor</code> para filtrar por categor\u00eda.</li> <li>Opcional: <code>GET /categories</code> para obtener categor\u00edas.</li> </ul>"},{"location":"content/p15/#ejemplo-de-uso","title":"Ejemplo de uso","text":"<ol> <li>Ingresa un t\u00edtulo y selecciona una categor\u00eda (si aplica) para crear una tarea.</li> <li>La lista de tareas se actualiza autom\u00e1ticamente.</li> <li>Usa los botones \"Editar\" y \"Eliminar\" para modificar o borrar tareas.</li> <li>Filtra tareas por categor\u00eda usando el men\u00fa desplegable.</li> </ol>"},{"location":"content/p15/#dependencias","title":"Dependencias","text":"<ul> <li>Ninguna (usa la API Fetch nativa y CSS puro).</li> </ul>"},{"location":"content/p16/","title":"Semana 16 - Proyectos de ejemplo","text":"<p>Este repositorio contiene varios ejemplos peque\u00f1os (Ejemplo1..Ejemplo5) dise\u00f1ados para aprender y practicar frontend con HTML, TailwindCSS y JavaScript, usando MockAPI para simular un backend cuando aplica.</p> <p>Resumen de ejemplos y objetivos de aprendizaje</p> <ul> <li> <p>Ejemplo1: Demo b\u00e1sica (original)</p> <ul> <li>Contenido: <code>Ejemplo1/index.html</code>, <code>Ejemplo1/app.js</code>.</li> <li>Objetivo de aprendizaje: familiarizarse con la estructura b\u00e1sica de un proyecto web (HTML + JS), manipulaci\u00f3n del DOM y eventos.</li> <li>Notas: Buen punto de partida para entender c\u00f3mo est\u00e1n organizados los otros ejemplos.</li> </ul> </li> <li> <p>Ejemplo2: Tienda de Mascotas</p> <ul> <li>Contenido: <code>Ejemplo2/index.html</code>, <code>Ejemplo2/app.js</code>, <code>Ejemplo2/images/*</code>.</li> <li>Objetivo de aprendizaje: construir una UI con Tailwind, implementar un carrito simple (add/remove/total), y consumir una API externa (MockAPI) para cargar productos.</li> <li>Pr\u00e1cticas clave: plantillas DOM, manejo de estado simple, fetch API, manipulaci\u00f3n de arrays.</li> </ul> </li> <li> <p>Ejemplo3: Sistema de Citas</p> <ul> <li>Contenido: <code>Ejemplo3/index.html</code>, <code>Ejemplo3/app.js</code>, <code>Ejemplo3/README.md</code>.</li> <li>Objetivo: construir una peque\u00f1a app CRUD (crear, listar, editar, borrar citas) con formulario y MockAPI.</li> <li>Pr\u00e1cticas clave: formularios, validaciones b\u00e1sicas, uso de endpoints CRUD, UX m\u00ednimo (confirmaciones, mensajes).</li> </ul> </li> <li> <p>Ejemplo4: Recipe Box</p> <ul> <li>Contenido: <code>Ejemplo4/index.html</code>, <code>Ejemplo4/app.js</code>, <code>Ejemplo4/README.md</code>.</li> <li>Objetivo: gestionar un listado m\u00e1s avanzado con b\u00fasqueda y marcaci\u00f3n de favoritos; practicar el modelado de datos (ingredientes, pasos) y operaciones CRUD contra MockAPI.</li> <li>Pr\u00e1cticas clave: manejo de arrays complejos, b\u00fasqueda en frontend, toggles y UI responsiva con Tailwind.</li> </ul> </li> <li> <p>Ejemplo5: Habit Tracker</p> <ul> <li>Contenido: <code>Ejemplo5/index.html</code>, <code>Ejemplo5/app.js</code>, <code>Ejemplo5/README.md</code>.</li> <li>Objetivo: implementar seguimiento diario de h\u00e1bitos con vista semanal; practicar relaciones entre recursos (habits y completions) y l\u00f3gica de fechas.</li> <li>Pr\u00e1cticas clave: manejo de fechas, cliente-side filtering, dise\u00f1o de recursos REST simples en MockAPI.</li> </ul> </li> </ul> <p>C\u00f3mo ejecutar los ejemplos</p> <ol> <li>Abrir la carpeta del ejemplo (por ejemplo <code>Ejemplo2</code>) y editar el <code>README.md</code> o <code>app.js</code> seg\u00fan las instrucciones para configurar MockAPI si el ejemplo lo requiere.</li> <li>Abrir <code>index.html</code> en un navegador moderno.</li> <li>Si el ejemplo usa MockAPI, sigue los pasos del README del ejemplo para crear el recurso y pegar la URL en <code>app.js</code>.</li> </ol>"},{"location":"content/p16/#temas-y-conocimientos-de-javascript-aplicados","title":"Temas y conocimientos de JavaScript aplicados","text":"<p>Los ejemplos incluidos en este repositorio est\u00e1n pensados para ense\u00f1ar y practicar conceptos clave de JavaScript en contexto frontend. A continuaci\u00f3n se listan los temas principales, con una breve explicaci\u00f3n y en qu\u00e9 ejemplo(s) se aplican.</p> <ul> <li> <p>Manipulaci\u00f3n del DOM</p> <ul> <li>Qu\u00e9 es: seleccionar nodos, crear elementos, actualizar contenido y manejar clases/atributos.</li> <li>D\u00f3nde se usa: <code>Ejemplo1</code>, <code>Ejemplo2</code> (renderizado de productos y carrito), <code>Ejemplo3</code>, <code>Ejemplo4</code>, <code>Ejemplo5</code>.</li> </ul> </li> <li> <p>Eventos y manejo de formularios</p> <ul> <li>Qu\u00e9 es: escuchar eventos (<code>click</code>, <code>submit</code>, <code>input</code>), prevenir comportamientos por defecto, extraer valores de formularios.</li> <li>D\u00f3nde se usa: formularios de creaci\u00f3n/edici\u00f3n en <code>Ejemplo2</code>, <code>Ejemplo3</code>, <code>Ejemplo4</code> y <code>Ejemplo5</code>.</li> </ul> </li> <li> <p>Fetch API y operaciones CRUD (GET/POST/PUT/DELETE)</p> <ul> <li>Qu\u00e9 es: comunicarse con APIs remotas usando <code>fetch</code>, manejar respuestas JSON y errores de red.</li> <li>D\u00f3nde se usa: Todos los ejemplos que usan MockAPI (<code>Ejemplo2..Ejemplo5</code>).</li> <li>Buenas pr\u00e1cticas vistas: uso de async/await, control de errores con try/catch y mostrar mensajes de UI cuando falla la red.</li> </ul> </li> <li> <p>Manejo de estado en memoria</p> <ul> <li>Qu\u00e9 es: mantener estructuras (arrays/objetos) en memoria para representar productos, citas, recetas o h\u00e1bitos y sincronizarlas con la UI.</li> <li>D\u00f3nde se usa: <code>Ejemplo2</code> (lista de productos y carrito), <code>Ejemplo4</code> (lista y b\u00fasqueda), <code>Ejemplo5</code> (habits y completions).</li> </ul> </li> <li> <p>Arrays y m\u00e9todos funcionales</p> <ul> <li>Qu\u00e9 es: uso de <code>map</code>, <code>filter</code>, <code>reduce</code>, <code>find</code>, <code>findIndex</code> para transformar y consultar datos.</li> <li>D\u00f3nde se usa: filtrado/b\u00fasqueda en <code>Ejemplo4</code>, c\u00e1lculo de totales en <code>Ejemplo2</code> (reduce), manipulaci\u00f3n de listas en <code>Ejemplo3</code> y <code>Ejemplo5</code>.</li> </ul> </li> <li> <p>Validaciones y UX b\u00e1sica</p> <ul> <li>Qu\u00e9 es: validar campos requeridos, tipos (n\u00fameros/fechas), mostrar mensajes y confirmaciones (<code>confirm</code>, mensajes en DOM).</li> <li>D\u00f3nde se usa: formularios en <code>Ejemplo2</code> y <code>Ejemplo3</code>.</li> </ul> </li> <li> <p>Fechas y l\u00f3gica temporal</p> <ul> <li>Qu\u00e9 es: crear, comparar y formatear fechas; navegar por semanas; normalizar zonas horarias en el cliente.</li> <li>D\u00f3nde se usa: vista semanal y gesti\u00f3n de completions en <code>Ejemplo5</code>.</li> </ul> </li> <li> <p>Manejo de im\u00e1genes externas y URLs</p> <ul> <li>Qu\u00e9 es: trabajar con URLs de im\u00e1genes (remotas), validarlas y mostrarlas en la UI; soporte para placeholders cuando fallan.</li> <li>D\u00f3nde se usa: <code>Ejemplo2</code> (im\u00e1genes de mascotas) y <code>Ejemplo4</code> (recetas con im\u00e1genes).</li> </ul> </li> <li> <p>Operaciones as\u00edncronas y UX de carga</p> <ul> <li>Qu\u00e9 es: indicar estados de carga (loading), deshabilitar botones durante peticiones y actualizar la UI despu\u00e9s de recibir respuesta.</li> <li>D\u00f3nde se usa: en las llamadas a MockAPI en <code>Ejemplo2..Ejemplo5</code>.</li> </ul> </li> <li> <p>Patrones de CRUD en cliente ligero</p> <ul> <li>Qu\u00e9 es: formularios que alternan entre modo crear/editar, uso de id para identificar recursos, confirmaciones para borrado.</li> <li>D\u00f3nde se usa: <code>Ejemplo2</code>, <code>Ejemplo3</code>, <code>Ejemplo4</code>.</li> </ul> </li> <li> <p>Relaciones entre recursos y normalizaci\u00f3n simple</p> <ul> <li>Qu\u00e9 es: mantener relaciones (por ejemplo: <code>habits</code> y <code>completions</code>) y consultar/componer datos entre recursos relacionados.</li> <li>D\u00f3nde se usa: <code>Ejemplo5</code>.</li> </ul> </li> <li> <p>Manejo de errores y mensajes para el usuario</p> <ul> <li>Qu\u00e9 es: capturar errores de red y del servidor, y mostrar mensajes \u00fatiles al usuario en la UI.</li> <li>D\u00f3nde se usa: en todos los ejemplos que usan MockAPI.</li> </ul> </li> </ul>"},{"location":"content/p16/#repositorio","title":"Repositorio","text":"<pre><code>https://github.com/jfinfocesde/web1_ejemplos_pi.git\n</code></pre>"},{"location":"content/p17/","title":"Semana 17 - CRITERIOS DE EVALUACI\u00d3N DEL PROYECTO INTEGRADOR","text":"<ul> <li>La exposici\u00f3n del proyecto ser\u00e1 grabada en audio para su evaluaci\u00f3n.</li> <li>El archivo de audio de la exposici\u00f3n se almacenar\u00e1 como evidencia.</li> <li>La presentaci\u00f3n del proyecto debe incluir una serie de diapositivas que complementen la exposici\u00f3n oral.</li> <li>Es obligatorio cumplir estrictamente con los criterios establecidos, el tiempo asignado y las indicaciones para la presentaci\u00f3n de diapositivas.</li> <li>La evaluaci\u00f3n ser\u00e1 realizada con inteligencia artificial.</li> </ul>"},{"location":"content/p17/#criterios","title":"Criterios:","text":""},{"location":"content/p17/#1-presentacion-individual","title":"1. Presentaci\u00f3n Individual","text":"<p>Cada integrante presenta su rol y contribuci\u00f3n espec\u00edfica (desarrollo, dise\u00f1o, testing) en el proyecto, con claridad y concisi\u00f3n, destacando su impacto.  </p>"},{"location":"content/p17/#2-proposito-y-objetivos","title":"2. Prop\u00f3sito y Objetivos","text":"<p>Explicar claramente el prop\u00f3sito y los objetivos generales/espec\u00edficos del proyecto, resaltando su relevancia y valor de forma estructurada.  </p>"},{"location":"content/p17/#3-demostracion-en-vivo","title":"3. Demostraci\u00f3n en Vivo","text":"<p>Mostrar interactivamente la aplicaci\u00f3n web en Vanilla JS, explicando su funcionalidad, flujo de usuario y casos de uso reales de forma din\u00e1mica.  </p>"},{"location":"content/p17/#4-arquitectura-y-codigo","title":"4. Arquitectura y C\u00f3digo","text":"<p>Detallar arquitectura y c\u00f3digo en HTML, CSS, JS, mostrando uso de estructuras de control, arrays, DOM, asincron\u00eda y fetch, con ejemplos y su prop\u00f3sito.  </p>"},{"location":"content/p17/#5-tecnologias-utilizadas","title":"5. Tecnolog\u00edas Utilizadas","text":"<p>Describir tecnolog\u00edas (HTML, CSS, JS, otras), su prop\u00f3sito y justificaci\u00f3n de uso frente a alternativas, destacando su rol en el proyecto.  </p>"},{"location":"content/p17/#6-conclusiones-y-reflexiones","title":"6. Conclusiones y Reflexiones","text":"<p>Resumir logros, dificultades superadas y aprendizajes del proyecto, reflexionando sobre el proceso y lecciones para futuros desarrollos.  </p>"},{"location":"content/p17/#7-participacion-y-fluidez","title":"7. Participaci\u00f3n y Fluidez","text":"<p>Evaluar claridad, confianza y conocimiento de cada integrante al explicar su rol y el proyecto, asegurando una exposici\u00f3n fluida y equitativa.  </p>"},{"location":"content/p17/#8-duracion-de-exposicion","title":"8. Duraci\u00f3n de Exposici\u00f3n","text":"<p>Presentaci\u00f3n de m\u00ednimo 30 minutos, distribuyendo tiempo equitativamente para cubrir todos los puntos con estructura y profundidad adecuada.  </p>"},{"location":"content/p17/#instrucciones-para-la-presentacion-del-proyecto-integrador","title":"Instrucciones para la presentaci\u00f3n del proyecto integrador:","text":"<ul> <li>Asistencia obligatoria de todos los participantes durante toda la jornada acad\u00e9mica.</li> <li>Subir la presentaci\u00f3n a la carpeta compartida de Google Drive con antelaci\u00f3n.</li> <li>Cumplir estrictamente con el horario de presentaci\u00f3n.</li> <li>La no participaci\u00f3n en el horario asignado implicar\u00e1 una exposici\u00f3n individual de recuperaci\u00f3n en la semana 18.</li> <li>La presentacion debe grabarse en audio para su evaluaci\u00f3n y el archivo de audio se almacenar\u00e1 como evidencia.</li> </ul>"},{"location":"content/p17/#horario-de-presentacion-del-proyecto-integrador","title":"Horario de presentaci\u00f3n del proyecto integrador.","text":"GRUPO PROYECTO NOMBRES APELLIDOS DESDE HASTA 1 NEXUS ADMISIONES Y REGISTRO ANA MARIA ZAPATA PINILLOS 6:20 6:40 1 NEXUS ADMISIONES Y REGISTRO ANA MARCELA GALLEGO GOMEZ 6:20 6:40 1 NEXUS ADMISIONES Y REGISTRO MIGUEL ANGEL MU\u00d1OZ LOPEZ 6:20 6:40 1 NEXUS ADMISIONES Y REGISTRO DAVID QUIROZ GONZALEZ 6:20 6:40 2 SGB HUB - SISTEMA DE GESTI\u00d3N DE BECAS V\u00cdCTOR ALEJANDRO BERR\u00cdO RIVERA 6:45 7:05 2 SGB HUB - SISTEMA DE GESTI\u00d3N DE BECAS SANDRA MILENA GONZ\u00c1LEZ 6:45 7:05 2 SGB HUB - SISTEMA DE GESTI\u00d3N DE BECAS LIZETH BIBIAN MAR\u00cdN 6:45 7:05 2 SGB HUB - SISTEMA DE GESTI\u00d3N DE BECAS JOHN JAIRO BELTR\u00c1N 6:45 7:05 3 AGENDA IRWIN COLMENAREZ CASTILLO 7:10 7:30 3 AGENDA PAULA ANDREA GIL VARGAS 7:10 7:30 3 AGENDA CARLOS ANDRES MARTINEZ CARVAJAL 7:10 7:30 3 AGENDA ESTIBEN ARLEY MANCO SUAREZ 7:10 7:30 4 BIBLIOTECA VIRTUAL LUENYI LORENA MEJIA 7:35 7:45 4 BIBLIOTECA VIRTUAL ESTEFANIA CATANO 7:35 7:45 4 BIBLIOTECA VIRTUAL ESTEBAN GARCES 7:35 7:45 4 BIBLIOTECA VIRTUAL CAROLINA BOLIVAR 7:35 7:45 4 BIBLIOTECA VIRTUAL CRISTIAN TOVAR MANJARREZ 7:35 7:45 5 V\u00daLCANO//GAMIFICACI\u00d3N EDUCATIVA ROQUE JULIO ALDANA RINC\u00d3N 7:50 8:10 5 V\u00daLCANO//GAMIFICACI\u00d3N EDUCATIVA MARIO ALONSO MUNERA VELEZ 7:50 8:10 5 V\u00daLCANO//GAMIFICACI\u00d3N EDUCATIVA JULIO EDUARDO CORREA CARABALLO 7:50 8:10 5 V\u00daLCANO//GAMIFICACI\u00d3N EDUCATIVA SERGIO ANDRES MONTOYA MONSALVE 7:50 8:10 5 V\u00daLCANO//GAMIFICACI\u00d3N EDUCATIVA ALBANY ANMABEL LUCIANI MUJICA 7:50 8:10 6 SISTEMA DE NOTAS YULY MARCELA SEPULVEDA SEPULVEDA 8:15 8:35 6 SISTEMA DE NOTAS MARIANA RIVERA PEREZ 8:15 8:35 6 SISTEMA DE NOTAS FELIPE QUINTERO 8:15 8:35 7 REPOSITORIO ESTUDIANTIL (STUDENTSREPO) MARIANA SUAREZ ECHEVERRI 8:40 9:00 7 REPOSITORIO ESTUDIANTIL (STUDENTSREPO) VALENTINA OSORNO CADAVID 8:40 9:00 7 REPOSITORIO ESTUDIANTIL (STUDENTSREPO) VIADIS CORREA GALEANO 8:40 9:00"},{"location":"content/p18/","title":"Semana 18","text":""},{"location":"content/p2/","title":"Semana 2 - Condicionales en JavaScript","text":"<p>Gu\u00eda completa y detallada con <code>if</code>, <code>else</code>, <code>else if</code> y <code>switch</code></p>"},{"location":"content/p2/#que-es-un-condicional","title":"\u00bfQu\u00e9 es un condicional?","text":"<p>Un condicional es una estructura que permite ejecutar distintos bloques de c\u00f3digo dependiendo de si una expresi\u00f3n es verdadera o falsa. En JavaScript existen varias formas de implementar condicionales:</p> <ul> <li><code>if</code></li> <li><code>else</code></li> <li><code>else if</code></li> <li><code>switch</code></li> </ul>"},{"location":"content/p2/#1-sentencia-if","title":"1. Sentencia <code>if</code>","text":"<p>Se utiliza para ejecutar un bloque de c\u00f3digo solo si la condici\u00f3n es verdadera (<code>true</code>).</p> <p>Sintaxis b\u00e1sica</p> <pre><code>if (condici\u00f3n) {\n    // c\u00f3digo que se ejecuta si la condici\u00f3n es verdadera\n}\n</code></pre> <p>Ejemplo</p> <pre><code>const edad = 18;\n\nif (edad &gt;= 18) {\n    console.log(\"Eres mayor de edad\");\n}\n</code></pre>"},{"location":"content/p2/#2-sentencia-else","title":"2. Sentencia <code>else</code>","text":"<p>Se usa junto con <code>if</code> para ejecutar un bloque alternativo cuando la condici\u00f3n es falsa.</p> <p>Sintaxis</p> <pre><code>if (condici\u00f3n) {\n    // c\u00f3digo si es verdadero\n} else {\n    // c\u00f3digo si es falso\n}\n</code></pre> <p>Ejemplo</p> <pre><code>const edad = 16;\n\nif (edad &gt;= 18) {\n    console.log(\"Eres mayor de edad\");\n} else {\n    console.log(\"Eres menor de edad\");\n}\n</code></pre>"},{"location":"content/p2/#3-multiples-condiciones-con-else-if","title":"3. M\u00faltiples condiciones con <code>else if</code>","text":"<p>Permite evaluar m\u00faltiples condiciones en secuencia.</p> <p>Orden de evaluaci\u00f3n</p> <p>JavaScript eval\u00faa los <code>else if</code> en orden descendente. Tan pronto encuentra una condici\u00f3n verdadera, no eval\u00faa las siguientes.</p> <p>Sintaxis</p> <pre><code>if (condici\u00f3n1) {\n    // codigo\n} else if (condici\u00f3n2) {\n    // codigo\n} else if (condici\u00f3n3) {\n    // codigo\n} else {\n    // codigo por defecto\n}\n</code></pre> <p>Ejemplo completo</p> <pre><code>const nota = 75;\n\nif (nota &gt;= 90) {\n    console.log(\"Excelente (A)\");\n} else if (nota &gt;= 80) {\n    console.log(\"Muy bien (B)\");\n} else if (nota &gt;= 70) {\n    console.log(\"Bien (C)\");\n} else if (nota &gt;= 60) {\n    console.log(\"Suficiente (D)\");\n} else {\n    console.log(\"Reprobado (F)\");\n}\n</code></pre>"},{"location":"content/p2/#4-condicional-ternario-bonus","title":"4. Condicional ternario (bonus)","text":"<p>Es una forma abreviada de hacer <code>if/else</code> en una sola l\u00ednea.</p> <p>Sintaxis</p> <pre><code>condici\u00f3n ? valorSiVerdadero : valorSiFalso;\n</code></pre> <p>Ejemplo</p> <pre><code>const edad = 20;\nconst mensaje = edad &gt;= 18 ? \"Mayor\" : \"Menor\";\nconsole.log(mensaje); // Mayor\n</code></pre>"},{"location":"content/p2/#5-estructura-switch","title":"5. Estructura <code>switch</code>","text":"<p>Se usa cuando necesitas comparar una variable contra m\u00faltiples valores exactos.</p> <p>Sintaxis</p> <pre><code>switch (expresi\u00f3n) {\n    case valor1:\n        // c\u00f3digo\n        break;\n    case valor2:\n        // c\u00f3digo\n        break;\n    default:\n        // c\u00f3digo por defecto\n}\n</code></pre> <p>Importancia de <code>break</code></p> <p>Si omites <code>break</code>, el c\u00f3digo continuar\u00e1 ejecutando los siguientes casos (comportamiento fall-through).</p> <p>Ejemplo</p> <pre><code>const dia = 3;\nlet nombreDia;\n\nswitch (dia) {\n    case 1:\n        nombreDia = \"Lunes\";\n        break;\n    case 2:\n        nombreDia = \"Martes\";\n        break;\n    case 3:\n        nombreDia = \"Mi\u00e9rcoles\";\n        break;\n    case 4:\n        nombreDia = \"Jueves\";\n        break;\n    case 5:\n        nombreDia = \"Viernes\";\n        break;\n    default:\n        nombreDia = \"Fin de semana\";\n}\n\nconsole.log(nombreDia); // Mi\u00e9rcoles\n</code></pre>"},{"location":"content/p2/#6-comparacion-if-vs-switch","title":"6. Comparaci\u00f3n if vs switch","text":"Caracter\u00edstica <code>if/else if/else</code> <code>switch</code> Evaluaci\u00f3n Expresiones booleanas Valores exactos Rango de valores Permite rangos (&gt;=, &lt;=) Solo valores exactos Legibilidad Menos claro con muchos M\u00e1s claro para muchos casos Rendimiento Similar en la mayor\u00eda Similar en la mayor\u00eda"},{"location":"content/p2/#7-buenas-practicas","title":"7. Buenas pr\u00e1cticas","text":"<ol> <li>Evita anidar demasiados <code>if</code>: Considera usar <code>switch</code> o funciones separadas.</li> <li>Usa nombres descriptivos para variables y condiciones.</li> <li>Comenta tu l\u00f3gica cuando sea compleja.</li> <li>Valida siempre los datos antes de evaluar condiciones.</li> </ol>"},{"location":"content/p2/#8-caso-practico-calculadora-simple","title":"8. Caso pr\u00e1ctico: Calculadora simple","text":"<p>C\u00f3digo completo</p> <pre><code>const num1 = 10;\nconst num2 = 5;\nconst operador = \"/\";\nlet resultado;\n\nswitch (operador) {\n    case \"+\":\n        resultado = num1 + num2;\n        break;\n    case \"-\":\n        resultado = num1 - num2;\n        break;\n    case \"*\":\n        resultado = num1 * num2;\n        break;\n    case \"/\":\n        if (num2 !== 0) {\n            resultado = num1 / num2;\n        } else {\n            resultado = \"Error: divisi\u00f3n por cero\";\n        }\n        break;\n    default:\n        resultado = \"Operador no v\u00e1lido\";\n}\n\nconsole.log(`Resultado: ${resultado}`); // Resultado: 2\n</code></pre>"},{"location":"content/p2/#9-recursos-adicionales","title":"9. Recursos adicionales","text":"<ul> <li>MDN - if...else</li> <li>MDN - switch</li> <li>JavaScript.info - Conditional branching</li> </ul> <p>Resumen</p> <ul> <li><code>if</code> eval\u00faa una condici\u00f3n.  </li> <li><code>else</code> maneja el caso contrario.  </li> <li><code>else if</code> permite m\u00faltiples evaluaciones.  </li> <li><code>switch</code> es ideal para comparaciones exactas.  </li> <li>El ternario es \u00fatil para operaciones simples.</li> </ul>"},{"location":"content/p2s/","title":"Semana 2: Soluciones - Condicionales en JavaScript","text":"<p>Esta p\u00e1gina contiene las soluciones completas para todos los ejercicios del taller de condicionales en JavaScript.</p>"},{"location":"content/p2s/#soluciones-de-los-ejercicios","title":"\ud83d\udcdd Soluciones de los Ejercicios","text":""},{"location":"content/p2s/#1-par-o-impar","title":"1\ufe0f\u20e3 Par o Impar","text":"<p>Archivo: <code>src/ejercicio1.js</code></p> <pre><code>// Ejercicio 1: Par o Impar\nlet numero = 7;\n\nif (numero % 2 === 0) {\n    console.log(\"par\");\n} else {\n    console.log(\"impar\");\n}\n\n// Salida: impar\n</code></pre> <p>Explicaci\u00f3n: Utilizamos el operador m\u00f3dulo (<code>%</code>) para verificar si el residuo de la divisi\u00f3n entre 2 es 0. Si es 0, el n\u00famero es par; si no, es impar.</p>"},{"location":"content/p2s/#2-mayor-de-dos-numeros","title":"2\ufe0f\u20e3 Mayor de dos n\u00fameros","text":"<p>Archivo: <code>src/ejercicio2.js</code></p> <pre><code>// Ejercicio 2: Mayor de dos n\u00fameros\nlet a = 14;\nlet b = 9;\n\nif (a &gt; b) {\n    console.log(a);\n} else if (b &gt; a) {\n    console.log(b);\n} else {\n    console.log(\"Los n\u00fameros son iguales\");\n}\n\n// Salida: 14\n</code></pre> <p>Explicaci\u00f3n: Comparamos los dos n\u00fameros usando <code>if</code> y <code>else if</code>. Tambi\u00e9n incluimos un caso para cuando los n\u00fameros son iguales.</p>"},{"location":"content/p2s/#3-clasificacion-de-edad","title":"3\ufe0f\u20e3 Clasificaci\u00f3n de edad","text":"<p>Archivo: <code>src/ejercicio3.js</code></p> <pre><code>// Ejercicio 3: Clasificaci\u00f3n de edad\nlet edad = 15;\n\nif (edad &gt;= 0 &amp;&amp; edad &lt;= 12) {\n    console.log(\"ni\u00f1o\");\n} else if (edad &gt;= 13 &amp;&amp; edad &lt;= 17) {\n    console.log(\"adolescente\");\n} else if (edad &gt;= 18 &amp;&amp; edad &lt;= 64) {\n    console.log(\"adulto\");\n} else if (edad &gt;= 65) {\n    console.log(\"anciano\");\n} else {\n    console.log(\"Edad no v\u00e1lida\");\n}\n\n// Salida: adolescente\n</code></pre> <p>Explicaci\u00f3n: Usamos m\u00faltiples condiciones <code>else if</code> para clasificar la edad en diferentes categor\u00edas. Incluimos validaci\u00f3n para edades negativas.</p>"},{"location":"content/p2s/#4-calculadora-basica-con-switch","title":"4\ufe0f\u20e3 Calculadora b\u00e1sica con switch","text":"<p>Archivo: <code>src/ejercicio4.js</code></p> <pre><code>// Ejercicio 4: Calculadora b\u00e1sica con switch\nlet a = 10;\nlet b = 3;\nlet operador = '*';\nlet resultado;\n\nswitch (operador) {\n    case '+':\n        resultado = a + b;\n        console.log(resultado);\n        break;\n    case '-':\n        resultado = a - b;\n        console.log(resultado);\n        break;\n    case '*':\n        resultado = a * b;\n        console.log(resultado);\n        break;\n    case '/':\n        if (b === 0) {\n            console.log(\"indeterminado\");\n        } else {\n            resultado = a / b;\n            console.log(resultado);\n        }\n        break;\n    default:\n        console.log(\"operador no v\u00e1lido\");\n}\n\n// Salida: 30\n</code></pre> <p>Explicaci\u00f3n: Utilizamos <code>switch</code> para evaluar el operador y realizar la operaci\u00f3n correspondiente. Incluimos validaci\u00f3n especial para divisi\u00f3n por cero.</p>"},{"location":"content/p2s/#5-dia-laborable-o-fin-de-semana","title":"5\ufe0f\u20e3 D\u00eda laborable o fin de semana","text":"<p>Archivo: <code>src/ejercicio5.js</code></p> <pre><code>// Ejercicio 5: D\u00eda laborable o fin de semana\nlet dia = 'sabado';\n\n// Convertir a min\u00fasculas para evitar problemas de may\u00fasculas\ndia = dia.toLowerCase();\n\nswitch (dia) {\n    case 'lunes':\n    case 'martes':\n    case 'miercoles':\n    case 'mi\u00e9rcoles':\n    case 'jueves':\n    case 'viernes':\n        console.log(\"laborable\");\n        break;\n    case 'sabado':\n    case 's\u00e1bado':\n    case 'domingo':\n        console.log(\"fin de semana\");\n        break;\n    default:\n        console.log(\"D\u00eda no v\u00e1lido\");\n}\n\n// Salida: fin de semana\n</code></pre> <p>Explicaci\u00f3n: Usamos <code>switch</code> con m\u00faltiples casos para agrupar los d\u00edas laborables. Incluimos variaciones con y sin acentos para mayor flexibilidad.</p>"},{"location":"content/p2s/#6-nota-a-letra","title":"6\ufe0f\u20e3 Nota a letra","text":"<p>Archivo: <code>src/ejercicio6.js</code></p> <pre><code>// Ejercicio 6: Nota a letra\nlet nota = 83;\n\nif (nota &gt;= 90 &amp;&amp; nota &lt;= 100) {\n    console.log(\"A\");\n} else if (nota &gt;= 80 &amp;&amp; nota &lt;= 89) {\n    console.log(\"B\");\n} else if (nota &gt;= 70 &amp;&amp; nota &lt;= 79) {\n    console.log(\"C\");\n} else if (nota &gt;= 60 &amp;&amp; nota &lt;= 69) {\n    console.log(\"D\");\n} else if (nota &gt;= 0 &amp;&amp; nota &lt; 60) {\n    console.log(\"F\");\n} else {\n    console.log(\"Nota no v\u00e1lida\");\n}\n\n// Salida: B\n</code></pre> <p>Explicaci\u00f3n: Utilizamos <code>else if</code> para evaluar los rangos de notas. Incluimos validaci\u00f3n para notas fuera del rango 0-100.</p>"},{"location":"content/p2s/#7-descuento-por-volumen","title":"7\ufe0f\u20e3 Descuento por volumen","text":"<p>Archivo: <code>src/ejercicio7.js</code></p> <pre><code>// Ejercicio 7: Descuento por volumen\nlet precioUnitario = 25;\nlet cantidad = 60;\nlet precioFinal;\nlet total = precioUnitario * cantidad;\nlet descuento = 0;\n\nif (cantidad &lt; 10) {\n    descuento = 0;\n} else if (cantidad &gt;= 10 &amp;&amp; cantidad &lt; 50) {\n    descuento = 0.10; // 10%\n} else if (cantidad &gt;= 50) {\n    descuento = 0.20; // 20%\n}\n\nprecioFinal = total - (total * descuento);\nprecioFinal = Math.round(precioFinal * 100) / 100; // Redondear a 2 decimales\n\nconsole.log(precioFinal);\n\n// Salida: 1200\n</code></pre> <p>Explicaci\u00f3n: Calculamos el total, determinamos el descuento seg\u00fan la cantidad, y aplicamos el descuento. Usamos <code>Math.round()</code> para redondear a 2 decimales.</p>"},{"location":"content/p2s/#8-transporte-con-tarifa-reducida","title":"8\ufe0f\u20e3 Transporte con tarifa reducida","text":"<p>Archivo: <code>src/ejercicio8.js</code></p> <pre><code>// Ejercicio 8: Transporte con tarifa reducida\nlet edad = 67;\nlet distanciaKm = 120;\nlet tarifaBase = distanciaKm * 0.21;\nlet descuento = 0;\nlet precioFinal;\n\nif (edad &lt; 18) {\n    descuento = 0.20; // 20% descuento\n} else if (edad &gt;= 65) {\n    descuento = 0.40; // 40% descuento\n} else {\n    descuento = 0; // Sin descuento\n}\n\nprecioFinal = tarifaBase - (tarifaBase * descuento);\nprecioFinal = Math.round(precioFinal * 100) / 100; // Redondear a 2 decimales\n\nconsole.log(precioFinal);\n\n// Salida: 15.12\n</code></pre> <p>Explicaci\u00f3n: Calculamos la tarifa base, determinamos el descuento seg\u00fan la edad, y aplicamos el descuento correspondiente.</p>"},{"location":"content/p2s/#9-conversor-de-notas-musicales-switch","title":"9\ufe0f\u20e3 Conversor de notas musicales (switch)","text":"<p>Archivo: <code>src/ejercicio9.js</code></p> <pre><code>// Ejercicio 9: Conversor de notas musicales\nlet nota = 'LA';\n\n// Convertir a may\u00fasculas para consistencia\nnota = nota.toUpperCase();\n\nswitch (nota) {\n    case 'DO':\n        console.log(60);\n        break;\n    case 'RE':\n        console.log(62);\n        break;\n    case 'MI':\n        console.log(64);\n        break;\n    case 'FA':\n        console.log(65);\n        break;\n    case 'SOL':\n        console.log(67);\n        break;\n    case 'LA':\n        console.log(69);\n        break;\n    case 'SI':\n        console.log(71);\n        break;\n    default:\n        console.log(\"nota desconocida\");\n}\n\n// Salida: 69\n</code></pre> <p>Explicaci\u00f3n: Utilizamos <code>switch</code> para mapear cada nota musical a su n\u00famero MIDI correspondiente. Convertimos a may\u00fasculas para evitar problemas de case sensitivity.</p>"},{"location":"content/p2s/#autenticacion-simple","title":"\ud83d\udd1f Autenticaci\u00f3n simple","text":"<p>Archivo: <code>src/ejercicio10.js</code></p> <pre><code>// Ejercicio 10: Autenticaci\u00f3n simple\nlet usuario = \"admin\";\nlet contrasena = \"1234\";\n\nif (usuario === \"admin\" &amp;&amp; contrasena === \"1234\") {\n    console.log(\"acceso concedido\");\n} else {\n    console.log(\"acceso denegado\");\n}\n\n// Salida: acceso concedido\n</code></pre> <p>Explicaci\u00f3n: Utilizamos el operador l\u00f3gico <code>&amp;&amp;</code> para verificar que tanto el usuario como la contrase\u00f1a sean correctos. Usamos <code>===</code> para comparaci\u00f3n estricta.</p>"},{"location":"content/p2s/#resumen-de-conceptos-aplicados","title":"\ud83d\udccb Resumen de Conceptos Aplicados","text":""},{"location":"content/p2s/#estructuras-condicionales-utilizadas","title":"Estructuras Condicionales Utilizadas:","text":"<ol> <li><code>if</code> simple - Para condiciones b\u00e1sicas</li> <li><code>if...else</code> - Para alternativas binarias</li> <li><code>if...else if...else</code> - Para m\u00faltiples condiciones</li> <li><code>switch</code> - Para comparaciones exactas con m\u00faltiples valores</li> <li>Operadores l\u00f3gicos - <code>&amp;&amp;</code>, <code>||</code> para combinar condiciones</li> <li>Operadores de comparaci\u00f3n - <code>===</code>, <code>!==</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code></li> </ol>"},{"location":"content/p2s/#tecnicas-de-programacion","title":"T\u00e9cnicas de Programaci\u00f3n:","text":"<ul> <li>Validaci\u00f3n de datos - Verificar rangos v\u00e1lidos</li> <li>Manejo de casos especiales - Divisi\u00f3n por cero, valores inv\u00e1lidos</li> <li>Normalizaci\u00f3n de entrada - <code>toLowerCase()</code>, <code>toUpperCase()</code></li> <li>C\u00e1lculos matem\u00e1ticos - Porcentajes, descuentos, redondeo</li> <li>Operador m\u00f3dulo - Para determinar paridad</li> <li>Redondeo a decimales - <code>Math.round()</code> para precisi\u00f3n</li> </ul>"},{"location":"content/p2s/#buenas-practicas-implementadas","title":"Buenas Pr\u00e1cticas Implementadas:","text":"<ol> <li>Comentarios explicativos en cada ejercicio</li> <li>Validaci\u00f3n de entrada para casos edge</li> <li>Nombres descriptivos para variables</li> <li>Manejo de casos por defecto en <code>switch</code></li> <li>Uso de <code>break</code> para evitar fall-through</li> <li>Comparaciones estrictas con <code>===</code></li> </ol> <p>\u00a1Ejercicios Completados!</p> <p>Todas las soluciones implementan correctamente las estructuras condicionales requeridas (<code>if</code>, <code>else</code>, <code>else if</code>, <code>switch</code>) sin usar funciones ni ciclos, tal como se especific\u00f3 en las instrucciones del taller.</p> <p>Consejos para Mejorar</p> <ul> <li>Practica con diferentes valores de entrada para probar todos los casos</li> <li>Experimenta combinando m\u00faltiples condiciones con operadores l\u00f3gicos</li> <li>Considera la legibilidad del c\u00f3digo al elegir entre <code>if/else if</code> y <code>switch</code></li> <li>Siempre incluye casos por defecto para manejar entradas inesperadas</li> </ul>"},{"location":"content/p3/","title":"Semana 3: Ciclos en JavaScript","text":"<p>Los ciclos (tambi\u00e9n conocidos como bucles o loops) son estructuras de control fundamentales en JavaScript que nos permiten ejecutar un bloque de c\u00f3digo repetidamente mientras se cumpla una condici\u00f3n espec\u00edfica. Son esenciales para automatizar tareas repetitivas y procesar colecciones de datos de manera eficiente.</p>"},{"location":"content/p3/#que-son-los-ciclos","title":"\u00bfQu\u00e9 son los Ciclos?","text":"<p>Un ciclo es una estructura de control que permite repetir la ejecuci\u00f3n de un conjunto de instrucciones hasta que se cumpla una condici\u00f3n de terminaci\u00f3n. En lugar de escribir el mismo c\u00f3digo m\u00faltiples veces, podemos usar ciclos para hacer que el programa repita autom\u00e1ticamente las operaciones necesarias.</p>"},{"location":"content/p3/#ventajas-de-usar-ciclos","title":"Ventajas de usar ciclos:","text":"<ul> <li>Eficiencia: Evitan la repetici\u00f3n innecesaria de c\u00f3digo</li> <li>Mantenibilidad: Facilitan las modificaciones y actualizaciones</li> <li>Flexibilidad: Permiten procesar cantidades variables de datos</li> <li>Automatizaci\u00f3n: Simplifican tareas repetitivas</li> </ul>"},{"location":"content/p3/#1-ciclo-for","title":"1. Ciclo <code>for</code>","text":"<p>El ciclo <code>for</code> es uno de los m\u00e1s utilizados en JavaScript. Es ideal cuando conocemos de antemano cu\u00e1ntas veces queremos que se ejecute el bucle.</p>"},{"location":"content/p3/#sintaxis","title":"Sintaxis","text":"<pre><code>for (inicializaci\u00f3n; condici\u00f3n; incremento/decremento) {\n    // C\u00f3digo a ejecutar en cada iteraci\u00f3n\n}\n</code></pre>"},{"location":"content/p3/#componentes-del-ciclo-for","title":"Componentes del ciclo <code>for</code>:","text":"<ol> <li>Inicializaci\u00f3n: Se ejecuta una sola vez al inicio del ciclo</li> <li>Condici\u00f3n: Se eval\u00faa antes de cada iteraci\u00f3n; si es <code>true</code>, contin\u00faa el ciclo</li> <li>Incremento/Decremento: Se ejecuta al final de cada iteraci\u00f3n</li> <li>Cuerpo del ciclo: El c\u00f3digo que se repite</li> </ol>"},{"location":"content/p3/#ejemplos-basicos","title":"Ejemplos B\u00e1sicos","text":""},{"location":"content/p3/#ejemplo-1-contar-del-1-al-10","title":"Ejemplo 1: Contar del 1 al 10","text":"<pre><code>for (let i = 1; i &lt;= 10; i++) {\n    console.log(\"N\u00famero: \" + i);\n}\n</code></pre>"},{"location":"content/p3/#ejemplo-2-tabla-de-multiplicar","title":"Ejemplo 2: Tabla de multiplicar","text":"<pre><code>let numero = 5;\nconsole.log(`Tabla de multiplicar del ${numero}:`);\n\nfor (let i = 1; i &lt;= 10; i++) {\n    let resultado = numero * i;\n    console.log(`${numero} x ${i} = ${resultado}`);\n}\n</code></pre>"},{"location":"content/p3/#ejemplo-3-recorrer-un-array","title":"Ejemplo 3: Recorrer un array","text":"<pre><code>let frutas = [\"manzana\", \"banana\", \"naranja\", \"uva\", \"pera\"];\n\nfor (let i = 0; i &lt; frutas.length; i++) {\n    console.log(`Fruta ${i + 1}: ${frutas[i]}`);\n}\n</code></pre>"},{"location":"content/p3/#variaciones-del-ciclo-for","title":"Variaciones del ciclo <code>for</code>","text":""},{"location":"content/p3/#for-con-decremento","title":"For con decremento","text":"<pre><code>// Contar hacia atr\u00e1s del 10 al 1\nfor (let i = 10; i &gt;= 1; i--) {\n    console.log(\"Cuenta regresiva: \" + i);\n}\n</code></pre>"},{"location":"content/p3/#for-con-incrementos-personalizados","title":"For con incrementos personalizados","text":"<pre><code>// N\u00fameros pares del 0 al 20\nfor (let i = 0; i &lt;= 20; i += 2) {\n    console.log(\"N\u00famero par: \" + i);\n}\n</code></pre>"},{"location":"content/p3/#for-anidados","title":"For anidados","text":"<pre><code>// Crear una matriz de multiplicaci\u00f3n\nfor (let i = 1; i &lt;= 3; i++) {\n    for (let j = 1; j &lt;= 3; j++) {\n        console.log(`${i} x ${j} = ${i * j}`);\n    }\n    console.log(\"---\");\n}\n</code></pre>"},{"location":"content/p3/#casos-de-uso-comunes","title":"Casos de uso comunes","text":"<p>Ejemplo Pr\u00e1ctico: Calculadora de Promedio</p> <pre><code>let calificaciones = [85, 92, 78, 96, 88, 91, 84];\nlet suma = 0;\n\n// Sumar todas las calificaciones\nfor (let i = 0; i &lt; calificaciones.length; i++) {\n    suma += calificaciones[i];\n    console.log(`Calificaci\u00f3n ${i + 1}: ${calificaciones[i]} (Suma acumulada: ${suma})`);\n}\n\nlet promedio = suma / calificaciones.length;\nconsole.log(`Promedio final: ${promedio.toFixed(2)}`);\n</code></pre>"},{"location":"content/p3/#2-ciclo-while","title":"2. Ciclo <code>while</code>","text":"<p>El ciclo <code>while</code> ejecuta un bloque de c\u00f3digo mientras una condici\u00f3n sea verdadera. Es \u00fatil cuando no sabemos exactamente cu\u00e1ntas iteraciones necesitaremos.</p>"},{"location":"content/p3/#sintaxis_1","title":"Sintaxis","text":"<pre><code>while (condici\u00f3n) {\n    // C\u00f3digo a ejecutar mientras la condici\u00f3n sea true\n    // Es importante modificar la condici\u00f3n dentro del ciclo\n}\n</code></pre>"},{"location":"content/p3/#caracteristicas-importantes","title":"Caracter\u00edsticas importantes:","text":"<ul> <li>La condici\u00f3n se eval\u00faa antes de cada iteraci\u00f3n</li> <li>Si la condici\u00f3n es <code>false</code> desde el inicio, el ciclo nunca se ejecuta</li> <li>Es crucial modificar la condici\u00f3n dentro del ciclo para evitar bucles infinitos</li> </ul>"},{"location":"content/p3/#ejemplos-basicos_1","title":"Ejemplos B\u00e1sicos","text":""},{"location":"content/p3/#ejemplo-1-contador-simple","title":"Ejemplo 1: Contador simple","text":"<pre><code>let contador = 1;\n\nwhile (contador &lt;= 5) {\n    console.log(\"Iteraci\u00f3n n\u00famero: \" + contador);\n    contador++; // Incrementar el contador\n}\n</code></pre>"},{"location":"content/p3/#ejemplo-2-buscar-un-elemento-en-un-array","title":"Ejemplo 2: Buscar un elemento en un array","text":"<pre><code>let numeros = [10, 25, 30, 45, 50];\nlet buscar = 30;\nlet indice = 0;\nlet encontrado = false;\n\nwhile (indice &lt; numeros.length &amp;&amp; !encontrado) {\n    if (numeros[indice] === buscar) {\n        encontrado = true;\n        console.log(`N\u00famero ${buscar} encontrado en la posici\u00f3n ${indice}`);\n    } else {\n        console.log(`Posici\u00f3n ${indice}: ${numeros[indice]} (no es el que buscamos)`);\n    }\n    indice++;\n}\n\nif (!encontrado) {\n    console.log(`El n\u00famero ${buscar} no se encontr\u00f3 en el array`);\n}\n</code></pre>"},{"location":"content/p3/#ejemplo-3-validacion-de-entrada","title":"Ejemplo 3: Validaci\u00f3n de entrada","text":"<pre><code>let password = \"\";\nlet intentos = 0;\nlet maxIntentos = 3;\n\nwhile (password !== \"secreto123\" &amp;&amp; intentos &lt; maxIntentos) {\n    // En un entorno real, usar\u00edas prompt() o input del usuario\n    password = prompt(\"Ingresa la contrase\u00f1a:\");\n    intentos++;\n\n    if (password !== \"secreto123\") {\n        console.log(`Contrase\u00f1a incorrecta. Intentos restantes: ${maxIntentos - intentos}`);\n    }\n}\n\nif (password === \"secreto123\") {\n    console.log(\"\u00a1Acceso concedido!\");\n} else {\n    console.log(\"Acceso denegado. M\u00e1ximo de intentos alcanzado.\");\n}\n</code></pre>"},{"location":"content/p3/#casos-de-uso-avanzados","title":"Casos de uso avanzados","text":"<p>Ejemplo Pr\u00e1ctico: Juego de Adivinanza</p> <pre><code>let numeroSecreto = Math.floor(Math.random() * 100) + 1;\nlet adivinanza = 0;\nlet intentos = 0;\nlet maxIntentos = 7;\n\nconsole.log(\"\u00a1Adivina el n\u00famero entre 1 y 100!\");\nconsole.log(`Tienes ${maxIntentos} intentos.`);\n\nwhile (adivinanza !== numeroSecreto &amp;&amp; intentos &lt; maxIntentos) {\n    // En un entorno real, usar\u00edas input del usuario\n    adivinanza = parseInt(prompt(\"Ingresa tu adivinanza:\"));\n    intentos++;\n\n    if (adivinanza &lt; numeroSecreto) {\n        console.log(`Muy bajo. Intentos restantes: ${maxIntentos - intentos}`);\n    } else if (adivinanza &gt; numeroSecreto) {\n        console.log(`Muy alto. Intentos restantes: ${maxIntentos - intentos}`);\n    } else {\n        console.log(`\u00a1Felicidades! Adivinaste en ${intentos} intentos.`);\n    }\n}\n\nif (adivinanza !== numeroSecreto) {\n    console.log(`Game Over. El n\u00famero era: ${numeroSecreto}`);\n}\n</code></pre>"},{"location":"content/p3/#3-ciclo-do-while","title":"3. Ciclo <code>do-while</code>","text":"<p>El ciclo <code>do-while</code> es similar al <code>while</code>, pero con una diferencia crucial: siempre ejecuta el c\u00f3digo al menos una vez antes de evaluar la condici\u00f3n.</p>"},{"location":"content/p3/#sintaxis_2","title":"Sintaxis","text":"<pre><code>do {\n    // C\u00f3digo a ejecutar\n    // Se ejecuta al menos una vez\n} while (condici\u00f3n);\n</code></pre>"},{"location":"content/p3/#caracteristicas-importantes_1","title":"Caracter\u00edsticas importantes:","text":"<ul> <li>El c\u00f3digo se ejecuta antes de evaluar la condici\u00f3n</li> <li>Garantiza al menos una ejecuci\u00f3n del bloque de c\u00f3digo</li> <li>La condici\u00f3n se eval\u00faa al final de cada iteraci\u00f3n</li> <li>\u00datil cuando necesitamos que algo ocurra al menos una vez</li> </ul>"},{"location":"content/p3/#ejemplos-basicos_2","title":"Ejemplos B\u00e1sicos","text":""},{"location":"content/p3/#ejemplo-1-menu-de-opciones","title":"Ejemplo 1: Men\u00fa de opciones","text":"<pre><code>let opcion;\n\ndo {\n    console.log(\"\\n=== MEN\u00da PRINCIPAL ===\");\n    console.log(\"1. Ver perfil\");\n    console.log(\"2. Configuraci\u00f3n\");\n    console.log(\"3. Ayuda\");\n    console.log(\"4. Salir\");\n\n    // En un entorno real, usar\u00edas input del usuario\n    opcion = parseInt(prompt(\"Selecciona una opci\u00f3n (1-4):\"));\n\n    switch (opcion) {\n        case 1:\n            console.log(\"Mostrando perfil...\");\n            break;\n        case 2:\n            console.log(\"Abriendo configuraci\u00f3n...\");\n            break;\n        case 3:\n            console.log(\"Mostrando ayuda...\");\n            break;\n        case 4:\n            console.log(\"\u00a1Hasta luego!\");\n            break;\n        default:\n            console.log(\"Opci\u00f3n inv\u00e1lida. Intenta de nuevo.\");\n    }\n} while (opcion !== 4);\n</code></pre>"},{"location":"content/p3/#ejemplo-2-validacion-de-datos","title":"Ejemplo 2: Validaci\u00f3n de datos","text":"<pre><code>let edad;\n\ndo {\n    edad = parseInt(prompt(\"Ingresa tu edad (debe ser mayor a 0):\"));\n\n    if (isNaN(edad) || edad &lt;= 0) {\n        console.log(\"Por favor, ingresa una edad v\u00e1lida.\");\n    }\n} while (isNaN(edad) || edad &lt;= 0);\n\nconsole.log(`Tu edad es: ${edad} a\u00f1os`);\n</code></pre>"},{"location":"content/p3/#ejemplo-3-generador-de-numeros-aleatorios","title":"Ejemplo 3: Generador de n\u00fameros aleatorios","text":"<pre><code>let numero;\nlet suma = 0;\nlet contador = 0;\n\nconsole.log(\"Generando n\u00fameros aleatorios hasta obtener uno mayor a 90:\");\n\ndo {\n    numero = Math.floor(Math.random() * 100) + 1;\n    suma += numero;\n    contador++;\n    console.log(`N\u00famero ${contador}: ${numero}`);\n} while (numero &lt;= 90);\n\nconsole.log(`Se generaron ${contador} n\u00fameros`);\nconsole.log(`Suma total: ${suma}`);\nconsole.log(`Promedio: ${(suma / contador).toFixed(2)}`);\n</code></pre>"},{"location":"content/p3/#comparacion-while-vs-do-while","title":"Comparaci\u00f3n: <code>while</code> vs <code>do-while</code>","text":"<p>Diferencia Clave</p> <pre><code>// Ejemplo con while\nlet x = 10;\nwhile (x &lt; 5) {\n    console.log(\"Esto nunca se ejecuta\");\n    x++;\n}\n\n// Ejemplo con do-while\nlet y = 10;\ndo {\n    console.log(\"Esto se ejecuta una vez: \" + y);\n    y++;\n} while (y &lt; 5);\n</code></pre>"},{"location":"content/p3/#comparacion-de-los-tres-tipos-de-ciclos","title":"Comparaci\u00f3n de los Tres Tipos de Ciclos","text":"Caracter\u00edstica <code>for</code> <code>while</code> <code>do-while</code> Cu\u00e1ndo usar N\u00famero conocido de iteraciones Condici\u00f3n variable Al menos una ejecuci\u00f3n Evaluaci\u00f3n de condici\u00f3n Al inicio Al inicio Al final Ejecuci\u00f3n m\u00ednima 0 veces 0 veces 1 vez Mejor para Arrays, contadores Validaciones, b\u00fasquedas Men\u00fas, validaciones"},{"location":"content/p3/#ejemplo-comparativo","title":"Ejemplo comparativo","text":"<p>El mismo problema resuelto con los tres ciclos</p> <p>Problema: Imprimir n\u00fameros del 1 al 5</p> <pre><code>// Con for\nconsole.log(\"=== Usando for ===\");\nfor (let i = 1; i &lt;= 5; i++) {\n    console.log(i);\n}\n\n// Con while\nconsole.log(\"=== Usando while ===\");\nlet j = 1;\nwhile (j &lt;= 5) {\n    console.log(j);\n    j++;\n}\n\n// Con do-while\nconsole.log(\"=== Usando do-while ===\");\nlet k = 1;\ndo {\n    console.log(k);\n    k++;\n} while (k &lt;= 5);\n</code></pre>"},{"location":"content/p3/#control-de-flujo-en-ciclos","title":"Control de Flujo en Ciclos","text":""},{"location":"content/p3/#break-salir-del-ciclo","title":"<code>break</code> - Salir del ciclo","text":"<p>La declaraci\u00f3n <code>break</code> termina inmediatamente el ciclo actual.</p> <pre><code>// Buscar el primer n\u00famero par mayor a 10\nfor (let i = 1; i &lt;= 20; i++) {\n    if (i &gt; 10 &amp;&amp; i % 2 === 0) {\n        console.log(`Primer n\u00famero par mayor a 10: ${i}`);\n        break; // Salir del ciclo\n    }\n}\n</code></pre>"},{"location":"content/p3/#continue-saltar-a-la-siguiente-iteracion","title":"<code>continue</code> - Saltar a la siguiente iteraci\u00f3n","text":"<p>La declaraci\u00f3n <code>continue</code> salta el resto del c\u00f3digo en la iteraci\u00f3n actual y pasa a la siguiente.</p> <pre><code>// Imprimir solo n\u00fameros impares del 1 al 10\nfor (let i = 1; i &lt;= 10; i++) {\n    if (i % 2 === 0) {\n        continue; // Saltar n\u00fameros pares\n    }\n    console.log(`N\u00famero impar: ${i}`);\n}\n</code></pre>"},{"location":"content/p3/#buenas-practicas","title":"Buenas Pr\u00e1cticas","text":"<p>Consejos para usar ciclos eficientemente</p> <ol> <li> <p>Evita bucles infinitos: Siempre aseg\u00farate de que la condici\u00f3n del ciclo eventualmente se vuelva <code>false</code></p> </li> <li> <p>Usa nombres descriptivos:     <pre><code>// \u274c Malo\nfor (let i = 0; i &lt; arr.length; i++) { }\n\n// \u2705 Bueno\nfor (let indiceEstudiante = 0; indiceEstudiante &lt; estudiantes.length; indiceEstudiante++) { }\n</code></pre></p> </li> <li> <p>Minimiza el trabajo dentro del ciclo:    <pre><code>// \u274c Malo - calcula length en cada iteraci\u00f3n\nfor (let i = 0; i &lt; array.length; i++) { }\n\n// \u2705 Bueno - calcula length una sola vez\nfor (let i = 0, len = array.length; i &lt; len; i++) { }\n</code></pre></p> </li> <li> <p>Usa el ciclo apropiado para cada situaci\u00f3n</p> </li> <li> <p>Considera m\u00e9todos de array modernos cuando sea apropiado:    <pre><code>// En lugar de:\nfor (let i = 0; i &lt; numeros.length; i++) {\n    console.log(numeros[i] * 2);\n}\n\n// Considera:\nnumeros.forEach(numero =&gt; console.log(numero * 2));\n</code></pre></p> </li> </ol>"},{"location":"content/p3/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":"<p>Ejercicio 1: Factorial</p> <p>Escribe un programa que calcule el factorial de un n\u00famero usando un ciclo <code>for</code>.</p> <pre><code>function calcularFactorial(n) {\n    let factorial = 1;\n\n    for (let i = 1; i &lt;= n; i++) {\n        factorial *= i;\n        console.log(`${i}! = ${factorial}`);\n    }\n\n    return factorial;\n}\n\nconsole.log(`El factorial de 5 es: ${calcularFactorial(5)}`);\n</code></pre> <p>Ejercicio 2: N\u00fameros Primos</p> <p>Encuentra todos los n\u00fameros primos entre 1 y 50 usando ciclos anidados.</p> <pre><code>console.log(\"N\u00fameros primos entre 1 y 50:\");\n\nfor (let numero = 2; numero &lt;= 50; numero++) {\n    let esPrimo = true;\n\n    for (let divisor = 2; divisor &lt; numero; divisor++) {\n        if (numero % divisor === 0) {\n            esPrimo = false;\n            break;\n        }\n    }\n\n    if (esPrimo) {\n        console.log(numero);\n    }\n}\n</code></pre> <p>Ejercicio 3: Pir\u00e1mide de Asteriscos</p> <p>Crea una pir\u00e1mide de asteriscos usando ciclos anidados.</p> <pre><code>let altura = 5;\n\nfor (let fila = 1; fila &lt;= altura; fila++) {\n    let espacios = \"\";\n    let asteriscos = \"\";\n\n    // Agregar espacios\n    for (let e = 1; e &lt;= altura - fila; e++) {\n        espacios += \" \";\n    }\n\n    // Agregar asteriscos\n    for (let a = 1; a &lt;= 2 * fila - 1; a++) {\n        asteriscos += \"*\";\n    }\n\n    console.log(espacios + asteriscos);\n}\n</code></pre>"},{"location":"content/p3s/","title":"Semana 3: Soluciones - Ejercicios de Ciclos en JavaScript","text":"<p>Esta p\u00e1gina contiene las soluciones completas para todos los ejercicios de la actividad pr\u00e1ctica de ciclos en JavaScript.</p>"},{"location":"content/p3s/#soluciones-ejercicios-con-ciclo-while","title":"\ud83d\udcdd Soluciones - Ejercicios con Ciclo <code>while</code>","text":""},{"location":"content/p3s/#ejercicio-while-1-contador-descendente","title":"Ejercicio While 1: Contador Descendente","text":"<pre><code>// Ejercicio While 1: Contador Descendente\nconsole.log(\"=== Contador Descendente ===\");\n\nlet contador = 20;\n\nwhile (contador &gt;= 1) {\n    console.log(contador);\n    contador--;\n}\n\nconsole.log(\"\u00a1Despegue!\");\n</code></pre> <p>Explicaci\u00f3n: Utilizamos un ciclo <code>while</code> que contin\u00faa mientras el contador sea mayor o igual a 1. En cada iteraci\u00f3n mostramos el n\u00famero y lo decrementamos.</p>"},{"location":"content/p3s/#ejercicio-while-2-suma-de-numeros-pares","title":"Ejercicio While 2: Suma de N\u00fameros Pares","text":"<pre><code>// Ejercicio While 2: Suma de N\u00fameros Pares\nconsole.log(\"=== Suma de N\u00fameros Pares ===\");\n\nlet numero = 2; // Comenzamos con el primer n\u00famero par\nlet suma = 0;\nlet cantidadPares = 0;\n\nwhile (numero &lt;= 50) {\n    suma += numero;\n    cantidadPares++;\n    console.log(`N\u00famero par: ${numero}, Suma acumulada: ${suma}`);\n    numero += 2; // Incrementamos de 2 en 2 para obtener solo pares\n}\n\nconsole.log(`\\nResultado final:`);\nconsole.log(`Suma total de n\u00fameros pares: ${suma}`);\nconsole.log(`Cantidad de n\u00fameros pares sumados: ${cantidadPares}`);\n</code></pre> <p>Explicaci\u00f3n: Iniciamos con 2 (primer par) y vamos sumando de 2 en 2 hasta llegar a 50, acumulando la suma y contando cu\u00e1ntos n\u00fameros procesamos.</p>"},{"location":"content/p3s/#ejercicio-while-3-validador-de-contrasena","title":"Ejercicio While 3: Validador de Contrase\u00f1a","text":"<pre><code>// Ejercicio While 3: Validador de Contrase\u00f1a\nconsole.log(\"=== Validador de Contrase\u00f1a ===\");\n\nlet password = \"\";\nlet intentosFallidos = 0;\nconst passwordCorrecta = \"admin123\";\n\nwhile (password !== passwordCorrecta) {\n    // Simulamos entrada del usuario (en un entorno real usar\u00edas prompt())\n    password = prompt(\"Ingresa la contrase\u00f1a:\");\n\n    if (password !== passwordCorrecta) {\n        intentosFallidos++;\n        console.log(`Contrase\u00f1a incorrecta. Intento fallido #${intentosFallidos}`);\n    }\n}\n\nconsole.log(`\u00a1Acceso concedido!`);\nconsole.log(`Intentos fallidos antes del acceso: ${intentosFallidos}`);\n</code></pre> <p>Explicaci\u00f3n: El ciclo <code>while</code> contin\u00faa hasta que se ingrese la contrase\u00f1a correcta, contando cada intento fallido.</p>"},{"location":"content/p3s/#ejercicio-while-4-generador-de-numeros-aleatorios","title":"Ejercicio While 4: Generador de N\u00fameros Aleatorios","text":"<pre><code>// Ejercicio While 4: Generador de N\u00fameros Aleatorios\nconsole.log(\"=== Generador de N\u00fameros Aleatorios ===\");\n\nlet numeroAleatorio = 0;\nlet cantidadGenerados = 0;\n\nwhile (numeroAleatorio &lt;= 95) {\n    numeroAleatorio = Math.floor(Math.random() * 100) + 1;\n    cantidadGenerados++;\n    console.log(`N\u00famero ${cantidadGenerados}: ${numeroAleatorio}`);\n}\n\nconsole.log(`\\nSe generaron ${cantidadGenerados} n\u00fameros hasta obtener uno mayor a 95`);\nconsole.log(`El n\u00famero final fue: ${numeroAleatorio}`);\n</code></pre> <p>Explicaci\u00f3n: Generamos n\u00fameros aleatorios hasta que obtengamos uno mayor a 95, contando cu\u00e1ntos n\u00fameros se generaron en total.</p>"},{"location":"content/p3s/#ejercicio-while-5-calculadora-de-factorial","title":"Ejercicio While 5: Calculadora de Factorial","text":"<pre><code>// Ejercicio While 5: Calculadora de Factorial\nconsole.log(\"=== Calculadora de Factorial ===\");\n\nfunction calcularFactorialWhile(n) {\n    if (n &lt; 0) {\n        return \"El factorial no est\u00e1 definido para n\u00fameros negativos\";\n    }\n\n    let factorial = 1;\n    let i = 1;\n\n    console.log(`Calculando el factorial de ${n}:`);\n    console.log(`Paso inicial: factorial = 1`);\n\n    while (i &lt;= n) {\n        factorial *= i;\n        console.log(`Paso ${i}: factorial = factorial * ${i} = ${factorial}`);\n        i++;\n    }\n\n    return factorial;\n}\n\n// Ejemplo de uso\nlet numero = 5;\nlet resultado = calcularFactorialWhile(numero);\nconsole.log(`\\nEl factorial de ${numero} es: ${resultado}`);\n</code></pre> <p>Explicaci\u00f3n: Calculamos el factorial multiplicando progresivamente desde 1 hasta n, mostrando cada paso del c\u00e1lculo.</p>"},{"location":"content/p3s/#ejercicio-while-6-busqueda-en-array","title":"Ejercicio While 6: B\u00fasqueda en Array","text":"<pre><code>// Ejercicio While 6: B\u00fasqueda en Array\nconsole.log(\"=== B\u00fasqueda en Array ===\");\n\nlet nombres = [\"Ana\", \"Carlos\", \"Mar\u00eda\", \"Pedro\", \"Luc\u00eda\", \"Diego\", \"Carmen\"];\nlet nombreBuscado = \"Mar\u00eda\";\nlet indice = 0;\nlet encontrado = false;\nlet posicionEncontrada = -1;\n\nconsole.log(`Buscando \"${nombreBuscado}\" en el array:`);\nconsole.log(`Array: [${nombres.join(\", \")}]`);\n\nwhile (indice &lt; nombres.length &amp;&amp; !encontrado) {\n    console.log(`Verificando posici\u00f3n ${indice}: \"${nombres[indice]}\"`);\n\n    if (nombres[indice] === nombreBuscado) {\n        encontrado = true;\n        posicionEncontrada = indice;\n        console.log(`\u00a1Encontrado! \"${nombreBuscado}\" est\u00e1 en la posici\u00f3n ${indice}`);\n    } else {\n        console.log(`\"${nombres[indice]}\" no es el nombre que buscamos`);\n    }\n\n    indice++;\n}\n\nif (!encontrado) {\n    console.log(`El nombre \"${nombreBuscado}\" no se encontr\u00f3 en el array`);\n}\n</code></pre> <p>Explicaci\u00f3n: Recorremos el array con <code>while</code> hasta encontrar el nombre buscado o llegar al final del array.</p>"},{"location":"content/p3s/#ejercicio-while-7-contador-de-digitos","title":"Ejercicio While 7: Contador de D\u00edgitos","text":"<pre><code>// Ejercicio While 7: Contador de D\u00edgitos\nconsole.log(\"=== Contador de D\u00edgitos ===\");\n\nfunction contarDigitos(numero) {\n    // Convertimos a valor absoluto para manejar n\u00fameros negativos\n    numero = Math.abs(numero);\n\n    // Caso especial para el 0\n    if (numero === 0) {\n        return 1;\n    }\n\n    let contador = 0;\n    let temp = numero;\n\n    console.log(`Contando d\u00edgitos de ${numero}:`);\n\n    while (temp &gt; 0) {\n        temp = Math.floor(temp / 10);\n        contador++;\n        console.log(`Paso ${contador}: temp = ${temp}, d\u00edgitos contados = ${contador}`);\n    }\n\n    return contador;\n}\n\n// Ejemplos de uso\nlet numeros = [12345, 987, 42, 7, 0, 1000000];\n\nnumeros.forEach(num =&gt; {\n    let digitos = contarDigitos(num);\n    console.log(`El n\u00famero ${num} tiene ${digitos} d\u00edgito(s)\\n`);\n});\n</code></pre> <p>Explicaci\u00f3n: Dividimos el n\u00famero por 10 repetidamente hasta que sea 0, contando cu\u00e1ntas divisiones realizamos.</p>"},{"location":"content/p3s/#ejercicio-while-8-secuencia-de-fibonacci","title":"Ejercicio While 8: Secuencia de Fibonacci","text":"<pre><code>// Ejercicio While 8: Secuencia de Fibonacci\nconsole.log(\"=== Secuencia de Fibonacci ===\");\n\nlet a = 0, b = 1;\nlet contador = 0;\nlet limite = 15;\n\nconsole.log(\"Los primeros 15 n\u00fameros de la secuencia de Fibonacci:\");\n\nwhile (contador &lt; limite) {\n    if (contador === 0) {\n        console.log(`F(${contador + 1}) = ${a}`);\n        contador++;\n    } else if (contador === 1) {\n        console.log(`F(${contador + 1}) = ${b}`);\n        contador++;\n    } else {\n        let siguiente = a + b;\n        console.log(`F(${contador + 1}) = ${siguiente} (${a} + ${b})`);\n        a = b;\n        b = siguiente;\n        contador++;\n    }\n}\n</code></pre> <p>Explicaci\u00f3n: Generamos la secuencia de Fibonacci sumando los dos n\u00fameros anteriores, usando <code>while</code> para controlar cu\u00e1ntos n\u00fameros generar.</p>"},{"location":"content/p3s/#ejercicio-while-9-juego-de-adivinanza-mejorado","title":"Ejercicio While 9: Juego de Adivinanza Mejorado","text":"<pre><code>// Ejercicio While 9: Juego de Adivinanza Mejorado\nconsole.log(\"=== Juego de Adivinanza Mejorado ===\");\n\nfunction juegoAdivinanza() {\n    let numeroSecreto = Math.floor(Math.random() * 50) + 1;\n    let adivinanza = 0;\n    let intentos = 0;\n    let maxIntentos = 7;\n\n    console.log(\"\u00a1Bienvenido al juego de adivinanza!\");\n    console.log(\"Adivina el n\u00famero entre 1 y 50\");\n    console.log(`Tienes ${maxIntentos} intentos m\u00e1ximo`);\n    console.log(\"Pistas: 'muy alto', 'muy bajo', 'cerca' (diferencia \u2264 5)\");\n\n    while (adivinanza !== numeroSecreto &amp;&amp; intentos &lt; maxIntentos) {\n        // En un entorno real, usar\u00edas prompt()\n        adivinanza = parseInt(prompt(`Intento ${intentos + 1}/${maxIntentos}. Ingresa tu n\u00famero:`));\n        intentos++;\n\n        if (adivinanza === numeroSecreto) {\n            console.log(`\u00a1Felicidades! Adivinaste el n\u00famero ${numeroSecreto} en ${intentos} intento(s)`);\n        } else {\n            let diferencia = Math.abs(adivinanza - numeroSecreto);\n\n            if (diferencia &lt;= 5) {\n                console.log(\"\u00a1Cerca! Est\u00e1s muy cerca del n\u00famero\");\n            } else if (adivinanza &lt; numeroSecreto) {\n                console.log(\"Muy bajo. El n\u00famero es mayor\");\n            } else {\n                console.log(\"Muy alto. El n\u00famero es menor\");\n            }\n\n            if (intentos &lt; maxIntentos) {\n                console.log(`Te quedan ${maxIntentos - intentos} intento(s)`);\n            }\n        }\n    }\n\n    if (adivinanza !== numeroSecreto) {\n        console.log(`Game Over. El n\u00famero era: ${numeroSecreto}`);\n    }\n}\n\n// Ejecutar el juego\njuegoAdivinanza();\n</code></pre> <p>Explicaci\u00f3n: Implementamos un juego completo con pistas inteligentes y l\u00edmite de intentos usando <code>while</code>.</p>"},{"location":"content/p3s/#ejercicio-while-10-procesador-de-calificaciones","title":"Ejercicio While 10: Procesador de Calificaciones","text":"<pre><code>// Ejercicio While 10: Procesador de Calificaciones\nconsole.log(\"=== Procesador de Calificaciones ===\");\n\nfunction procesarCalificaciones() {\n    let calificaciones = [];\n    let calificacion = 0;\n    let suma = 0;\n\n    console.log(\"Ingresa las calificaciones de los estudiantes\");\n    console.log(\"Ingresa -1 para terminar\");\n\n    while (calificacion !== -1) {\n        // En un entorno real, usar\u00edas prompt()\n        calificacion = parseFloat(prompt(\"Ingresa una calificaci\u00f3n (0-100) o -1 para terminar:\"));\n\n        if (calificacion !== -1) {\n            if (calificacion &gt;= 0 &amp;&amp; calificacion &lt;= 100) {\n                calificaciones.push(calificacion);\n                suma += calificacion;\n                console.log(`Calificaci\u00f3n ${calificaciones.length}: ${calificacion} agregada`);\n            } else {\n                console.log(\"Calificaci\u00f3n inv\u00e1lida. Debe estar entre 0 y 100\");\n            }\n        }\n    }\n\n    if (calificaciones.length &gt; 0) {\n        let promedio = suma / calificaciones.length;\n        let mayor = Math.max(...calificaciones);\n        let menor = Math.min(...calificaciones);\n\n        console.log(\"\\n=== RESULTADOS ===\");\n        console.log(`Total de calificaciones procesadas: ${calificaciones.length}`);\n        console.log(`Calificaciones: [${calificaciones.join(\", \")}]`);\n        console.log(`Promedio: ${promedio.toFixed(2)}`);\n        console.log(`Calificaci\u00f3n m\u00e1s alta: ${mayor}`);\n        console.log(`Calificaci\u00f3n m\u00e1s baja: ${menor}`);\n    } else {\n        console.log(\"No se ingresaron calificaciones v\u00e1lidas\");\n    }\n}\n\n// Ejecutar el procesador\nprocesarCalificaciones();\n</code></pre> <p>Explicaci\u00f3n: Procesamos calificaciones hasta que el usuario ingrese -1, calculando estad\u00edsticas al final.</p>"},{"location":"content/p3s/#soluciones-ejercicios-con-ciclo-for","title":"\ud83d\udd04 Soluciones - Ejercicios con Ciclo <code>for</code>","text":""},{"location":"content/p3s/#ejercicio-for-1-tabla-de-multiplicar-completa","title":"Ejercicio For 1: Tabla de Multiplicar Completa","text":"<pre><code>// Ejercicio For 1: Tabla de Multiplicar Completa\nconsole.log(\"=== Tablas de Multiplicar del 1 al 10 ===\");\n\nfor (let tabla = 1; tabla &lt;= 10; tabla++) {\n    console.log(`\\n--- TABLA DEL ${tabla} ---`);\n\n    for (let multiplicador = 1; multiplicador &lt;= 10; multiplicador++) {\n        let resultado = tabla * multiplicador;\n        console.log(`${tabla} x ${multiplicador} = ${resultado}`);\n    }\n}\n\nconsole.log(\"\\n\u00a1Todas las tablas completadas!\");\n</code></pre> <p>Explicaci\u00f3n: Usamos ciclos <code>for</code> anidados: el externo para cada tabla (1-10) y el interno para cada multiplicaci\u00f3n (1-10).</p>"},{"location":"content/p3s/#ejercicio-for-2-patron-de-asteriscos","title":"Ejercicio For 2: Patr\u00f3n de Asteriscos","text":"<pre><code>// Ejercicio For 2: Patr\u00f3n de Asteriscos\nconsole.log(\"=== Patr\u00f3n de Asteriscos ===\");\n\nlet altura = 5;\n\n// Primera parte: creciente (1 a 5 asteriscos)\nfor (let fila = 1; fila &lt;= altura; fila++) {\n    let linea = \"\";\n    for (let asterisco = 1; asterisco &lt;= fila; asterisco++) {\n        linea += \"*\";\n    }\n    console.log(linea);\n}\n\n// Segunda parte: decreciente (4 a 1 asteriscos)\nfor (let fila = altura - 1; fila &gt;= 1; fila--) {\n    let linea = \"\";\n    for (let asterisco = 1; asterisco &lt;= fila; asterisco++) {\n        linea += \"*\";\n    }\n    console.log(linea);\n}\n</code></pre> <p>Explicaci\u00f3n: Creamos el patr\u00f3n en dos partes: primero creciente y luego decreciente, usando ciclos <code>for</code> anidados.</p>"},{"location":"content/p3s/#ejercicio-for-3-analisis-de-array-de-numeros","title":"Ejercicio For 3: An\u00e1lisis de Array de N\u00fameros","text":"<pre><code>// Ejercicio For 3: An\u00e1lisis de Array de N\u00fameros\nconsole.log(\"=== An\u00e1lisis de Array de N\u00fameros ===\");\n\n// Generar array de 20 n\u00fameros aleatorios\nlet numeros = [];\nfor (let i = 0; i &lt; 20; i++) {\n    numeros.push(Math.floor(Math.random() * 100) + 1);\n}\n\nconsole.log(\"Array generado:\", numeros);\n\n// An\u00e1lisis usando ciclo for\nlet mayor = numeros[0];\nlet menor = numeros[0];\nlet suma = 0;\nlet pares = 0;\nlet impares = 0;\n\nfor (let i = 0; i &lt; numeros.length; i++) {\n    let numero = numeros[i];\n\n    // Actualizar mayor y menor\n    if (numero &gt; mayor) mayor = numero;\n    if (numero &lt; menor) menor = numero;\n\n    // Sumar para el promedio\n    suma += numero;\n\n    // Contar pares e impares\n    if (numero % 2 === 0) {\n        pares++;\n    } else {\n        impares++;\n    }\n\n    console.log(`Posici\u00f3n ${i}: ${numero} (Mayor: ${mayor}, Menor: ${menor}, Suma: ${suma})`);\n}\n\nlet promedio = suma / numeros.length;\n\nconsole.log(\"\\n=== RESULTADOS DEL AN\u00c1LISIS ===\");\nconsole.log(`N\u00famero mayor: ${mayor}`);\nconsole.log(`N\u00famero menor: ${menor}`);\nconsole.log(`Suma total: ${suma}`);\nconsole.log(`Promedio: ${promedio.toFixed(2)}`);\nconsole.log(`N\u00fameros pares: ${pares}`);\nconsole.log(`N\u00fameros impares: ${impares}`);\n</code></pre> <p>Explicaci\u00f3n: Analizamos un array con un solo ciclo <code>for</code>, calculando m\u00faltiples estad\u00edsticas en una sola pasada.</p>"},{"location":"content/p3s/#ejercicio-for-4-generador-de-numeros-primos","title":"Ejercicio For 4: Generador de N\u00fameros Primos","text":"<pre><code>// Ejercicio For 4: Generador de N\u00fameros Primos\nconsole.log(\"=== N\u00fameros Primos entre 1 y 100 ===\");\n\nlet numerosPrimos = [];\n\nfor (let numero = 2; numero &lt;= 100; numero++) {\n    let esPrimo = true;\n\n    // Verificar si el n\u00famero es primo\n    for (let divisor = 2; divisor &lt; numero; divisor++) {\n        if (numero % divisor === 0) {\n            esPrimo = false;\n            break; // No necesitamos seguir verificando\n        }\n    }\n\n    if (esPrimo) {\n        numerosPrimos.push(numero);\n        console.log(`${numero} es primo`);\n    }\n}\n\nconsole.log(`\\nSe encontraron ${numerosPrimos.length} n\u00fameros primos:`);\nconsole.log(numerosPrimos.join(\", \"));\n</code></pre> <p>Explicaci\u00f3n: Usamos ciclos <code>for</code> anidados para verificar cada n\u00famero: el externo recorre 2-100, el interno verifica si es primo.</p>"},{"location":"content/p3s/#ejercicio-for-5-invertir-cadenas-de-texto","title":"Ejercicio For 5: Invertir Cadenas de Texto","text":"<pre><code>// Ejercicio For 5: Invertir Cadenas de Texto\nconsole.log(\"=== Invertir Cadenas de Texto ===\");\n\nfunction invertirCadena(texto) {\n    let textoInvertido = \"\";\n\n    console.log(`Invirtiendo: \"${texto}\"`);\n    console.log(\"Proceso paso a paso:\");\n\n    for (let i = texto.length - 1; i &gt;= 0; i--) {\n        textoInvertido += texto[i];\n        console.log(`Paso ${texto.length - i}: Agregando '${texto[i]}' -&gt; \"${textoInvertido}\"`);\n    }\n\n    return textoInvertido;\n}\n\n// Ejemplos de uso\nlet frases = [\n    \"Hola Mundo\",\n    \"JavaScript\",\n    \"Programaci\u00f3n\",\n    \"CESDE\"\n];\n\nfor (let i = 0; i &lt; frases.length; i++) {\n    let original = frases[i];\n    let invertida = invertirCadena(original);\n\n    console.log(`\\nOriginal: \"${original}\"`);\n    console.log(`Invertida: \"${invertida}\"`);\n    console.log(\"---\");\n}\n</code></pre> <p>Explicaci\u00f3n: Recorremos la cadena desde el final hacia el inicio usando <code>for</code>, construyendo la cadena invertida car\u00e1cter por car\u00e1cter.</p>"},{"location":"content/p3s/#ejercicio-for-6-calculadora-de-potencias","title":"Ejercicio For 6: Calculadora de Potencias","text":"<pre><code>// Ejercicio For 6: Calculadora de Potencias\nconsole.log(\"=== Calculadora de Potencias ===\");\n\nfunction calcularPotencia(base, exponente) {\n    if (exponente === 0) {\n        console.log(`${base}^${exponente} = 1 (cualquier n\u00famero elevado a 0 es 1)`);\n        return 1;\n    }\n\n    let resultado = 1;\n\n    console.log(`Calculando ${base}^${exponente}:`);\n    console.log(`Paso inicial: resultado = 1`);\n\n    for (let i = 1; i &lt;= Math.abs(exponente); i++) {\n        resultado *= base;\n        console.log(`Paso ${i}: resultado = resultado * ${base} = ${resultado}`);\n    }\n\n    // Manejar exponentes negativos\n    if (exponente &lt; 0) {\n        resultado = 1 / resultado;\n        console.log(`Exponente negativo: resultado = 1/${resultado * base} = ${resultado}`);\n    }\n\n    return resultado;\n}\n\n// Ejemplos de uso\nlet ejemplos = [\n    {base: 2, exponente: 5},\n    {base: 3, exponente: 4},\n    {base: 5, exponente: 3},\n    {base: 10, exponente: 2}\n];\n\nfor (let i = 0; i &lt; ejemplos.length; i++) {\n    let {base, exponente} = ejemplos[i];\n    let resultado = calcularPotencia(base, exponente);\n    console.log(`\\nResultado final: ${base}^${exponente} = ${resultado}\\n`);\n}\n</code></pre> <p>Explicaci\u00f3n: Calculamos potencias multiplicando la base por s\u00ed misma el n\u00famero de veces indicado por el exponente.</p>"},{"location":"content/p3s/#ejercicio-for-7-matriz-de-suma","title":"Ejercicio For 7: Matriz de Suma","text":"<pre><code>// Ejercicio For 7: Matriz de Suma\nconsole.log(\"=== Matriz de Suma 5x5 ===\");\n\nlet matriz = [];\n\n// Crear y llenar la matriz\nfor (let fila = 0; fila &lt; 5; fila++) {\n    matriz[fila] = []; // Inicializar la fila\n\n    for (let columna = 0; columna &lt; 5; columna++) {\n        matriz[fila][columna] = fila + columna;\n    }\n}\n\n// Mostrar la matriz formateada\nconsole.log(\"Matriz donde cada elemento es la suma de sus \u00edndices (fila + columna):\");\nconsole.log(\"\\n   \", \"0\", \"1\", \"2\", \"3\", \"4\"); // Encabezado de columnas\n\nfor (let fila = 0; fila &lt; 5; fila++) {\n    let lineaTexto = fila + \": \";\n\n    for (let columna = 0; columna &lt; 5; columna++) {\n        lineaTexto += matriz[fila][columna] + \" \";\n    }\n\n    console.log(lineaTexto);\n}\n\n// Mostrar algunos ejemplos de c\u00e1lculo\nconsole.log(\"\\nEjemplos de c\u00e1lculo:\");\nfor (let fila = 0; fila &lt; 3; fila++) {\n    for (let columna = 0; columna &lt; 3; columna++) {\n        console.log(`matriz[${fila}][${columna}] = ${fila} + ${columna} = ${matriz[fila][columna]}`);\n    }\n}\n</code></pre> <p>Explicaci\u00f3n: Creamos una matriz 5x5 usando ciclos <code>for</code> anidados, donde cada elemento es la suma de sus \u00edndices.</p>"},{"location":"content/p3s/#ejercicio-for-8-contador-de-vocales","title":"Ejercicio For 8: Contador de Vocales","text":"<pre><code>// Ejercicio For 8: Contador de Vocales\nconsole.log(\"=== Contador de Vocales ===\");\n\nfunction contarVocales(frase) {\n    let vocales = {\n        'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0,\n        '\u00e1': 0, '\u00e9': 0, '\u00ed': 0, '\u00f3': 0, '\u00fa': 0\n    };\n\n    let totalVocales = 0;\n\n    console.log(`Analizando la frase: \"${frase}\"`);\n    console.log(\"Proceso car\u00e1cter por car\u00e1cter:\");\n\n    for (let i = 0; i &lt; frase.length; i++) {\n        let caracter = frase[i].toLowerCase();\n\n        if (vocales.hasOwnProperty(caracter)) {\n            vocales[caracter]++;\n            totalVocales++;\n            console.log(`Posici\u00f3n ${i}: '${frase[i]}' es vocal -&gt; ${caracter}: ${vocales[caracter]}`);\n        } else {\n            console.log(`Posici\u00f3n ${i}: '${frase[i]}' no es vocal`);\n        }\n    }\n\n    return {vocales, totalVocales};\n}\n\n// Ejemplos de uso\nlet frases = [\n    \"Hola mundo\",\n    \"JavaScript es genial\",\n    \"Programaci\u00f3n en CESDE\",\n    \"Aprendiendo ciclos for\"\n];\n\nfor (let i = 0; i &lt; frases.length; i++) {\n    let resultado = contarVocales(frases[i]);\n\n    console.log(\"\\n=== RESULTADOS ===\");\n    console.log(`Total de vocales: ${resultado.totalVocales}`);\n    console.log(\"Conteo por vocal:\");\n\n    for (let vocal in resultado.vocales) {\n        if (resultado.vocales[vocal] &gt; 0) {\n            console.log(`  ${vocal}: ${resultado.vocales[vocal]}`);\n        }\n    }\n    console.log(\"---\\n\");\n}\n</code></pre> <p>Explicaci\u00f3n: Recorremos cada car\u00e1cter de la frase con <code>for</code>, verificando si es vocal y contando cada tipo.</p>"},{"location":"content/p3s/#ejercicio-for-9-secuencia-matematica","title":"Ejercicio For 9: Secuencia Matem\u00e1tica","text":"<pre><code>// Ejercicio For 9: Secuencia Matem\u00e1tica\nconsole.log(\"=== Secuencia Matem\u00e1tica (Potencias de 2) ===\");\n\nlet secuencia = [];\nlet suma = 0;\n\nconsole.log(\"Generando la secuencia: 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\");\nconsole.log(\"(Cada t\u00e9rmino es 2 elevado a la potencia correspondiente)\");\n\nfor (let i = 1; i &lt;= 10; i++) {\n    let termino = Math.pow(2, i); // 2^i\n    secuencia.push(termino);\n    suma += termino;\n\n    console.log(`T\u00e9rmino ${i}: 2^${i} = ${termino} (Suma acumulada: ${suma})`);\n}\n\nconsole.log(`\\nSecuencia completa: [${secuencia.join(\", \")}]`);\nconsole.log(`Suma total de la secuencia: ${suma}`);\n\n// Verificaci\u00f3n alternativa sin Math.pow()\nconsole.log(\"\\nVerificaci\u00f3n calculando potencias manualmente:\");\nlet verificacion = 2;\nfor (let i = 1; i &lt;= 10; i++) {\n    console.log(`2^${i} = ${verificacion}`);\n    if (i &lt; 10) verificacion *= 2; // Preparar para la siguiente potencia\n}\n</code></pre> <p>Explicaci\u00f3n: Generamos la secuencia de potencias de 2 usando <code>for</code>, calculando cada t\u00e9rmino y la suma total.</p>"},{"location":"content/p3s/#ejercicio-for-10-validador-de-palindromo","title":"Ejercicio For 10: Validador de Pal\u00edndromo","text":"<pre><code>// Ejercicio For 10: Validador de Pal\u00edndromo\nconsole.log(\"=== Validador de Pal\u00edndromo ===\");\n\nfunction esPalindromo(texto) {\n    // Limpiar el texto: quitar espacios y convertir a min\u00fasculas\n    let textoLimpio = \"\";\n\n    for (let i = 0; i &lt; texto.length; i++) {\n        let caracter = texto[i].toLowerCase();\n        if (caracter !== ' ') {\n            textoLimpio += caracter;\n        }\n    }\n\n    console.log(`Texto original: \"${texto}\"`);\n    console.log(`Texto limpio: \"${textoLimpio}\"`);\n\n    // Verificar si es pal\u00edndromo comparando desde ambos extremos\n    let longitud = textoLimpio.length;\n    let esPalindromoFlag = true;\n\n    console.log(\"Verificando car\u00e1cter por car\u00e1cter:\");\n\n    for (let i = 0; i &lt; Math.floor(longitud / 2); i++) {\n        let caracterIzquierda = textoLimpio[i];\n        let caracterDerecha = textoLimpio[longitud - 1 - i];\n\n        console.log(`Posici\u00f3n ${i} vs ${longitud - 1 - i}: '${caracterIzquierda}' vs '${caracterDerecha}'`);\n\n        if (caracterIzquierda !== caracterDerecha) {\n            esPalindromoFlag = false;\n            console.log(\"  -&gt; No coinciden, no es pal\u00edndromo\");\n            break;\n        } else {\n            console.log(\"  -&gt; Coinciden \u2713\");\n        }\n    }\n\n    return esPalindromoFlag;\n}\n\n// Ejemplos de uso\nlet palabras = [\n    \"radar\",\n    \"nivel\",\n    \"anita lava la tina\",\n    \"hola\",\n    \"reconocer\",\n    \"a man a plan a canal panama\",\n    \"javascript\"\n];\n\nfor (let i = 0; i &lt; palabras.length; i++) {\n    let palabra = palabras[i];\n    let resultado = esPalindromo(palabra);\n\n    console.log(`\\nResultado: \"${palabra}\" ${resultado ? \"S\u00cd\" : \"NO\"} es un pal\u00edndromo\\n`);\n    console.log(\"---\");\n}\n</code></pre> <p>Explicaci\u00f3n: Verificamos si una palabra es pal\u00edndromo comparando caracteres desde ambos extremos hacia el centro usando <code>for</code>.</p>"},{"location":"content/p3s/#resumen-de-soluciones","title":"\ud83d\udccb Resumen de Soluciones","text":""},{"location":"content/p3s/#tecnicas-utilizadas-en-los-ejercicios-while","title":"T\u00e9cnicas Utilizadas en los Ejercicios <code>while</code>:","text":"<ol> <li>Contadores y decrementos - Control de iteraciones</li> <li>Acumuladores - Suma de valores</li> <li>Banderas booleanas - Control de condiciones</li> <li>Validaci\u00f3n de entrada - Verificaci\u00f3n de datos</li> <li>Generaci\u00f3n aleatoria - N\u00fameros aleatorios</li> <li>B\u00fasqueda secuencial - Encontrar elementos</li> <li>Manipulaci\u00f3n num\u00e9rica - Operaciones matem\u00e1ticas</li> <li>Secuencias matem\u00e1ticas - Fibonacci</li> <li>L\u00f3gica de juegos - Interactividad</li> <li>Procesamiento de datos - Estad\u00edsticas</li> </ol>"},{"location":"content/p3s/#tecnicas-utilizadas-en-los-ejercicios-for","title":"T\u00e9cnicas Utilizadas en los Ejercicios <code>for</code>:","text":"<ol> <li>Ciclos anidados - Tablas y matrices</li> <li>Patrones visuales - Asteriscos y formas</li> <li>An\u00e1lisis de arrays - Estad\u00edsticas m\u00faltiples</li> <li>Algoritmos matem\u00e1ticos - N\u00fameros primos</li> <li>Manipulaci\u00f3n de strings - Inversi\u00f3n de texto</li> <li>C\u00e1lculos iterativos - Potencias</li> <li>Estructuras bidimensionales - Matrices</li> <li>Conteo de caracteres - An\u00e1lisis de texto</li> <li>Secuencias num\u00e9ricas - Progresiones</li> <li>Algoritmos de verificaci\u00f3n - Pal\u00edndromos</li> </ol> <p>\u00a1Ejercicios Completados!</p> <p>Todas las soluciones implementan correctamente los ciclos especificados (<code>while</code> o <code>for</code>) y demuestran diferentes t\u00e9cnicas de programaci\u00f3n. Cada soluci\u00f3n incluye comentarios explicativos y ejemplos de salida para facilitar la comprensi\u00f3n.</p>"},{"location":"content/p4/","title":"Semana 4 - Fundamentos de Funciones en JavaScript","text":"<p>Introducci\u00f3n</p> <p>Las funciones son uno de los pilares fundamentales de JavaScript, un lenguaje de programaci\u00f3n din\u00e1mico y vers\u00e1til. Las funciones permiten encapsular bloques de c\u00f3digo reutilizables, facilitando la organizaci\u00f3n, modularidad y mantenimiento del c\u00f3digo. En esta semana, exploraremos los conceptos b\u00e1sicos de las funciones: qu\u00e9 son, c\u00f3mo se definen, sus diferentes tipos y c\u00f3mo trabajar con par\u00e1metros y valores de retorno. \ud83d\ude80</p>"},{"location":"content/p4/#que-es-una-funcion-en-javascript","title":"\ud83d\udccc \u00bfQu\u00e9 es una funci\u00f3n en JavaScript?","text":"<p>Una funci\u00f3n en JavaScript es un bloque de c\u00f3digo dise\u00f1ado para realizar una tarea espec\u00edfica que puede ser ejecutado cuando se le \"llama\" o invoca. Las funciones son objetos de primera clase, lo que significa que pueden ser asignadas a variables, pasadas como argumentos, retornadas desde otras funciones y m\u00e1s.</p> <p>Tip</p> <p>Las funciones no solo ejecutan c\u00f3digo, sino que tambi\u00e9n pueden devolver valores y ser utilizadas para estructurar programas de manera modular.</p>"},{"location":"content/p4/#formas-de-declarar-funciones","title":"\ud83d\udee0\ufe0f Formas de declarar funciones","text":"<p>Existen varias formas de definir funciones en JavaScript, cada una con sus caracter\u00edsticas y casos de uso. A continuaci\u00f3n, exploraremos las m\u00e1s comunes:</p>"},{"location":"content/p4/#1-declaracion-de-funcion-function-declaration","title":"1. Declaraci\u00f3n de funci\u00f3n (Function Declaration)","text":"<p>La forma m\u00e1s tradicional de definir una funci\u00f3n es mediante una declaraci\u00f3n de funci\u00f3n. Estas funciones son hoisted (elevadas), lo que significa que pueden ser invocadas antes de su definici\u00f3n en el c\u00f3digo.</p> <pre><code>function saludar(nombre) {\n    return `\u00a1Hola, ${nombre}!`;\n}\n\nconsole.log(saludar(\"Ana\")); // \u00a1Hola, Ana!\n</code></pre> <p>Note</p> <p>El hoisting permite que las declaraciones de funciones sean accesibles en todo el \u00e1mbito donde se definen, incluso antes de que aparezcan en el c\u00f3digo.</p>"},{"location":"content/p4/#2-expresion-de-funcion-function-expression","title":"2. Expresi\u00f3n de funci\u00f3n (Function Expression)","text":"<p>Una expresi\u00f3n de funci\u00f3n asigna una funci\u00f3n a una variable. A diferencia de las declaraciones, estas no son hoisted, por lo que deben definirse antes de usarse.</p> <pre><code>const despedirse = function(nombre) {\n    return `\u00a1Adi\u00f3s, ${nombre}!`;\n};\n\nconsole.log(despedirse(\"Juan\")); // \u00a1Adi\u00f3s, Juan!\n</code></pre> <p>Tip</p> <p>Las expresiones de funci\u00f3n son \u00fatiles cuando necesitas asignar funciones a variables o pasarlas como argumentos a otras funciones.</p>"},{"location":"content/p4/#3-funciones-flecha-arrow-functions","title":"3. Funciones flecha (Arrow Functions)","text":"<p>Introducidas en ES6, las funciones flecha ofrecen una sintaxis m\u00e1s concisa y tienen un comportamiento especial con el contexto de <code>this</code>.</p> <pre><code>const sumar = (a, b) =&gt; a + b;\n\nconsole.log(sumar(5, 3)); // 8\n</code></pre> <p>Warning</p> <p>Las funciones flecha no tienen su propio <code>this</code>, lo que las hace ideales para callbacks, pero cuidado al usarlas en objetos donde el contexto de <code>this</code> es importante.</p>"},{"location":"content/p4/#4-funciones-anonimas","title":"4. Funciones an\u00f3nimas","text":"<p>Las funciones an\u00f3nimas no tienen un nombre y suelen usarse como argumentos en otras funciones o en expresiones.</p> <pre><code>setTimeout(function() {\n    console.log(\"\u00a1Han pasado 2 segundos!\");\n}, 2000);\n</code></pre>"},{"location":"content/p4/#5-funciones-inmediatamente-invocadas-iife","title":"5. Funciones inmediatamente invocadas (IIFE)","text":"<p>Una IIFE (Immediately Invoked Function Expression) es una funci\u00f3n que se ejecuta inmediatamente despu\u00e9s de definirse.</p> <pre><code>(function() {\n    console.log(\"\u00a1Me ejecut\u00e9 al instante!\");\n})();\n</code></pre> <p>Success</p> <p>Las IIFE son \u00fatiles para crear un \u00e1mbito aislado y evitar contaminar el \u00e1mbito global.</p>"},{"location":"content/p4/#parametros-y-argumentos","title":"\ud83d\udd0d Par\u00e1metros y argumentos","text":"<p>Las funciones pueden recibir par\u00e1metros, que son variables definidas en la declaraci\u00f3n de la funci\u00f3n, y argumentos, que son los valores que se pasan al invocar la funci\u00f3n.</p>"},{"location":"content/p4/#parametros-por-defecto","title":"Par\u00e1metros por defecto","text":"<p>Desde ES6, puedes asignar valores por defecto a los par\u00e1metros.</p> <pre><code>function saludar(nombre = \"Invitado\") {\n    return `\u00a1Hola, ${nombre}!`;\n}\n\nconsole.log(saludar()); // \u00a1Hola, Invitado!\nconsole.log(saludar(\"Luc\u00eda\")); // \u00a1Hola, Luc\u00eda!\n</code></pre>"},{"location":"content/p4/#parametro-rest","title":"Par\u00e1metro rest (<code>...</code>)","text":"<p>El operador rest permite pasar un n\u00famero indefinido de argumentos como un arreglo.</p> <pre><code>function sumarTodo(...numeros) {\n    return numeros.reduce((total, num) =&gt; total + num, 0);\n}\n\nconsole.log(sumarTodo(1, 2, 3, 4)); // 10\n</code></pre>"},{"location":"content/p4/#parametros-nombrados-con-objetos","title":"Par\u00e1metros nombrados con objetos","text":"<p>Puedes pasar un objeto como par\u00e1metro para manejar m\u00faltiples valores de forma m\u00e1s organizada.</p> <pre><code>function configurarUsuario({ nombre, edad, email }) {\n    return `Usuario: ${nombre}, Edad: ${edad}, Email: ${email}`;\n}\n\nconsole.log(configurarUsuario({ nombre: \"Ana\", edad: 25, email: \"ana@example.com\" }));\n</code></pre> <p>Tip</p> <p>Los par\u00e1metros nombrados mejoran la legibilidad y flexibilidad al trabajar con m\u00faltiples argumentos.</p>"},{"location":"content/p4/#valor-de-retorno","title":"\ud83d\udce4 Valor de retorno","text":"<p>Las funciones pueden devolver un valor usando la palabra clave <code>return</code>. Si no se especifica, la funci\u00f3n devuelve <code>undefined</code> por defecto.</p> <pre><code>function multiplicar(a, b) {\n    return a * b;\n}\n\nconsole.log(multiplicar(4, 5)); // 20\n</code></pre> <p>Note</p> <p>Todo lo que se escriba despu\u00e9s de <code>return</code> no se ejecutar\u00e1, ya que la funci\u00f3n termina su ejecuci\u00f3n en ese punto.</p>"},{"location":"content/p4/#ambito-y-closure","title":"\ud83c\udf10 \u00c1mbito y closure","text":""},{"location":"content/p4/#ambito-scope","title":"\u00c1mbito (Scope)","text":"<p>El \u00e1mbito determina d\u00f3nde una variable es accesible. JavaScript tiene dos tipos principales de \u00e1mbito:</p> <ul> <li>\u00c1mbito global: Variables definidas fuera de cualquier funci\u00f3n.</li> <li>\u00c1mbito local: Variables definidas dentro de una funci\u00f3n.</li> </ul> <pre><code>let global = \"Soy global\";\n\nfunction miFuncion() {\n    let local = \"Soy local\";\n    console.log(global); // Accesible\n    console.log(local); // Accesible\n}\n\nconsole.log(global); // Accesible\n// console.log(local); // Error: local is not defined\n</code></pre>"},{"location":"content/p4/#closure","title":"Closure","text":"<p>Un closure ocurre cuando una funci\u00f3n interna tiene acceso a las variables de su funci\u00f3n externa, incluso despu\u00e9s de que la funci\u00f3n externa haya terminado de ejecutarse.</p> <pre><code>function crearContador() {\n    let contador = 0;\n    return function() {\n        return contador++;\n    };\n}\n\nconst contador1 = crearContador();\nconsole.log(contador1()); // 0\nconsole.log(contador1()); // 1\n</code></pre> <p>Success</p> <p>Los closures son ideales para crear funciones con estado privado, como contadores o m\u00f3dulos.</p>"},{"location":"content/p4/#ejemplos-practicos","title":"\ud83d\udd27 Ejemplos pr\u00e1cticos","text":""},{"location":"content/p4/#calculadora-basica-con-funciones","title":"Calculadora b\u00e1sica con funciones","text":"<pre><code>// Funciones para operaciones b\u00e1sicas\nfunction sumar(a, b) {\n    return a + b;\n}\n\nfunction restar(a, b) {\n    return a - b;\n}\n\nfunction multiplicar(a, b) {\n    return a * b;\n}\n\nfunction dividir(a, b) {\n    if (b === 0) {\n        return \"Error: Divisi\u00f3n por cero\";\n    }\n    return a / b;\n}\n\n// Funci\u00f3n principal de la calculadora\nfunction calculadora(operacion, num1, num2) {\n    switch(operacion) {\n        case 'suma':\n            return sumar(num1, num2);\n        case 'resta':\n            return restar(num1, num2);\n        case 'multiplicacion':\n            return multiplicar(num1, num2);\n        case 'division':\n            return dividir(num1, num2);\n        default:\n            return \"Operaci\u00f3n no v\u00e1lida\";\n    }\n}\n\nconsole.log(calculadora('suma', 10, 5)); // 15\nconsole.log(calculadora('division', 10, 0)); // Error: Divisi\u00f3n por cero\n</code></pre>"},{"location":"content/p4/#validador-de-datos","title":"Validador de datos","text":"<pre><code>// Funci\u00f3n para validar email\nfunction validarEmail(email) {\n    const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return regex.test(email);\n}\n\n// Funci\u00f3n para validar contrase\u00f1a\nfunction validarContrasena(contrasena) {\n    return contrasena.length &gt;= 8;\n}\n\n// Funci\u00f3n para validar edad\nfunction validarEdad(edad) {\n    return edad &gt;= 18 &amp;&amp; edad &lt;= 120;\n}\n\n// Funci\u00f3n principal de validaci\u00f3n\nfunction validarUsuario(datos) {\n    const errores = [];\n\n    if (!validarEmail(datos.email)) {\n        errores.push(\"Email no v\u00e1lido\");\n    }\n\n    if (!validarContrasena(datos.contrasena)) {\n        errores.push(\"La contrase\u00f1a debe tener al menos 8 caracteres\");\n    }\n\n    if (!validarEdad(datos.edad)) {\n        errores.push(\"La edad debe estar entre 18 y 120 a\u00f1os\");\n    }\n\n    return {\n        valido: errores.length === 0,\n        errores: errores\n    };\n}\n\nconst usuario = {\n    email: \"juan@example.com\",\n    contrasena: \"mipassword123\",\n    edad: 25\n};\n\nconsole.log(validarUsuario(usuario));\n</code></pre>"},{"location":"content/p4/#buenas-practicas","title":"\ud83d\uded1 Buenas pr\u00e1cticas","text":"<ol> <li>Nombra tus funciones de manera clara para reflejar su prop\u00f3sito.</li> <li>Evita funciones demasiado largas. Divide el c\u00f3digo en funciones m\u00e1s peque\u00f1as.</li> <li>Usa par\u00e1metros por defecto para manejar casos no definidos.</li> <li>Documenta tus funciones con comentarios explicativos.</li> <li>Valida los par\u00e1metros antes de procesarlos.</li> <li>Usa nombres descriptivos para par\u00e1metros y variables.</li> <li>Evita efectos secundarios innecesarios.</li> <li>Retorna valores consistentes del mismo tipo.</li> </ol> <p>Consejo profesional</p> <p>Una funci\u00f3n debe hacer una sola cosa y hacerla bien. Si tu funci\u00f3n tiene m\u00e1s de 20 l\u00edneas, probablemente deber\u00eda dividirse en funciones m\u00e1s peque\u00f1as.</p>"},{"location":"content/p4/#ejercicios-de-practica","title":"\ud83d\udcda Ejercicios de pr\u00e1ctica","text":""},{"location":"content/p4/#ejercicio-1-conversor-de-temperatura","title":"Ejercicio 1: Conversor de temperatura","text":"<p>Crea funciones para convertir entre Celsius, Fahrenheit y Kelvin.</p> <pre><code>// Tu c\u00f3digo aqu\u00ed\nfunction celsiusAFahrenheit(celsius) {\n    // Implementar\n}\n\nfunction fahrenheitACelsius(fahrenheit) {\n    // Implementar\n}\n\nfunction celsiusAKelvin(celsius) {\n    // Implementar\n}\n</code></pre>"},{"location":"content/p4/#ejercicio-2-generador-de-contrasenas","title":"Ejercicio 2: Generador de contrase\u00f1as","text":"<p>Crea una funci\u00f3n que genere contrase\u00f1as aleatorias con diferentes opciones.</p> <pre><code>// Tu c\u00f3digo aqu\u00ed\nfunction generarContrasena(longitud = 8, incluirMayusculas = true, incluirNumeros = true, incluirSimbolos = false) {\n    // Implementar\n}\n</code></pre>"},{"location":"content/p4/#ejercicio-3-calculadora-de-imc","title":"Ejercicio 3: Calculadora de IMC","text":"<p>Crea funciones para calcular el \u00cdndice de Masa Corporal y clasificar el resultado.</p> <pre><code>// Tu c\u00f3digo aqu\u00ed\nfunction calcularIMC(peso, altura) {\n    // Implementar\n}\n\nfunction clasificarIMC(imc) {\n    // Implementar\n}\n</code></pre> <p>Pr\u00f3xima semana</p> <p>En la Semana 5 exploraremos conceptos avanzados de funciones como closures, funciones de orden superior, m\u00e9todos de funciones y patrones avanzados de programaci\u00f3n funcional.</p>"},{"location":"content/p5/","title":"Semana 5 - Funciones Avanzadas en JavaScript","text":"<p>Introducci\u00f3n</p> <p>En esta semana profundizaremos en los conceptos avanzados de las funciones en JavaScript. Exploraremos closures, funciones de orden superior, m\u00e9todos de funciones, recursividad, y patrones avanzados de programaci\u00f3n funcional que te permitir\u00e1n escribir c\u00f3digo m\u00e1s elegante y eficiente. \ud83d\ude80</p>"},{"location":"content/p5/#funciones-como-objetos-de-primera-clase","title":"\u2699\ufe0f Funciones como objetos de primera clase","text":"<p>En JavaScript, las funciones son objetos de primera clase, lo que significa que pueden:</p> <ul> <li>Ser asignadas a variables.</li> <li>Ser pasadas como argumentos.</li> <li>Ser devueltas por otras funciones.</li> <li>Tener propiedades y m\u00e9todos.</li> </ul> <pre><code>function operacion(a, b, callback) {\n    return callback(a, b);\n}\n\nconst suma = (a, b) =&gt; a + b;\nconst multiplicacion = (a, b) =&gt; a * b;\n\nconsole.log(operacion(5, 3, suma)); // 8\nconsole.log(operacion(5, 3, multiplicacion)); // 15\n\n// Las funciones pueden tener propiedades\nsuma.descripcion = \"Funci\u00f3n que suma dos n\u00fameros\";\nconsole.log(suma.descripcion);\n</code></pre> <p>Tip</p> <p>Esta caracter\u00edstica hace que JavaScript sea extremadamente flexible para la programaci\u00f3n funcional y el desarrollo de patrones avanzados.</p>"},{"location":"content/p5/#closures-clausuras","title":"\ud83d\udd04 Closures (Clausuras)","text":"<p>Un closure es una caracter\u00edstica poderosa que permite a una funci\u00f3n acceder a variables de su \u00e1mbito externo, incluso despu\u00e9s de que la funci\u00f3n externa haya terminado de ejecutarse.</p>"},{"location":"content/p5/#ejemplo-basico-de-closure","title":"Ejemplo b\u00e1sico de closure","text":"<pre><code>function crearContador() {\n    let contador = 0;\n\n    return function() {\n        contador++;\n        return contador;\n    };\n}\n\nconst contador1 = crearContador();\nconst contador2 = crearContador();\n\nconsole.log(contador1()); // 1\nconsole.log(contador1()); // 2\nconsole.log(contador2()); // 1 (independiente)\nconsole.log(contador1()); // 3\n</code></pre>"},{"location":"content/p5/#closure-con-parametros","title":"Closure con par\u00e1metros","text":"<pre><code>function crearMultiplicador(factor) {\n    return function(numero) {\n        return numero * factor;\n    };\n}\n\nconst duplicar = crearMultiplicador(2);\nconst triplicar = crearMultiplicador(3);\n\nconsole.log(duplicar(5)); // 10\nconsole.log(triplicar(5)); // 15\n</code></pre>"},{"location":"content/p5/#patron-modulo-con-closures","title":"Patr\u00f3n m\u00f3dulo con closures","text":"<pre><code>const calculadoraAvanzada = (function() {\n    let historial = [];\n\n    return {\n        sumar: function(a, b) {\n            const resultado = a + b;\n            historial.push(`${a} + ${b} = ${resultado}`);\n            return resultado;\n        },\n\n        restar: function(a, b) {\n            const resultado = a - b;\n            historial.push(`${a} - ${b} = ${resultado}`);\n            return resultado;\n        },\n\n        obtenerHistorial: function() {\n            return [...historial]; // Copia del historial\n        },\n\n        limpiarHistorial: function() {\n            historial = [];\n        }\n    };\n})();\n\nconsole.log(calculadoraAvanzada.sumar(5, 3)); // 8\nconsole.log(calculadoraAvanzada.restar(10, 4)); // 6\nconsole.log(calculadoraAvanzada.obtenerHistorial());\n</code></pre> <p>Success</p> <p>Los closures son fundamentales para crear m\u00f3dulos, mantener estado privado y implementar patrones como el patr\u00f3n factory.</p>"},{"location":"content/p5/#funciones-de-orden-superior","title":"\ud83c\udfa8 Funciones de orden superior","text":"<p>Una funci\u00f3n de orden superior es aquella que: - Recibe una o m\u00e1s funciones como argumentos - Devuelve una funci\u00f3n como resultado - O ambas</p>"},{"location":"content/p5/#metodos-de-array-como-funciones-de-orden-superior","title":"M\u00e9todos de array como funciones de orden superior","text":"<pre><code>const numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n// filter - filtra elementos\nconst pares = numeros.filter(num =&gt; num % 2 === 0);\nconsole.log(pares); // [2, 4, 6, 8, 10]\n\n// map - transforma elementos\nconst cuadrados = numeros.map(num =&gt; num ** 2);\nconsole.log(cuadrados); // [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n// reduce - reduce a un solo valor\nconst suma = numeros.reduce((acc, num) =&gt; acc + num, 0);\nconsole.log(suma); // 55\n\n// Combinando m\u00e9todos\nconst sumaCuadradosPares = numeros\n    .filter(num =&gt; num % 2 === 0)\n    .map(num =&gt; num ** 2)\n    .reduce((acc, num) =&gt; acc + num, 0);\n\nconsole.log(sumaCuadradosPares); // 220\n</code></pre>"},{"location":"content/p5/#creando-nuestras-propias-funciones-de-orden-superior","title":"Creando nuestras propias funciones de orden superior","text":"<pre><code>// Funci\u00f3n que aplica una operaci\u00f3n a todos los elementos\nfunction aplicarOperacion(array, operacion) {\n    const resultado = [];\n    for (let i = 0; i &lt; array.length; i++) {\n        resultado.push(operacion(array[i]));\n    }\n    return resultado;\n}\n\n// Funci\u00f3n que crea validadores\nfunction crearValidador(condicion, mensaje) {\n    return function(valor) {\n        if (condicion(valor)) {\n            return { valido: true };\n        } else {\n            return { valido: false, mensaje: mensaje };\n        }\n    };\n}\n\nconst validarEdad = crearValidador(\n    edad =&gt; edad &gt;= 18 &amp;&amp; edad &lt;= 120,\n    \"La edad debe estar entre 18 y 120 a\u00f1os\"\n);\n\nconst validarEmail = crearValidador(\n    email =&gt; /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email),\n    \"El email no tiene un formato v\u00e1lido\"\n);\n\nconsole.log(validarEdad(25)); // { valido: true }\nconsole.log(validarEmail(\"test\")); // { valido: false, mensaje: \"...\" }\n</code></pre>"},{"location":"content/p5/#metodos-de-funciones","title":"\ud83d\udd27 M\u00e9todos de funciones","text":"<p>Las funciones en JavaScript tienen m\u00e9todos integrados que permiten controlar su contexto de ejecuci\u00f3n.</p>"},{"location":"content/p5/#call-apply-y-bind","title":"call(), apply() y bind()","text":"<pre><code>const persona1 = { nombre: \"Ana\", edad: 25 };\nconst persona2 = { nombre: \"Carlos\", edad: 30 };\n\nfunction presentarse(saludo, profesion) {\n    return `${saludo}, soy ${this.nombre}, tengo ${this.edad} a\u00f1os y soy ${profesion}`;\n}\n\n// call() - argumentos separados\nconsole.log(presentarse.call(persona1, \"Hola\", \"desarrolladora\"));\n// \"Hola, soy Ana, tengo 25 a\u00f1os y soy desarrolladora\"\n\n// apply() - argumentos en array\nconsole.log(presentarse.apply(persona2, [\"Buenos d\u00edas\", \"dise\u00f1ador\"]));\n// \"Buenos d\u00edas, soy Carlos, tengo 30 a\u00f1os y soy dise\u00f1ador\"\n\n// bind() - crea una nueva funci\u00f3n con contexto fijo\nconst presentarAna = presentarse.bind(persona1);\nconsole.log(presentarAna(\"Saludos\", \"programadora\"));\n// \"Saludos, soy Ana, tengo 25 a\u00f1os y soy programadora\"\n</code></pre>"},{"location":"content/p5/#uso-practico-con-eventos","title":"Uso pr\u00e1ctico con eventos","text":"<pre><code>class Contador {\n    constructor() {\n        this.valor = 0;\n    }\n\n    incrementar() {\n        this.valor++;\n        console.log(`Contador: ${this.valor}`);\n    }\n\n    configurarBoton(botonId) {\n        const boton = document.getElementById(botonId);\n        // Sin bind, 'this' ser\u00eda el bot\u00f3n, no el contador\n        boton.addEventListener('click', this.incrementar.bind(this));\n    }\n}\n</code></pre>"},{"location":"content/p5/#funciones-recursivas","title":"\ud83d\udd04 Funciones recursivas","text":"<p>Una funci\u00f3n recursiva se llama a s\u00ed misma para resolver un problema dividi\u00e9ndolo en subproblemas m\u00e1s peque\u00f1os.</p>"},{"location":"content/p5/#ejemplos-clasicos","title":"Ejemplos cl\u00e1sicos","text":"<pre><code>// Factorial\nfunction factorial(n) {\n    // Caso base\n    if (n &lt;= 1) return 1;\n    // Caso recursivo\n    return n * factorial(n - 1);\n}\n\nconsole.log(factorial(5)); // 120\n\n// Fibonacci\nfunction fibonacci(n) {\n    if (n &lt;= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconsole.log(fibonacci(10)); // 55\n\n// Fibonacci optimizado con memoizaci\u00f3n\nfunction fibonacciMemo(n, memo = {}) {\n    if (n in memo) return memo[n];\n    if (n &lt;= 1) return n;\n\n    memo[n] = fibonacciMemo(n - 1, memo) + fibonacciMemo(n - 2, memo);\n    return memo[n];\n}\n\nconsole.log(fibonacciMemo(50)); // Mucho m\u00e1s r\u00e1pido\n</code></pre>"},{"location":"content/p5/#recursion-con-estructuras-de-datos","title":"Recursi\u00f3n con estructuras de datos","text":"<pre><code>// Recorrer un \u00e1rbol de directorios\nconst estructura = {\n    nombre: \"proyecto\",\n    tipo: \"carpeta\",\n    contenido: [\n        {\n            nombre: \"src\",\n            tipo: \"carpeta\",\n            contenido: [\n                { nombre: \"index.js\", tipo: \"archivo\" },\n                { nombre: \"utils.js\", tipo: \"archivo\" }\n            ]\n        },\n        { nombre: \"README.md\", tipo: \"archivo\" }\n    ]\n};\n\nfunction listarArchivos(estructura, nivel = 0) {\n    const indentacion = \"  \".repeat(nivel);\n    console.log(`${indentacion}${estructura.nombre}`);\n\n    if (estructura.contenido) {\n        estructura.contenido.forEach(item =&gt; {\n            listarArchivos(item, nivel + 1);\n        });\n    }\n}\n\nlistarArchivos(estructura);\n</code></pre>"},{"location":"content/p5/#programacion-funcional","title":"\ud83c\udfaf Programaci\u00f3n funcional","text":""},{"location":"content/p5/#funciones-puras","title":"Funciones puras","text":"<p>Una funci\u00f3n pura: - Siempre devuelve el mismo resultado para los mismos argumentos - No tiene efectos secundarios</p> <pre><code>// Funci\u00f3n pura\nfunction sumarPuro(a, b) {\n    return a + b;\n}\n\n// Funci\u00f3n impura (modifica estado externo)\nlet contador = 0;\nfunction sumarImpuro(a, b) {\n    contador++; // Efecto secundario\n    return a + b;\n}\n</code></pre>"},{"location":"content/p5/#composicion-de-funciones","title":"Composici\u00f3n de funciones","text":"<pre><code>// Funciones simples\nconst duplicar = x =&gt; x * 2;\nconst sumarUno = x =&gt; x + 1;\nconst elevarAlCuadrado = x =&gt; x ** 2;\n\n// Composici\u00f3n manual\nconst resultado1 = elevarAlCuadrado(sumarUno(duplicar(3)));\nconsole.log(resultado1); // 49\n\n// Funci\u00f3n para componer\nfunction componer(...funciones) {\n    return function(valor) {\n        return funciones.reduceRight((acc, fn) =&gt; fn(acc), valor);\n    };\n}\n\nconst operacionCompuesta = componer(elevarAlCuadrado, sumarUno, duplicar);\nconsole.log(operacionCompuesta(3)); // 49\n</code></pre>"},{"location":"content/p5/#currying","title":"Currying","text":"<pre><code>// Funci\u00f3n normal\nfunction multiplicar(a, b, c) {\n    return a * b * c;\n}\n\n// Funci\u00f3n currificada\nfunction multiplicarCurry(a) {\n    return function(b) {\n        return function(c) {\n            return a * b * c;\n        };\n    };\n}\n\n// Uso\nconst multiplicarPor2 = multiplicarCurry(2);\nconst multiplicarPor2Y3 = multiplicarPor2(3);\nconsole.log(multiplicarPor2Y3(4)); // 24\n\n// Versi\u00f3n con arrow functions\nconst multiplicarCurryArrow = a =&gt; b =&gt; c =&gt; a * b * c;\nconsole.log(multiplicarCurryArrow(2)(3)(4)); // 24\n</code></pre>"},{"location":"content/p5/#patrones-avanzados","title":"\ud83d\ude80 Patrones avanzados","text":""},{"location":"content/p5/#patron-factory","title":"Patr\u00f3n Factory","text":"<pre><code>function crearUsuario(nombre, email, rol = 'usuario') {\n    return {\n        nombre,\n        email,\n        rol,\n        activo: true,\n\n        activar() {\n            this.activo = true;\n            return this;\n        },\n\n        desactivar() {\n            this.activo = false;\n            return this;\n        },\n\n        cambiarRol(nuevoRol) {\n            this.rol = nuevoRol;\n            return this;\n        },\n\n        obtenerInfo() {\n            return `${this.nombre} (${this.email}) - ${this.rol} - ${this.activo ? 'Activo' : 'Inactivo'}`;\n        }\n    };\n}\n\nconst usuario = crearUsuario(\"Ana\", \"ana@example.com\")\n    .cambiarRol(\"admin\")\n    .activar();\n\nconsole.log(usuario.obtenerInfo());\n</code></pre>"},{"location":"content/p5/#patron-observer-con-funciones","title":"Patr\u00f3n Observer con funciones","text":"<pre><code>function crearObservable() {\n    let observadores = [];\n\n    return {\n        suscribir(callback) {\n            observadores.push(callback);\n\n            // Retorna funci\u00f3n para desuscribirse\n            return function desuscribir() {\n                observadores = observadores.filter(obs =&gt; obs !== callback);\n            };\n        },\n\n        notificar(datos) {\n            observadores.forEach(callback =&gt; callback(datos));\n        }\n    };\n}\n\nconst evento = crearObservable();\n\nconst desuscribir1 = evento.suscribir(datos =&gt; console.log(\"Observer 1:\", datos));\nconst desuscribir2 = evento.suscribir(datos =&gt; console.log(\"Observer 2:\", datos));\n\nevento.notificar(\"\u00a1Hola mundo!\"); // Ambos observadores reciben el mensaje\n\ndesuscribir1(); // Desuscribe el primer observador\nevento.notificar(\"Solo el segundo observador ver\u00e1 esto\");\n</code></pre>"},{"location":"content/p5/#buenas-practicas-avanzadas","title":"\ud83d\uded1 Buenas pr\u00e1cticas avanzadas","text":"<ol> <li>Prefiere funciones puras cuando sea posible</li> <li>Usa closures para encapsular estado privado</li> <li>Aprovecha las funciones de orden superior para c\u00f3digo m\u00e1s expresivo</li> <li>Evita la recursi\u00f3n profunda sin optimizaci\u00f3n</li> <li>Usa memoizaci\u00f3n para optimizar funciones costosas</li> <li>Comp\u00f3n funciones peque\u00f1as en lugar de crear funciones grandes</li> <li>Documenta el comportamiento de closures y contexto</li> <li>Considera el rendimiento al usar m\u00e9todos de array encadenados</li> </ol> <p>Cuidado con la recursi\u00f3n</p> <p>JavaScript no optimiza la recursi\u00f3n de cola, por lo que recursiones muy profundas pueden causar stack overflow. Considera usar iteraci\u00f3n o trampolining para casos extremos.</p>"},{"location":"content/p5/#ejercicios-avanzados","title":"\ud83d\udcda Ejercicios avanzados","text":""},{"location":"content/p5/#ejercicio-1-sistema-de-cache-con-closures","title":"Ejercicio 1: Sistema de cache con closures","text":"<pre><code>// Implementa una funci\u00f3n que cree un sistema de cache\nfunction crearCache(tiempoExpiracion = 60000) {\n    // Tu c\u00f3digo aqu\u00ed\n    // Debe retornar un objeto con m\u00e9todos get, set, clear\n}\n</code></pre>"},{"location":"content/p5/#ejercicio-2-funcion-de-debounce","title":"Ejercicio 2: Funci\u00f3n de debounce","text":"<pre><code>// Implementa una funci\u00f3n debounce que retrase la ejecuci\u00f3n\nfunction debounce(func, delay) {\n    // Tu c\u00f3digo aqu\u00ed\n}\n</code></pre>"},{"location":"content/p5/#ejercicio-3-pipeline-de-transformaciones","title":"Ejercicio 3: Pipeline de transformaciones","text":"<pre><code>// Crea una funci\u00f3n que permita encadenar transformaciones\nfunction pipeline(...funciones) {\n    // Tu c\u00f3digo aqu\u00ed\n}\n\n// Uso esperado:\n// const transformar = pipeline(duplicar, sumarUno, elevarAlCuadrado);\n// console.log(transformar(3)); // 49\n</code></pre>"},{"location":"content/p6/","title":"Semana 6","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p7/","title":"Semana 7 - Estructuras de Datos en JavaScript","text":"<p>Introducci\u00f3n</p> <p>Las estructuras de datos son fundamentales en JavaScript para organizar, almacenar y manipular informaci\u00f3n de manera eficiente. En esta semana exploraremos los arreglos (arrays) y objetos, sus m\u00e9todos m\u00e1s importantes, y t\u00e9cnicas avanzadas como la desestructuraci\u00f3n que nos permitir\u00e1n trabajar con datos de forma m\u00e1s elegante y productiva. \ud83d\ude80</p>"},{"location":"content/p7/#arreglos-arrays","title":"\ud83d\udcca Arreglos (Arrays)","text":"<p>Los arreglos son estructuras de datos que permiten almacenar m\u00faltiples valores en una sola variable. En JavaScript, los arreglos son din\u00e1micos y pueden contener elementos de diferentes tipos.</p>"},{"location":"content/p7/#creacion-de-arreglos","title":"Creaci\u00f3n de arreglos","text":"<pre><code>// Diferentes formas de crear arreglos\nconst numeros = [1, 2, 3, 4, 5];\nconst frutas = ['manzana', 'banana', 'naranja'];\nconst mixto = [1, 'texto', true, null, { nombre: 'Juan' }];\nconst vacio = [];\n\n// Usando el constructor Array\nconst arregloConstructor = new Array(5); // Arreglo con 5 elementos undefined\nconst arregloElementos = new Array(1, 2, 3); // [1, 2, 3]\n\nconsole.log(numeros.length); // 5\nconsole.log(frutas[0]); // 'manzana'\nconsole.log(mixto[4].nombre); // 'Juan'\n</code></pre>"},{"location":"content/p7/#propiedades-y-caracteristicas","title":"Propiedades y caracter\u00edsticas","text":"<pre><code>const colores = ['rojo', 'verde', 'azul'];\n\n// Propiedad length\nconsole.log(colores.length); // 3\n\n// Los \u00edndices comienzan en 0\nconsole.log(colores[0]); // 'rojo'\nconsole.log(colores[2]); // 'azul'\n\n// Acceso a elementos inexistentes\nconsole.log(colores[10]); // undefined\n\n// Modificar elementos\ncolores[1] = 'amarillo';\nconsole.log(colores); // ['rojo', 'amarillo', 'azul']\n\n// Agregar elementos modificando length\ncolores[colores.length] = 'morado';\nconsole.log(colores); // ['rojo', 'amarillo', 'azul', 'morado']\n</code></pre> <p>Tip</p> <p>Los arreglos en JavaScript son objetos especiales con \u00edndices num\u00e9ricos y la propiedad <code>length</code> que se actualiza autom\u00e1ticamente.</p>"},{"location":"content/p7/#metodos-de-arreglos","title":"\ud83d\udd27 M\u00e9todos de Arreglos","text":""},{"location":"content/p7/#metodos-que-modifican-el-arreglo-original","title":"M\u00e9todos que modifican el arreglo original","text":""},{"location":"content/p7/#push-y-pop","title":"push() y pop()","text":"<pre><code>const stack = [1, 2, 3];\n\n// push() - Agrega elementos al final\nstack.push(4);\nstack.push(5, 6); // Puede agregar m\u00faltiples elementos\nconsole.log(stack); // [1, 2, 3, 4, 5, 6]\n\n// pop() - Remueve y retorna el \u00faltimo elemento\nconst ultimo = stack.pop();\nconsole.log(ultimo); // 6\nconsole.log(stack); // [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"content/p7/#shift-y-unshift","title":"shift() y unshift()","text":"<pre><code>const queue = ['segundo', 'tercero'];\n\n// unshift() - Agrega elementos al inicio\nqueue.unshift('primero');\nqueue.unshift('cero', 'menos uno'); // M\u00faltiples elementos\nconsole.log(queue); // ['cero', 'menos uno', 'primero', 'segundo', 'tercero']\n\n// shift() - Remueve y retorna el primer elemento\nconst primero = queue.shift();\nconsole.log(primero); // 'cero'\nconsole.log(queue); // ['menos uno', 'primero', 'segundo', 'tercero']\n</code></pre>"},{"location":"content/p7/#splice","title":"splice()","text":"<pre><code>const animales = ['perro', 'gato', 'p\u00e1jaro', 'pez', 'hamster'];\n\n// splice(inicio, cantidad, ...elementos)\n// Eliminar elementos\nconst eliminados = animales.splice(1, 2); // Elimina 2 elementos desde \u00edndice 1\nconsole.log(eliminados); // ['gato', 'p\u00e1jaro']\nconsole.log(animales); // ['perro', 'pez', 'hamster']\n\n// Insertar elementos\nanimales.splice(1, 0, 'conejo', 'tortuga'); // Inserta sin eliminar\nconsole.log(animales); // ['perro', 'conejo', 'tortuga', 'pez', 'hamster']\n\n// Reemplazar elementos\nanimales.splice(2, 1, 'iguana'); // Reemplaza 'tortuga' con 'iguana'\nconsole.log(animales); // ['perro', 'conejo', 'iguana', 'pez', 'hamster']\n</code></pre>"},{"location":"content/p7/#sort-y-reverse","title":"sort() y reverse()","text":"<pre><code>const numeros = [3, 1, 4, 1, 5, 9, 2, 6];\nconst palabras = ['banana', 'apple', 'cherry', 'date'];\n\n// sort() - Ordena elementos (modifica el arreglo original)\nnumeros.sort((a, b) =&gt; a - b); // Orden ascendente\nconsole.log(numeros); // [1, 1, 2, 3, 4, 5, 6, 9]\n\npalabras.sort(); // Orden alfab\u00e9tico\nconsole.log(palabras); // ['apple', 'banana', 'cherry', 'date']\n\n// reverse() - Invierte el orden\nnumeros.reverse();\nconsole.log(numeros); // [9, 6, 5, 4, 3, 2, 1, 1]\n</code></pre>"},{"location":"content/p7/#metodos-que-no-modifican-el-arreglo-original","title":"M\u00e9todos que NO modifican el arreglo original","text":""},{"location":"content/p7/#slice","title":"slice()","text":"<pre><code>const original = [1, 2, 3, 4, 5];\n\n// slice(inicio, fin) - Extrae una porci\u00f3n\nconst porcion1 = original.slice(1, 4); // Desde \u00edndice 1 hasta 3\nconst porcion2 = original.slice(2); // Desde \u00edndice 2 hasta el final\nconst porcion3 = original.slice(-2); // \u00daltimos 2 elementos\n\nconsole.log(porcion1); // [2, 3, 4]\nconsole.log(porcion2); // [3, 4, 5]\nconsole.log(porcion3); // [4, 5]\nconsole.log(original); // [1, 2, 3, 4, 5] (sin cambios)\n</code></pre>"},{"location":"content/p7/#concat","title":"concat()","text":"<pre><code>const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst arr3 = [7, 8, 9];\n\n// concat() - Une arreglos\nconst unidos = arr1.concat(arr2, arr3);\nconst unidosSpread = [...arr1, ...arr2, ...arr3]; // Alternativa con spread\n\nconsole.log(unidos); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\nconsole.log(unidosSpread); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\nconsole.log(arr1); // [1, 2, 3] (sin cambios)\n</code></pre>"},{"location":"content/p7/#join","title":"join()","text":"<pre><code>const elementos = ['HTML', 'CSS', 'JavaScript', 'React'];\n\n// join() - Convierte arreglo a string\nconst cadena1 = elementos.join(); // Separador por defecto: coma\nconst cadena2 = elementos.join(' - ');\nconst cadena3 = elementos.join('');\n\nconsole.log(cadena1); // \"HTML,CSS,JavaScript,React\"\nconsole.log(cadena2); // \"HTML - CSS - JavaScript - React\"\nconsole.log(cadena3); // \"HTMLCSSJavaScriptReact\"\n</code></pre>"},{"location":"content/p7/#metodos-de-busqueda-y-verificacion","title":"\ud83d\udd0d M\u00e9todos de B\u00fasqueda y Verificaci\u00f3n","text":""},{"location":"content/p7/#indexof-lastindexof-e-includes","title":"indexOf(), lastIndexOf() e includes()","text":"<pre><code>const frutas = ['manzana', 'banana', 'naranja', 'banana', 'uva'];\n\n// indexOf() - Primer \u00edndice del elemento\nconsole.log(frutas.indexOf('banana')); // 1\nconsole.log(frutas.indexOf('kiwi')); // -1 (no encontrado)\n\n// lastIndexOf() - \u00daltimo \u00edndice del elemento\nconsole.log(frutas.lastIndexOf('banana')); // 3\n\n// includes() - Verifica si existe el elemento\nconsole.log(frutas.includes('naranja')); // true\nconsole.log(frutas.includes('kiwi')); // false\n</code></pre>"},{"location":"content/p7/#find-y-findindex","title":"find() y findIndex()","text":"<pre><code>const usuarios = [\n    { id: 1, nombre: 'Ana', edad: 25 },\n    { id: 2, nombre: 'Carlos', edad: 30 },\n    { id: 3, nombre: 'Luc\u00eda', edad: 28 }\n];\n\n// find() - Encuentra el primer elemento que cumple la condici\u00f3n\nconst usuarioEncontrado = usuarios.find(user =&gt; user.edad &gt; 27);\nconsole.log(usuarioEncontrado); // { id: 2, nombre: 'Carlos', edad: 30 }\n\n// findIndex() - Encuentra el \u00edndice del primer elemento que cumple la condici\u00f3n\nconst indice = usuarios.findIndex(user =&gt; user.nombre === 'Luc\u00eda');\nconsole.log(indice); // 2\n\n// Si no encuentra nada\nconst noEncontrado = usuarios.find(user =&gt; user.edad &gt; 50);\nconsole.log(noEncontrado); // undefined\n</code></pre>"},{"location":"content/p7/#metodos-de-iteracion","title":"\ud83c\udfaf M\u00e9todos de Iteraci\u00f3n","text":""},{"location":"content/p7/#foreach","title":"forEach()","text":"<pre><code>const numeros = [1, 2, 3, 4, 5];\n\n// forEach() - Ejecuta una funci\u00f3n para cada elemento\nnumeros.forEach((numero, indice, arreglo) =&gt; {\n    console.log(`\u00cdndice ${indice}: ${numero}`);\n});\n\n// Ejemplo pr\u00e1ctico: mostrar lista de tareas\nconst tareas = ['Estudiar JavaScript', 'Hacer ejercicio', 'Leer un libro'];\ntareas.forEach((tarea, i) =&gt; {\n    console.log(`${i + 1}. ${tarea}`);\n});\n</code></pre>"},{"location":"content/p7/#map","title":"map()","text":"<pre><code>const numeros = [1, 2, 3, 4, 5];\n\n// map() - Transforma cada elemento y retorna un nuevo arreglo\nconst cuadrados = numeros.map(num =&gt; num ** 2);\nconst dobles = numeros.map(num =&gt; num * 2);\n\nconsole.log(cuadrados); // [1, 4, 9, 16, 25]\nconsole.log(dobles); // [2, 4, 6, 8, 10]\n\n// Ejemplo con objetos\nconst productos = [\n    { nombre: 'Laptop', precio: 1000 },\n    { nombre: 'Mouse', precio: 25 },\n    { nombre: 'Teclado', precio: 75 }\n];\n\nconst productosConDescuento = productos.map(producto =&gt; ({\n    ...producto,\n    precioConDescuento: producto.precio * 0.9\n}));\n\nconsole.log(productosConDescuento);\n</code></pre>"},{"location":"content/p7/#filter","title":"filter()","text":"<pre><code>const numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n// filter() - Filtra elementos que cumplen una condici\u00f3n\nconst pares = numeros.filter(num =&gt; num % 2 === 0);\nconst mayoresA5 = numeros.filter(num =&gt; num &gt; 5);\n\nconsole.log(pares); // [2, 4, 6, 8, 10]\nconsole.log(mayoresA5); // [6, 7, 8, 9, 10]\n\n// Ejemplo con objetos\nconst empleados = [\n    { nombre: 'Ana', departamento: 'IT', salario: 50000 },\n    { nombre: 'Carlos', departamento: 'Ventas', salario: 45000 },\n    { nombre: 'Luc\u00eda', departamento: 'IT', salario: 55000 },\n    { nombre: 'Miguel', departamento: 'Marketing', salario: 48000 }\n];\n\nconst empleadosIT = empleados.filter(emp =&gt; emp.departamento === 'IT');\nconst salarioAlto = empleados.filter(emp =&gt; emp.salario &gt; 50000);\n\nconsole.log(empleadosIT);\nconsole.log(salarioAlto);\n</code></pre>"},{"location":"content/p7/#reduce","title":"reduce()","text":"<pre><code>const numeros = [1, 2, 3, 4, 5];\n\n// reduce() - Reduce el arreglo a un solo valor\nconst suma = numeros.reduce((acumulador, actual) =&gt; acumulador + actual, 0);\nconst producto = numeros.reduce((acc, actual) =&gt; acc * actual, 1);\nconst maximo = numeros.reduce((max, actual) =&gt; actual &gt; max ? actual : max);\n\nconsole.log(suma); // 15\nconsole.log(producto); // 120\nconsole.log(maximo); // 5\n\n// Ejemplo avanzado: contar ocurrencias\nconst palabras = ['hola', 'mundo', 'hola', 'javascript', 'mundo', 'hola'];\nconst conteo = palabras.reduce((acc, palabra) =&gt; {\n    acc[palabra] = (acc[palabra] || 0) + 1;\n    return acc;\n}, {});\n\nconsole.log(conteo); // { hola: 3, mundo: 2, javascript: 1 }\n\n// Agrupar por propiedad\nconst personas = [\n    { nombre: 'Ana', edad: 25 },\n    { nombre: 'Carlos', edad: 30 },\n    { nombre: 'Luc\u00eda', edad: 25 },\n    { nombre: 'Miguel', edad: 30 }\n];\n\nconst agrupadosPorEdad = personas.reduce((acc, persona) =&gt; {\n    const edad = persona.edad;\n    if (!acc[edad]) acc[edad] = [];\n    acc[edad].push(persona);\n    return acc;\n}, {});\n\nconsole.log(agrupadosPorEdad);\n</code></pre>"},{"location":"content/p7/#some-y-every","title":"some() y every()","text":"<pre><code>const numeros = [2, 4, 6, 8, 10];\nconst mixto = [1, 2, 3, 4, 5];\n\n// some() - Verifica si al menos un elemento cumple la condici\u00f3n\nconsole.log(numeros.some(num =&gt; num &gt; 5)); // true\nconsole.log(numeros.some(num =&gt; num % 2 === 1)); // false\n\n// every() - Verifica si todos los elementos cumplen la condici\u00f3n\nconsole.log(numeros.every(num =&gt; num % 2 === 0)); // true\nconsole.log(mixto.every(num =&gt; num &gt; 0)); // true\nconsole.log(mixto.every(num =&gt; num % 2 === 0)); // false\n\n// Ejemplo pr\u00e1ctico: validaci\u00f3n de formulario\nconst campos = [\n    { nombre: 'email', valor: 'user@example.com', valido: true },\n    { nombre: 'password', valor: '123456', valido: true },\n    { nombre: 'confirmPassword', valor: '123456', valido: true }\n];\n\nconst formularioValido = campos.every(campo =&gt; campo.valido);\nconst hayErrores = campos.some(campo =&gt; !campo.valido);\n\nconsole.log('Formulario v\u00e1lido:', formularioValido);\nconsole.log('Hay errores:', hayErrores);\n</code></pre>"},{"location":"content/p8/","title":"Semana 8 - Objetos y T\u00e9cnicas Avanzadas en JavaScript","text":"<p>Introducci\u00f3n</p> <p>En esta semana continuamos con las estructuras de datos en JavaScript, enfoc\u00e1ndonos en los objetos, la desestructuraci\u00f3n y t\u00e9cnicas avanzadas. Aprenderemos a manipular objetos de manera eficiente, usar la desestructuraci\u00f3n para extraer datos de forma elegante, y aplicar m\u00e9todos avanzados de arreglos para resolver problemas complejos. \ud83d\ude80</p>"},{"location":"content/p8/#objetos","title":"\ud83d\udce6 Objetos","text":"<p>Los objetos son estructuras de datos que almacenan pares clave-valor y son fundamentales en JavaScript.</p>"},{"location":"content/p8/#creacion-y-manipulacion-de-objetos","title":"Creaci\u00f3n y manipulaci\u00f3n de objetos","text":"<pre><code>// Diferentes formas de crear objetos\nconst persona = {\n    nombre: 'Ana',\n    edad: 25,\n    profesion: 'Desarrolladora',\n    activo: true\n};\n\n// Usando el constructor Object\nconst objeto = new Object();\nobjeto.propiedad = 'valor';\n\n// Acceso a propiedades\nconsole.log(persona.nombre); // 'Ana'\nconsole.log(persona['edad']); // 25\n\n// Agregar propiedades\npersona.email = 'ana@example.com';\npersona['telefono'] = '123-456-7890';\n\n// Modificar propiedades\npersona.edad = 26;\n\n// Eliminar propiedades\ndelete persona.activo;\n\nconsole.log(persona);\n</code></pre>"},{"location":"content/p8/#metodos-de-objetos","title":"M\u00e9todos de objetos","text":"<pre><code>const usuario = {\n    nombre: 'Carlos',\n    edad: 30,\n    saludar: function() {\n        return `Hola, soy ${this.nombre}`;\n    },\n    // M\u00e9todo con arrow function (cuidado con 'this')\n    obtenerInfo: () =&gt; {\n        return 'Informaci\u00f3n del usuario';\n    },\n    // M\u00e9todo abreviado (ES6)\n    cumplirAnos() {\n        this.edad++;\n        return this.edad;\n    }\n};\n\nconsole.log(usuario.saludar()); // \"Hola, soy Carlos\"\nconsole.log(usuario.cumplirAnos()); // 31\n</code></pre>"},{"location":"content/p8/#objectkeys-objectvalues-y-objectentries","title":"Object.keys(), Object.values() y Object.entries()","text":"<pre><code>const producto = {\n    id: 1,\n    nombre: 'Laptop',\n    precio: 1000,\n    categoria: 'Electr\u00f3nicos'\n};\n\n// Object.keys() - Obtiene las claves\nconst claves = Object.keys(producto);\nconsole.log(claves); // ['id', 'nombre', 'precio', 'categoria']\n\n// Object.values() - Obtiene los valores\nconst valores = Object.values(producto);\nconsole.log(valores); // [1, 'Laptop', 1000, 'Electr\u00f3nicos']\n\n// Object.entries() - Obtiene pares clave-valor\nconst entradas = Object.entries(producto);\nconsole.log(entradas); // [['id', 1], ['nombre', 'Laptop'], ...]\n\n// Iterar sobre un objeto\nObject.entries(producto).forEach(([clave, valor]) =&gt; {\n    console.log(`${clave}: ${valor}`);\n});\n</code></pre>"},{"location":"content/p8/#objectassign-y-spread-operator","title":"Object.assign() y spread operator","text":"<pre><code>const base = { a: 1, b: 2 };\nconst extension = { c: 3, d: 4 };\nconst sobreescritura = { b: 5, e: 6 };\n\n// Object.assign() - Copia propiedades\nconst combinado1 = Object.assign({}, base, extension, sobreescritura);\nconsole.log(combinado1); // { a: 1, b: 5, c: 3, d: 4, e: 6 }\n\n// Spread operator (m\u00e1s moderno)\nconst combinado2 = { ...base, ...extension, ...sobreescritura };\nconsole.log(combinado2); // { a: 1, b: 5, c: 3, d: 4, e: 6 }\n\n// Clonar objeto\nconst clon = { ...base };\nconsole.log(clon); // { a: 1, b: 2 }\n</code></pre>"},{"location":"content/p8/#desestructuracion","title":"\ud83c\udfaf Desestructuraci\u00f3n","text":"<p>La desestructuraci\u00f3n es una sintaxis que permite extraer valores de arreglos u objetos de manera m\u00e1s concisa.</p>"},{"location":"content/p8/#desestructuracion-de-arreglos","title":"Desestructuraci\u00f3n de arreglos","text":"<pre><code>const colores = ['rojo', 'verde', 'azul', 'amarillo', 'morado'];\n\n// Desestructuraci\u00f3n b\u00e1sica\nconst [primero, segundo, tercero] = colores;\nconsole.log(primero); // 'rojo'\nconsole.log(segundo); // 'verde'\nconsole.log(tercero); // 'azul'\n\n// Saltar elementos\nconst [, , tercer, , quinto] = colores;\nconsole.log(tercer); // 'azul'\nconsole.log(quinto); // 'morado'\n\n// Valores por defecto\nconst [a, b, c, d, e, f = 'negro'] = colores;\nconsole.log(f); // 'negro'\n\n// Rest operator\nconst [principal, ...resto] = colores;\nconsole.log(principal); // 'rojo'\nconsole.log(resto); // ['verde', 'azul', 'amarillo', 'morado']\n\n// Intercambiar variables\nlet x = 1, y = 2;\n[x, y] = [y, x];\nconsole.log(x, y); // 2, 1\n</code></pre>"},{"location":"content/p8/#desestructuracion-de-objetos","title":"Desestructuraci\u00f3n de objetos","text":"<pre><code>const persona = {\n    nombre: 'Ana',\n    edad: 25,\n    profesion: 'Desarrolladora',\n    direccion: {\n        ciudad: 'Madrid',\n        pais: 'Espa\u00f1a'\n    }\n};\n\n// Desestructuraci\u00f3n b\u00e1sica\nconst { nombre, edad, profesion } = persona;\nconsole.log(nombre); // 'Ana'\nconsole.log(edad); // 25\n\n// Renombrar variables\nconst { nombre: nombreCompleto, edad: a\u00f1os } = persona;\nconsole.log(nombreCompleto); // 'Ana'\nconsole.log(a\u00f1os); // 25\n\n// Valores por defecto\nconst { nombre: nom, email = 'no@disponible.com' } = persona;\nconsole.log(email); // 'no@disponible.com'\n\n// Desestructuraci\u00f3n anidada\nconst { direccion: { ciudad, pais } } = persona;\nconsole.log(ciudad); // 'Madrid'\nconsole.log(pais); // 'Espa\u00f1a'\n\n// Rest operator en objetos\nconst { nombre: n, ...restoPersona } = persona;\nconsole.log(restoPersona); // { edad: 25, profesion: 'Desarrolladora', direccion: {...} }\n</code></pre>"},{"location":"content/p8/#desestructuracion-en-parametros-de-funciones","title":"Desestructuraci\u00f3n en par\u00e1metros de funciones","text":"<pre><code>// Con objetos\nfunction presentarPersona({ nombre, edad, profesion = 'No especificada' }) {\n    return `Hola, soy ${nombre}, tengo ${edad} a\u00f1os y soy ${profesion}`;\n}\n\nconst usuario = { nombre: 'Carlos', edad: 30 };\nconsole.log(presentarPersona(usuario));\n\n// Con arreglos\nfunction sumarPrimerosDos([a, b]) {\n    return a + b;\n}\n\nconst numeros = [5, 3, 8, 1];\nconsole.log(sumarPrimerosDos(numeros)); // 8\n\n// Ejemplo avanzado: configuraci\u00f3n de API\nfunction hacerPeticion({\n    url,\n    metodo = 'GET',\n    headers = {},\n    timeout = 5000\n}) {\n    console.log(`${metodo} ${url}`);\n    console.log('Headers:', headers);\n    console.log('Timeout:', timeout);\n}\n\nhacerPeticion({\n    url: '/api/usuarios',\n    metodo: 'POST',\n    headers: { 'Content-Type': 'application/json' }\n});\n</code></pre>"},{"location":"content/p8/#metodos-avanzados-de-arreglos","title":"\ud83d\udd04 M\u00e9todos Avanzados de Arreglos","text":""},{"location":"content/p8/#flatmap-y-flat","title":"flatMap() y flat()","text":"<pre><code>// flat() - Aplana arreglos anidados\nconst anidado = [1, [2, 3], [4, [5, 6]]];\nconst aplanado1 = anidado.flat(); // Un nivel\nconst aplanado2 = anidado.flat(2); // Dos niveles\n\nconsole.log(aplanado1); // [1, 2, 3, 4, [5, 6]]\nconsole.log(aplanado2); // [1, 2, 3, 4, 5, 6]\n\n// flatMap() - Combina map() y flat()\nconst frases = ['hola mundo', 'javascript es genial'];\nconst palabras = frases.flatMap(frase =&gt; frase.split(' '));\nconsole.log(palabras); // ['hola', 'mundo', 'javascript', 'es', 'genial']\n</code></pre>"},{"location":"content/p8/#arrayfrom-y-arrayof","title":"Array.from() y Array.of()","text":"<pre><code>// Array.from() - Crea arreglo desde iterable\nconst cadena = 'Hola';\nconst arregloLetras = Array.from(cadena);\nconsole.log(arregloLetras); // ['H', 'o', 'l', 'a']\n\n// Con funci\u00f3n de mapeo\nconst numeros = Array.from({ length: 5 }, (_, i) =&gt; i + 1);\nconsole.log(numeros); // [1, 2, 3, 4, 5]\n\n// Array.of() - Crea arreglo con elementos dados\nconst arreglo = Array.of(1, 2, 3, 4, 5);\nconsole.log(arreglo); // [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"content/p8/#ejemplos-practicos","title":"\ud83d\udee0\ufe0f Ejemplos Pr\u00e1cticos","text":""},{"location":"content/p8/#sistema-de-gestion-de-estudiantes","title":"Sistema de gesti\u00f3n de estudiantes","text":"<pre><code>const estudiantes = [\n    { id: 1, nombre: 'Ana', edad: 20, notas: [85, 90, 78, 92] },\n    { id: 2, nombre: 'Carlos', edad: 22, notas: [76, 88, 82, 79] },\n    { id: 3, nombre: 'Luc\u00eda', edad: 19, notas: [95, 87, 91, 89] },\n    { id: 4, nombre: 'Miguel', edad: 21, notas: [68, 72, 75, 70] }\n];\n\n// Calcular promedio de cada estudiante\nconst estudiantesConPromedio = estudiantes.map(estudiante =&gt; {\n    const promedio = estudiante.notas.reduce((sum, nota) =&gt; sum + nota, 0) / estudiante.notas.length;\n    return { ...estudiante, promedio: Math.round(promedio * 100) / 100 };\n});\n\n// Filtrar estudiantes aprobados (promedio &gt;= 80)\nconst aprobados = estudiantesConPromedio.filter(est =&gt; est.promedio &gt;= 80);\n\n// Encontrar el mejor estudiante\nconst mejorEstudiante = estudiantesConPromedio.reduce((mejor, actual) =&gt; \n    actual.promedio &gt; mejor.promedio ? actual : mejor\n);\n\n// Verificar si todos pasaron\nconst todosAprobaron = estudiantesConPromedio.every(est =&gt; est.promedio &gt;= 70);\n\nconsole.log('Estudiantes con promedio:', estudiantesConPromedio);\nconsole.log('Aprobados:', aprobados);\nconsole.log('Mejor estudiante:', mejorEstudiante);\nconsole.log('Todos aprobaron:', todosAprobaron);\n</code></pre>"},{"location":"content/p8/#carrito-de-compras","title":"Carrito de compras","text":"<pre><code>class CarritoCompras {\n    constructor() {\n        this.items = [];\n    }\n\n    agregarItem({ id, nombre, precio, cantidad = 1 }) {\n        const itemExistente = this.items.find(item =&gt; item.id === id);\n\n        if (itemExistente) {\n            itemExistente.cantidad += cantidad;\n        } else {\n            this.items.push({ id, nombre, precio, cantidad });\n        }\n    }\n\n    removerItem(id) {\n        this.items = this.items.filter(item =&gt; item.id !== id);\n    }\n\n    actualizarCantidad(id, nuevaCantidad) {\n        const item = this.items.find(item =&gt; item.id === id);\n        if (item) {\n            item.cantidad = nuevaCantidad;\n        }\n    }\n\n    calcularTotal() {\n        return this.items.reduce((total, item) =&gt; {\n            return total + (item.precio * item.cantidad);\n        }, 0);\n    }\n\n    obtenerResumen() {\n        const total = this.calcularTotal();\n        const cantidadItems = this.items.reduce((sum, item) =&gt; sum + item.cantidad, 0);\n\n        return {\n            items: [...this.items],\n            cantidadTotal: cantidadItems,\n            precioTotal: total,\n            itemsUnicos: this.items.length\n        };\n    }\n\n    aplicarDescuento(porcentaje) {\n        return this.items.map(item =&gt; ({\n            ...item,\n            precioConDescuento: item.precio * (1 - porcentaje / 100)\n        }));\n    }\n}\n\n// Uso del carrito\nconst carrito = new CarritoCompras();\n\ncarrito.agregarItem({ id: 1, nombre: 'Laptop', precio: 1000 });\ncarrito.agregarItem({ id: 2, nombre: 'Mouse', precio: 25, cantidad: 2 });\ncarrito.agregarItem({ id: 3, nombre: 'Teclado', precio: 75 });\ncarrito.agregarItem({ id: 1, nombre: 'Laptop', precio: 1000 }); // Incrementa cantidad\n\nconsole.log('Resumen del carrito:', carrito.obtenerResumen());\nconsole.log('Items con descuento 10%:', carrito.aplicarDescuento(10));\n</code></pre>"},{"location":"content/p8/#buenas-practicas","title":"\ud83d\uded1 Buenas Pr\u00e1cticas","text":"<ol> <li>Usa m\u00e9todos inmutables cuando sea posible (map, filter, reduce)</li> <li>Prefiere desestructuraci\u00f3n para extraer valores</li> <li>Usa spread operator para clonar arreglos y objetos</li> <li>Evita mutar arreglos directamente en funciones</li> <li>Usa nombres descriptivos para variables desestructuradas</li> <li>Combina m\u00e9todos de arreglo para operaciones complejas</li> <li>Valida datos antes de aplicar m\u00e9todos</li> <li>Usa const para arreglos y objetos que no se reasignan</li> </ol> <p>Rendimiento</p> <p>Los m\u00e9todos como <code>map()</code>, <code>filter()</code> y <code>reduce()</code> crean nuevos arreglos. Para arreglos muy grandes, considera el impacto en memoria y rendimiento.</p>"},{"location":"content/p9/","title":"Semana 9 - Generalidades del DOM en JavaScript","text":""},{"location":"content/p9/#que-es-el-dom","title":"\u00bfQu\u00e9 es el DOM?","text":"<p>El DOM (Document Object Model) es una representaci\u00f3n estructurada de un documento HTML o XML que permite a JavaScript interactuar con los elementos de una p\u00e1gina web. Piensa en el DOM como un \u00e1rbol geneal\u00f3gico de tu p\u00e1gina web, donde cada elemento HTML es un \"nodo\" que puede tener padres, hijos y hermanos.</p>"},{"location":"content/p9/#analogia-del-dom","title":"Analog\u00eda del DOM","text":"<p>Imagina que tu p\u00e1gina web es como un edificio: - El documento HTML es el edificio completo - Cada elemento HTML (<code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;img&gt;</code>, etc.) es una habitaci\u00f3n - Los atributos son las caracter\u00edsticas de cada habitaci\u00f3n (color, tama\u00f1o, etc.) - El contenido de texto son los muebles dentro de cada habitaci\u00f3n</p>"},{"location":"content/p9/#estructura-del-dom","title":"Estructura del DOM","text":"<p>Cuando el navegador carga una p\u00e1gina HTML, crea autom\u00e1ticamente el DOM. Veamos un ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Mi P\u00e1gina&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Bienvenido&lt;/h1&gt;\n    &lt;div class=\"contenedor\"&gt;\n        &lt;p&gt;Este es un p\u00e1rrafo&lt;/p&gt;\n        &lt;button id=\"miBoton\"&gt;Hacer clic&lt;/button&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Este HTML se convierte en un \u00e1rbol DOM as\u00ed:</p> <pre><code>Document\n\u2514\u2500\u2500 html\n    \u251c\u2500\u2500 head\n    \u2502   \u2514\u2500\u2500 title\n    \u2502       \u2514\u2500\u2500 \"Mi P\u00e1gina\"\n    \u2514\u2500\u2500 body\n        \u251c\u2500\u2500 h1\n        \u2502   \u2514\u2500\u2500 \"Bienvenido\"\n        \u2514\u2500\u2500 div (class=\"contenedor\")\n            \u251c\u2500\u2500 p\n            \u2502   \u2514\u2500\u2500 \"Este es un p\u00e1rrafo\"\n            \u2514\u2500\u2500 button (id=\"miBoton\")\n                \u2514\u2500\u2500 \"Hacer clic\"\n</code></pre>"},{"location":"content/p9/#tipos-de-nodos-en-el-dom","title":"Tipos de Nodos en el DOM","text":""},{"location":"content/p9/#1-nodos-de-elemento","title":"1. Nodos de Elemento","text":"<p>Representan las etiquetas HTML como <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;img&gt;</code>, etc.</p> <pre><code>// Ejemplo: obtener un elemento\nconst titulo = document.querySelector('h1');\nconsole.log(titulo.nodeName); // \"H1\"\nconsole.log(titulo.nodeType); // 1 (ELEMENT_NODE)\n</code></pre>"},{"location":"content/p9/#2-nodos-de-texto","title":"2. Nodos de Texto","text":"<p>Contienen el texto dentro de los elementos.</p> <pre><code>// El texto \"Bienvenido\" es un nodo de texto\nconst textoTitulo = titulo.firstChild;\nconsole.log(textoTitulo.nodeType); // 3 (TEXT_NODE)\nconsole.log(textoTitulo.textContent); // \"Bienvenido\"\n</code></pre>"},{"location":"content/p9/#3-nodos-de-atributo","title":"3. Nodos de Atributo","text":"<p>Representan los atributos de los elementos HTML.</p> <pre><code>// Ejemplo con un elemento que tiene atributos\nconst boton = document.getElementById('miBoton');\nconsole.log(boton.id); // \"miBoton\"\nconsole.log(boton.getAttribute('id')); // \"miBoton\"\n</code></pre>"},{"location":"content/p9/#el-objeto-document","title":"El Objeto Document","text":"<p>El objeto <code>document</code> es tu punto de entrada al DOM. Es como la llave maestra que te permite acceder a cualquier parte de tu p\u00e1gina web.</p>"},{"location":"content/p9/#propiedades-importantes-del-document","title":"Propiedades Importantes del Document","text":"<pre><code>// Informaci\u00f3n b\u00e1sica del documento\nconsole.log(document.title); // T\u00edtulo de la p\u00e1gina\nconsole.log(document.URL); // URL actual\n\n// Elementos principales\nconsole.log(document.documentElement); // Elemento &lt;html&gt;\nconsole.log(document.head); // Elemento &lt;head&gt;\nconsole.log(document.body); // Elemento &lt;body&gt;\n</code></pre>"},{"location":"content/p9/#ejemplo-practico-informacion-de-la-pagina","title":"Ejemplo Pr\u00e1ctico: Informaci\u00f3n de la P\u00e1gina","text":"<pre><code>// Crear una funci\u00f3n que muestre informaci\u00f3n de la p\u00e1gina\nfunction mostrarInfoPagina() {\n    console.log('=== INFORMACI\u00d3N DE LA P\u00c1GINA ===');\n    console.log('T\u00edtulo:', document.title);\n    console.log('URL:', document.URL);\n    console.log('\u00daltima modificaci\u00f3n:', document.lastModified);\n    console.log('N\u00famero total de elementos:', document.all.length);\n}\n\n// Llamar la funci\u00f3n\nmostrarInfoPagina();\n</code></pre>"},{"location":"content/p9/#navegacion-por-el-dom","title":"Navegaci\u00f3n por el DOM","text":"<p>Una vez que tienes un elemento, puedes navegar a sus elementos relacionados:</p>"},{"location":"content/p9/#relaciones-familiares-en-el-dom","title":"Relaciones Familiares en el DOM","text":"<pre><code>&lt;div id=\"padre\"&gt;\n    &lt;p id=\"hijo1\"&gt;Primer hijo&lt;/p&gt;\n    &lt;p id=\"hijo2\"&gt;Segundo hijo&lt;/p&gt;\n    &lt;span id=\"hijo3\"&gt;Tercer hijo&lt;/span&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>const padre = document.getElementById('padre');\nconst primerHijo = document.getElementById('hijo1');\n\n// Navegaci\u00f3n desde el padre\nconsole.log(padre.children); // Todos los hijos elementos\nconsole.log(padre.firstElementChild); // Primer hijo elemento\nconsole.log(padre.lastElementChild); // \u00daltimo hijo elemento\nconsole.log(padre.childElementCount); // N\u00famero de hijos elementos\n\n// Navegaci\u00f3n desde un hijo\nconsole.log(primerHijo.parentElement); // El elemento padre\nconsole.log(primerHijo.nextElementSibling); // Siguiente hermano\nconsole.log(primerHijo.previousElementSibling); // Hermano anterior (null en este caso)\n</code></pre>"},{"location":"content/p9/#ejemplo-practico-explorador-de-dom","title":"Ejemplo Pr\u00e1ctico: Explorador de DOM","text":"<pre><code>function explorarElemento(elemento) {\n    console.log('=== EXPLORANDO ELEMENTO ===');\n    console.log('Etiqueta:', elemento.tagName);\n    console.log('ID:', elemento.id || 'Sin ID');\n    console.log('Clases:', elemento.className || 'Sin clases');\n    console.log('N\u00famero de hijos:', elemento.children.length);\n\n    if (elemento.parentElement) {\n        console.log('Padre:', elemento.parentElement.tagName);\n    }\n\n    if (elemento.nextElementSibling) {\n        console.log('Siguiente hermano:', elemento.nextElementSibling.tagName);\n    }\n\n    if (elemento.previousElementSibling) {\n        console.log('Hermano anterior:', elemento.previousElementSibling.tagName);\n    }\n}\n\n// Usar el explorador\nconst miElemento = document.getElementById('hijo2');\nexplorarElemento(miElemento);\n</code></pre>"},{"location":"content/p9/#colecciones-de-elementos","title":"Colecciones de Elementos","text":"<p>El DOM devuelve diferentes tipos de colecciones:</p>"},{"location":"content/p9/#htmlcollection-vs-nodelist","title":"HTMLCollection vs NodeList","text":"<pre><code>// HTMLCollection (elementos vivos - se actualizan autom\u00e1ticamente)\nconst divs = document.getElementsByTagName('div');\nconsole.log('Divs encontrados:', divs.length);\n\n// NodeList (puede ser vivo o est\u00e1tico dependiendo del m\u00e9todo)\nconst parrafos = document.querySelectorAll('p');\nconsole.log('P\u00e1rrafos encontrados:', parrafos.length);\n\n// Diferencia pr\u00e1ctica\nconsole.log('Antes de agregar elemento:');\nconsole.log('HTMLCollection length:', divs.length);\nconsole.log('NodeList length:', parrafos.length);\n\n// Agregar un nuevo div\nconst nuevoDiv = document.createElement('div');\ndocument.body.appendChild(nuevoDiv);\n\nconsole.log('Despu\u00e9s de agregar elemento:');\nconsole.log('HTMLCollection length:', divs.length); // Se actualiza autom\u00e1ticamente\nconsole.log('NodeList length:', parrafos.length); // No se actualiza\n</code></pre>"},{"location":"content/p9/#convertir-colecciones-a-arrays","title":"Convertir Colecciones a Arrays","text":"<pre><code>// M\u00e9todo moderno (recomendado)\nconst elementosArray = Array.from(document.querySelectorAll('p'));\n\n// M\u00e9todo con spread operator\nconst elementosArray2 = [...document.querySelectorAll('p')];\n\n// Ahora puedes usar m\u00e9todos de array\nelementosArray.forEach((elemento, indice) =&gt; {\n    console.log(`P\u00e1rrafo ${indice + 1}:`, elemento.textContent);\n});\n</code></pre>"},{"location":"content/p9/#eventos-y-el-dom","title":"Eventos y el DOM","text":"<p>El DOM no solo te permite leer y modificar elementos, sino tambi\u00e9n responder a eventos:</p>"},{"location":"content/p9/#ejemplo-basico-de-eventos","title":"Ejemplo B\u00e1sico de Eventos","text":"<pre><code>// Esperar a que el DOM est\u00e9 completamente cargado\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('\u00a1El DOM est\u00e1 listo!');\n\n    // Ahora es seguro trabajar con elementos\n    const boton = document.getElementById('miBoton');\n\n    if (boton) {\n        boton.addEventListener('click', function() {\n            console.log('\u00a1Bot\u00f3n clickeado!');\n        });\n    }\n});\n</code></pre>"},{"location":"content/p9/#ejercicios-practicos","title":"Ejercicios Pr\u00e1cticos","text":""},{"location":"content/p9/#ejercicio-1-inspector-de-pagina","title":"Ejercicio 1: Inspector de P\u00e1gina","text":"<p>Crea una funci\u00f3n que analice la estructura b\u00e1sica de cualquier p\u00e1gina:</p> <pre><code>function analizarPagina() {\n    const analisis = {\n        titulo: document.title,\n        url: document.URL,\n        totalElementos: document.all.length,\n        totalImagenes: document.images.length,\n        totalEnlaces: document.links.length,\n        totalFormularios: document.forms.length\n    };\n\n    console.table(analisis);\n    return analisis;\n}\n\n// Ejecutar el an\u00e1lisis\nanalizarPagina();\n</code></pre>"},{"location":"content/p9/#ejercicio-2-contador-de-elementos","title":"Ejercicio 2: Contador de Elementos","text":"<pre><code>function contarElementosPorTipo() {\n    const tipos = ['div', 'p', 'span', 'img', 'a', 'button', 'input'];\n    const conteos = {};\n\n    tipos.forEach(tipo =&gt; {\n        conteos[tipo] = document.getElementsByTagName(tipo).length;\n    });\n\n    console.log('=== CONTEO DE ELEMENTOS ===');\n    for (const [tipo, cantidad] of Object.entries(conteos)) {\n        console.log(`${tipo.toUpperCase()}: ${cantidad}`);\n    }\n\n    return conteos;\n}\n\ncontarElementosPorTipo();\n</code></pre>"},{"location":"content/p9/#ejercicio-3-navegador-de-jerarquia","title":"Ejercicio 3: Navegador de Jerarqu\u00eda","text":"<pre><code>function mostrarJerarquia(elemento, nivel = 0) {\n    const indentacion = '  '.repeat(nivel);\n    const info = `${elemento.tagName}${elemento.id ? '#' + elemento.id : ''}${elemento.className ? '.' + elemento.className.replace(/ /g, '.') : ''}`;\n\n    console.log(indentacion + info);\n\n    // Mostrar hijos recursivamente\n    Array.from(elemento.children).forEach(hijo =&gt; {\n        mostrarJerarquia(hijo, nivel + 1);\n    });\n}\n\n// Mostrar la jerarqu\u00eda completa del body\nconsole.log('=== JERARQU\u00cdA DEL DOM ===');\nmostrarJerarquia(document.body);\n</code></pre>"},{"location":"content/p9/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":""},{"location":"content/p9/#1-esperar-a-que-el-dom-este-listo","title":"1. Esperar a que el DOM est\u00e9 listo","text":"<pre><code>// \u2705 Correcto\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Tu c\u00f3digo aqu\u00ed\n});\n\n// \u274c Incorrecto (puede ejecutarse antes de que el DOM est\u00e9 listo)\nconst elemento = document.getElementById('miElemento');\n</code></pre>"},{"location":"content/p9/#2-verificar-que-los-elementos-existen","title":"2. Verificar que los elementos existen","text":"<pre><code>// \u2705 Correcto\nconst boton = document.getElementById('miBoton');\nif (boton) {\n    boton.addEventListener('click', manejarClick);\n} else {\n    console.warn('Elemento con ID \"miBoton\" no encontrado');\n}\n\n// \u274c Incorrecto (puede causar errores)\ndocument.getElementById('miBoton').addEventListener('click', manejarClick);\n</code></pre>"},{"location":"content/p9/#3-usar-metodos-modernos","title":"3. Usar m\u00e9todos modernos","text":"<pre><code>// \u2705 Moderno y flexible\nconst elementos = document.querySelectorAll('.mi-clase');\n\n// \u274c Menos flexible\nconst elementos = document.getElementsByClassName('mi-clase');\n</code></pre>"},{"location":"pi/p1/","title":"Proyecto Integrador","text":""},{"location":"pi/p1/#paso-1-realizar-fork-solo-lider","title":"Paso 1: Realizar Fork (Solo L\u00edder)","text":"<pre><code>https://github.com/jfinfocesde/pi_web1.git\n</code></pre> <ol> <li>Navega al repositorio base del proyecto en GitHub</li> <li>Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha</li> <li>Selecciona tu cuenta personal como destino del fork</li> <li>Espera a que se complete el proceso de fork</li> </ol>"},{"location":"pi/p1/#paso-2-fork-del-repositorio-del-lider-demas-integrantes","title":"Paso 2: Fork del Repositorio del L\u00edder (Dem\u00e1s Integrantes)","text":"<p>Para los dem\u00e1s integrantes del equipo:</p> <ol> <li>El l\u00edder debe compartir la URL de su fork: <code>https://github.com/USUARIO_LIDER/pi_web1.git</code></li> <li>Cada integrante debe hacer fork del repositorio del l\u00edder (NO del repositorio base original)</li> <li>Navega al repositorio del l\u00edder en GitHub</li> <li>Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha</li> <li>Selecciona tu cuenta personal como destino del fork</li> </ol>"},{"location":"pi/p1/#paso-3-clonar-tu-fork","title":"Paso 3: Clonar tu Fork","text":"<pre><code>git clone https://github.com/TU_USUARIO/pi_web1.git\ncd pi_web1\ncode .\n</code></pre>"},{"location":"pi/p1/#paso-4-crear-la-estructura-del-proyecto","title":"Paso 4: Crear la Estructura del Proyecto","text":"<p>Antes de comenzar a desarrollar, es importante organizar correctamente la estructura de carpetas del proyecto. Para esto, debes seguir el tutorial:</p> <p>Estructura de Carpetas para Proyectos JavaScript Vanilla con Tailwind CSS</p> <p>Este tutorial te guiar\u00e1 paso a paso para: - Crear la estructura de carpetas recomendada - Configurar Tailwind CSS - Organizar los archivos HTML, CSS y JavaScript - Establecer las mejores pr\u00e1cticas de organizaci\u00f3n</p> <p>Importante: Sigue exactamente la estructura propuesta en el tutorial para mantener la consistencia en el proyecto y facilitar el trabajo en equipo.</p>"},{"location":"tutorials/p1/","title":"Estructura de Carpetas para Proyectos JavaScript Vanilla con Tailwind CSS","text":"<p>Este tutorial detalla c\u00f3mo estructurar un proyecto JavaScript Vanilla sin usar componentes, pruebas ni clases, integrando Tailwind CSS v\u00eda CDN para un proyecto con m\u00faltiples p\u00e1ginas. Cubre la estructura base, la finalidad de las carpetas, convenciones de nombres, modularizaci\u00f3n, gesti\u00f3n de activos, un ejemplo pr\u00e1ctico (una aplicaci\u00f3n de notas simple con varias p\u00e1ginas), escalabilidad y consideraciones adicionales.</p>"},{"location":"tutorials/p1/#1-estructura-base","title":"1. Estructura Base","text":"<p>Estructura inicial para un proyecto JavaScript Vanilla con m\u00faltiples p\u00e1ginas:</p> <pre><code>note-app/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 styles/\n\u2502   \u251c\u2500\u2500 assets/\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2514\u2500\u2500 main.js\n\u251c\u2500\u2500 public/\u2502  \n\u2502   \u251c\u2500\u2500 notes.html\n\u2502   \u2514\u2500\u2500 about.html\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 package.json\n</code></pre> <p>Justificaci\u00f3n:</p> <ul> <li>Simplicidad: Estructura minimalista, adecuada para proyectos peque\u00f1os y medianos.</li> <li>M\u00faltiples P\u00e1ginas: <code>public/</code> contiene varias p\u00e1ginas HTML (<code>index.html</code>, <code>notes.html</code>, <code>about.html</code>).</li> <li>Flexibilidad: Compatible con Tailwind CSS v\u00eda CDN y escalable para mayor complejidad.</li> </ul>"},{"location":"tutorials/p1/#2-finalidad-de-las-carpetas","title":"2. Finalidad de las Carpetas","text":""},{"location":"tutorials/p1/#src","title":"<code>src/</code>","text":"<p>Contiene el c\u00f3digo fuente del proyecto.</p> <ul> <li><code>scripts/</code>: Archivos JavaScript que manejan la l\u00f3gica espec\u00edfica de cada p\u00e1gina (por ejemplo, <code>home.js</code>, <code>notes.js</code>).</li> <li><code>styles/</code>: Archivos CSS personalizados, complementando Tailwind CSS cargado v\u00eda CDN.</li> <li><code>assets/</code>: Recursos est\u00e1ticos como im\u00e1genes, fuentes o datos JSON.</li> <li><code>utils/</code>: Funciones de utilidad reutilizables, como manipuladores del DOM o formateadores.</li> <li><code>main.js</code>: Punto de entrada principal que inicializa la l\u00f3gica com\u00fan y carga scripts espec\u00edficos seg\u00fan la p\u00e1gina.</li> </ul> <p>Justificaci\u00f3n: Separa la l\u00f3gica por funcionalidad, manteniendo el c\u00f3digo organizado y f\u00e1cil de mantener.</p>"},{"location":"tutorials/p1/#public","title":"<code>public/</code>","text":"<p>Contiene archivos HTML servidos directamente al navegador (<code>index.html</code>, <code>notes.html</code>, <code>about.html</code>).</p> <p>Justificaci\u00f3n: Agrupa las p\u00e1ginas p\u00fablicas, facilitando la navegaci\u00f3n y el acceso del navegador.</p>"},{"location":"tutorials/p1/#3-convenciones-de-nombres","title":"3. Convenciones de Nombres","text":"<ul> <li>Archivos JavaScript: Usa <code>camelCase</code> (por ejemplo, <code>noteManager.js</code>, <code>domUtils.js</code>). Justificaci\u00f3n: Est\u00e1ndar en JavaScript, mejora la legibilidad y alinea con nombres de variables.</li> <li>Archivos CSS: Usa <code>kebab-case</code> (por ejemplo, <code>custom-styles.css</code>). Justificaci\u00f3n: Convenci\u00f3n com\u00fan en CSS, compatible con sistemas de archivos.</li> <li>Carpetas: Usa <code>kebab-case</code> (por ejemplo, <code>src</code>, <code>scripts</code>, <code>utils</code>). Justificaci\u00f3n: Consistencia con nombres de archivos CSS y claridad.</li> <li>Archivos HTML: Usa <code>kebab-case</code> (por ejemplo, <code>index.html</code>, <code>notes.html</code>). Justificaci\u00f3n: Est\u00e1ndar para archivos web, mejora la legibilidad.</li> </ul> <p>Problema Com\u00fan: Inconsistencias en nombres (por ejemplo, <code>note_manager.js</code> vs. <code>NoteManager.js</code>). Soluci\u00f3n: Documentar convenciones en <code>README.md</code> y usar linters para forzar consistencia.</p>"},{"location":"tutorials/p1/#4-modularizacion","title":"4. Modularizaci\u00f3n","text":"<p>Usamos m\u00f3dulos ES6 (<code>import</code>/<code>export</code>) para organizar la l\u00f3gica sin clases ni componentes.</p> <p>Ejemplo de M\u00f3dulo (<code>scripts/noteManager.js</code>): <pre><code>export const noteManager = {\n  notes: [],\n  addNote(text) {\n    this.notes.push({ text, id: Date.now() });\n    return this.notes;\n  },\n  getNotes() {\n    return this.notes;\n  }\n};\n</code></pre></p> <p>Importaci\u00f3n en <code>main.js</code>: <pre><code>import { noteManager } from './scripts/noteManager.js';\nimport { renderNotes } from './scripts/notesPage.js';\n\nif (window.location.pathname.includes('notes.html')) {\n  renderNotes(noteManager);\n}\n</code></pre></p> <p>Impacto en la Estructura:</p> <ul> <li><code>scripts/</code> contiene m\u00f3dulos espec\u00edficos por p\u00e1gina (por ejemplo, <code>notesPage.js</code> para <code>notes.html</code>).</li> <li><code>utils/</code> almacena funciones reutilizables (por ejemplo, <code>domUtils.js</code>).</li> <li><code>main.js</code> detecta la p\u00e1gina actual y carga la l\u00f3gica correspondiente.</li> </ul> <p>Justificaci\u00f3n: Los m\u00f3dulos ES6 promueven la reutilizaci\u00f3n y claridad sin necesidad de clases.</p> <p>Problema Com\u00fan: Errores de importaci\u00f3n en navegadores sin soporte para m\u00f3dulos. Soluci\u00f3n: Usar un bundler como Parcel o incluir un polyfill para m\u00f3dulos ES6.</p>"},{"location":"tutorials/p1/#5-gestion-de-activos","title":"5. Gesti\u00f3n de Activos","text":"<p>Los activos est\u00e1ticos se organizan en <code>src/assets/</code>:</p> <pre><code>src/assets/\n\u251c\u2500\u2500 images/\n\u2502   \u251c\u2500\u2500 logo.png\n\u2502   \u2514\u2500\u2500 icon-note.png\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 default-notes.json\n</code></pre> <p>Referenciando Activos: - En JavaScript:   <pre><code>const icon = new Image();\nicon.src = './assets/images/icon-note.png';\ndocument.body.appendChild(icon);\n</code></pre> - En CSS:   <pre><code>.note-icon {\n  background-image: url('../assets/images/icon-note.png');\n}\n</code></pre></p> <p>Justificaci\u00f3n:</p> <ul> <li>Organizar por tipo facilita la localizaci\u00f3n de recursos.</li> <li>Rutas relativas aseguran portabilidad.</li> <li>Tailwind CSS maneja estilos din\u00e1micos, reduciendo la necesidad de CSS personalizado para activos.</li> </ul> <p>Problema Com\u00fan: Rutas incorrectas al mover archivos. Soluci\u00f3n: Usar rutas relativas y verificarlas durante el desarrollo.</p>"},{"location":"tutorials/p1/#6-ejemplo-practico-aplicacion-de-notas-con-multiples-paginas","title":"6. Ejemplo Pr\u00e1ctico: Aplicaci\u00f3n de Notas con M\u00faltiples P\u00e1ginas","text":"<p>Estructura para una aplicaci\u00f3n de notas con p\u00e1ginas de inicio, notas y acerca de:</p> <pre><code>note-app/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 scripts/\n\u2502   \u2502   \u251c\u2500\u2500 noteManager.js\n\u2502   \u2502   \u251c\u2500\u2500 homePage.js\n\u2502   \u2502   \u2514\u2500\u2500 notesPage.js\n\u2502   \u251c\u2500\u2500 styles/\n\u2502   \u2502   \u2514\u2500\u2500 custom-styles.css\n\u2502   \u251c\u2500\u2500 assets/\n\u2502   \u2502   \u2514\u2500\u2500 images/\n\u2502   \u2502       \u2514\u2500\u2500 icon-note.png\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u2514\u2500\u2500 domUtils.js\n\u2502   \u2514\u2500\u2500 main.js\n\u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u251c\u2500\u2500 notes.html\n\u2502   \u2514\u2500\u2500 about.html\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 package.json\n</code></pre> <p>C\u00f3digo de Ejemplo:</p> <p><code>public/index.html</code>: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Inicio - Notas App&lt;/title&gt;\n  &lt;script src=\"https://cdn.tailwindcss.com\"&gt;&lt;/script&gt;\n  &lt;link rel=\"stylesheet\" href=\"../src/styles/custom-styles.css\"&gt;\n&lt;/head&gt;\n&lt;body class=\"bg-gray-100\"&gt;\n  &lt;nav class=\"bg-blue-600 p-4\"&gt;\n    &lt;ul class=\"flex space-x-4 text-white\"&gt;\n      &lt;li&gt;&lt;a href=\"index.html\" class=\"hover:underline\"&gt;Inicio&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"notes.html\" class=\"hover:underline\"&gt;Notas&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"about.html\" class=\"hover:underline\"&gt;Acerca&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/nav&gt;\n  &lt;div class=\"container mx-auto p-4\"&gt;\n    &lt;h1 class=\"text-2xl font-bold\"&gt;Bienvenido a Notas App&lt;/h1&gt;\n    &lt;p class=\"mt-2\"&gt;Explora y gestiona tus notas.&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;script type=\"module\" src=\"../src/main.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p><code>public/notes.html</code>: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Notas&lt;/title&gt;\n  &lt;script src=\"https://cdn.tailwindcss.com\"&gt;&lt;/script&gt;\n  &lt;link rel=\"stylesheet\" href=\"../src/styles/custom-styles.css\"&gt;\n&lt;/head&gt;\n&lt;body class=\"bg-gray-100\"&gt;\n  &lt;nav class=\"bg-blue-600 p-4\"&gt;\n    &lt;ul class=\"flex space-x-4 text-white\"&gt;\n      &lt;li&gt;&lt;a href=\"index.html\" class=\"hover:underline\"&gt;Inicio&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"notes.html\" class=\"hover:underline\"&gt;Notas&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"about.html\" class=\"hover:underline\"&gt;Acerca&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/nav&gt;\n  &lt;div class=\"container mx-auto p-4\"&gt;\n    &lt;h1 class=\"text-2xl font-bold\"&gt;Tus Notas&lt;/h1&gt;\n    &lt;input type=\"text\" id=\"note-input\" class=\"border p-2 mt-2 w-full\" placeholder=\"Escribe una nota\"&gt;\n    &lt;button id=\"add-note\" class=\"bg-blue-500 text-white p-2 mt-2\"&gt;Agregar Nota&lt;/button&gt;\n    &lt;ul id=\"note-list\" class=\"mt-4 space-y-2\"&gt;&lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;script type=\"module\" src=\"../src/main.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p><code>public/about.html</code>: <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Acerca&lt;/title&gt;\n  &lt;script src=\"https://cdn.tailwindcss.com\"&gt;&lt;/script&gt;\n  &lt;link rel=\"stylesheet\" href=\"../src/styles/custom-styles.css\"&gt;\n&lt;/head&gt;\n&lt;body class=\"bg-gray-100\"&gt;\n  &lt;nav class=\"bg-blue-600 p-4\"&gt;\n    &lt;ul class=\"flex space-x-4 text-white\"&gt;\n      &lt;li&gt;&lt;a href=\"index.html\" class=\"hover:underline\"&gt;Inicio&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"notes.html\" class=\"hover:underline\"&gt;Notas&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"about.html\" class=\"hover:underline\"&gt;Acerca&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/nav&gt;\n  &lt;div class=\"container mx-auto p-4\"&gt;\n    &lt;h1 class=\"text-2xl font-bold\"&gt;Acerca de Notas App&lt;/h1&gt;\n    &lt;p class=\"mt-2\"&gt;Una aplicaci\u00f3n simple para gestionar notas.&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;script type=\"module\" src=\"../src/main.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p><code>src/scripts/noteManager.js</code>: <pre><code>export const noteManager = {\n  notes: [],\n  addNote(text) {\n    this.notes.push({ text, id: Date.now() });\n    return this.notes;\n  },\n  getNotes() {\n    return this.notes;\n  }\n};\n</code></pre></p> <p><code>src/scripts/notesPage.js</code>: <pre><code>import { noteManager } from './noteManager.js';\nimport { qs } from '../utils/domUtils.js';\n\nexport function renderNotes(manager) {\n  const noteList = qs('#note-list');\n  const noteInput = qs('#note-input');\n  const addButton = qs('#add-note');\n\n  const updateNotes = () =&gt; {\n    noteList.innerHTML = manager.getNotes().map(note =&gt; `\n      &lt;li class=\"border p-2 bg-white\"&gt;${note.text}&lt;/li&gt;\n    `).join('');\n  };\n\n  addButton.addEventListener('click', () =&gt; {\n    if (noteInput.value.trim()) {\n      manager.addNote(noteInput.value);\n      noteInput.value = '';\n      updateNotes();\n    }\n  });\n\n  updateNotes();\n}\n</code></pre></p> <p><code>src/scripts/homePage.js</code>: <pre><code>export function initHome() {\n  console.log('P\u00e1gina de inicio cargada');\n}\n</code></pre></p> <p><code>src/utils/domUtils.js</code>: <pre><code>export const qs = selector =&gt; document.querySelector(selector);\n</code></pre></p> <p><code>src/styles/custom-styles.css</code>: <pre><code>body {\n  font-family: Arial, sans-serif;\n}\n</code></pre></p> <p><code>src/main.js</code>: <pre><code>import { initHome } from './scripts/homePage.js';\nimport { renderNotes } from './scripts/notesPage.js';\nimport { noteManager } from './scripts/noteManager.js';\n\nif (window.location.pathname.includes('index.html')) {\n  initHome();\n} else if (window.location.pathname.includes('notes.html')) {\n  renderNotes(noteManager);\n}\n</code></pre></p> <p>Justificaci\u00f3n: Esta estructura usa Tailwind CSS para estilos r\u00e1pidos, organiza la l\u00f3gica por p\u00e1gina (<code>homePage.js</code>, <code>notesPage.js</code>) y mantiene la funcionalidad simple con <code>noteManager.js</code>. Las m\u00faltiples p\u00e1ginas comparten una navegaci\u00f3n com\u00fan.</p>"},{"location":"tutorials/p1/#7-escalabilidad","title":"7. Escalabilidad","text":"<p>Para proyectos m\u00e1s grandes:</p> <ul> <li>Subcarpetas en <code>scripts/</code>: Por ejemplo, <code>scripts/pages/</code> para l\u00f3gica espec\u00edfica de p\u00e1ginas y <code>scripts/core/</code> para l\u00f3gica central.</li> <li>M\u00e1s P\u00e1ginas HTML: A\u00f1adir m\u00e1s archivos en <code>public/</code> (por ejemplo, <code>archive.html</code>).</li> <li>Gesti\u00f3n de Estado: Usar <code>noteManager.js</code> como store centralizado para datos compartidos.</li> </ul> <p>Ejemplo de Estructura Escalable: <pre><code>note-app/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 scripts/\n\u2502   \u2502   \u251c\u2500\u2500 pages/\n\u2502   \u2502   \u251c\u2500\u2500 core/\n\u2502   \u2502   \u2514\u2500\u2500 noteManager.js\n\u2502   \u251c\u2500\u2500 styles/\n\u2502   \u251c\u2500\u2500 assets/\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2514\u2500\u2500 main.js\n\u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u251c\u2500\u2500 notes.html\n\u2502   \u251c\u2500\u2500 about.html\n\u2502   \u2514\u2500\u2500 archive.html\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 package.json\n</code></pre></p> <p>Justificaci\u00f3n: Permite a\u00f1adir m\u00e1s p\u00e1ginas y l\u00f3gica sin desordenar la estructura.</p>"},{"location":"tutorials/p2/","title":"Uso de <code>import</code> y <code>export</code> en JavaScript Vanilla","text":"<p>Este tutorial te guiar\u00e1 a trav\u00e9s de los fundamentos de los m\u00f3dulos en JavaScript, c\u00f3mo usar <code>import</code> y <code>export</code>, y c\u00f3mo aplicarlos en proyectos pr\u00e1cticos. Est\u00e1 dise\u00f1ado para principiantes, con ejemplos claros y consejos para evitar errores comunes.</p>"},{"location":"tutorials/p2/#fundamentos-teoricos","title":"Fundamentos Te\u00f3ricos","text":""},{"location":"tutorials/p2/#por-que-usar-modulos","title":"\u00bfPor qu\u00e9 usar m\u00f3dulos?","text":"<p>Los m\u00f3dulos permiten dividir el c\u00f3digo en archivos separados, cada uno con una responsabilidad espec\u00edfica. Esto mejora: - Organizaci\u00f3n: C\u00f3digo m\u00e1s legible y mantenible. - Reutilizaci\u00f3n: Puedes importar solo lo que necesitas en otros archivos. - Encapsulamiento: Limita el acceso a variables y funciones internas, reduciendo conflictos.</p> <p>JavaScript utiliza el sistema de m\u00f3dulos ES Modules (ESM), introducido en ES6 (2015), que es el est\u00e1ndar moderno para modularizaci\u00f3n en JavaScript Vanilla.</p>"},{"location":"tutorials/p2/#named-exports-vs-default-exports","title":"Named Exports vs. Default Exports","text":"<ul> <li>Named Exports: Permiten exportar m\u00faltiples elementos (variables, funciones, clases) desde un m\u00f3dulo, cada uno con un nombre espec\u00edfico. Se importan usando el mismo nombre.</li> <li>Default Exports: Permiten exportar un solo elemento por m\u00f3dulo como el \"valor predeterminado\". Se pueden importar con cualquier nombre.</li> </ul>"},{"location":"tutorials/p2/#como-maneja-javascript-los-modulos","title":"C\u00f3mo maneja JavaScript los m\u00f3dulos","text":"<ul> <li>Los m\u00f3dulos se ejecutan en modo estricto (<code>\"use strict\"</code>) por defecto.</li> <li>Cada m\u00f3dulo tiene su propio \u00e1mbito (scope), por lo que las variables no son globales.</li> <li>Los m\u00f3dulos se cargan una sola vez y se comparten entre todas las importaciones.</li> <li>Los navegadores requieren el atributo <code>type=\"module\"</code> en la etiqueta <code>&lt;script&gt;</code> para usar ESM.</li> </ul>"},{"location":"tutorials/p2/#ejemplos-practicos","title":"Ejemplos Pr\u00e1cticos","text":""},{"location":"tutorials/p2/#estructura-de-archivos","title":"Estructura de Archivos","text":"<p>Organiza tus archivos JavaScript en una estructura clara, con un archivo por m\u00f3dulo. Ejemplo:</p> <pre><code>proyecto/\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 js/\n\u2502   \u251c\u2500\u2500 main.js\n\u2502   \u251c\u2500\u2500 mathUtils.js\n\u2502   \u251c\u2500\u2500 user.js\n</code></pre>"},{"location":"tutorials/p2/#named-exports","title":"Named Exports","text":"<p>En <code>mathUtils.js</code>, exportamos varias funciones con nombres espec\u00edficos:</p> <pre><code>// mathUtils.js\nexport const suma = (a, b) =&gt; a + b;\nexport const resta = (a, b) =&gt; a - b;\n\nexport function multiplica(a, b) {\n  return a * b;\n}\n</code></pre> <p>Importamos en <code>main.js</code>:</p> <pre><code>// main.js\nimport { suma, resta, multiplica } from './mathUtils.js';\n\nconsole.log(suma(5, 3)); // 8\nconsole.log(resta(5, 3)); // 2\nconsole.log(multiplica(5, 3)); // 15\n</code></pre> <p>Nota: Usa llaves <code>{}</code> para importar named exports y especifica los nombres exactos.</p>"},{"location":"tutorials/p2/#default-exports","title":"Default Exports","text":"<p>En <code>user.js</code>, exportamos una clase como exportaci\u00f3n predeterminada:</p> <pre><code>// user.js\nexport default class User {\n  constructor(nombre) {\n    this.nombre = nombre;\n  }\n\n  saludar() {\n    return `\u00a1Hola, ${this.nombre}!`;\n  }\n}\n</code></pre> <p>Importamos en <code>main.js</code>:</p> <pre><code>// main.js\nimport User from './user.js'; // Sin llaves, cualquier nombre es v\u00e1lido\n\nconst usuario = new User('Ana');\nconsole.log(usuario.saludar()); // \u00a1Hola, Ana!\n</code></pre>"},{"location":"tutorials/p2/#combinando-named-y-default-exports","title":"Combinando Named y Default Exports","text":"<p>Puedes combinar ambos tipos en un solo m\u00f3dulo. En <code>mathUtils.js</code>:</p> <pre><code>// mathUtils.js\nexport const suma = (a, b) =&gt; a + b;\nexport const resta = (a, b) =&gt; a - b;\n\nexport default function divide(a, b) {\n  if (b === 0) throw new Error('Divisi\u00f3n por cero');\n  return a / b;\n}\n</code></pre> <p>Importamos en <code>main.js</code>:</p> <pre><code>// main.js\nimport divide, { suma, resta } from './mathUtils.js';\n\nconsole.log(suma(5, 3)); // 8\nconsole.log(resta(5, 3)); // 2\nconsole.log(divide(6, 2)); // 3\n</code></pre>"},{"location":"tutorials/p2/#uso-en-navegadores","title":"Uso en Navegadores","text":"<p>Para usar m\u00f3dulos en navegadores, necesitas: 1. Atributo <code>type=\"module\"</code>: Indica al navegador que el script usa ESM. 2. Servidor HTTP: Los m\u00f3dulos no funcionan con URLs <code>file://</code> debido a restricciones de seguridad (CORS).</p> <p>Ejemplo en <code>index.html</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;M\u00f3dulos en JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;script type=\"module\" src=\"js/main.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tutorials/p3/","title":"\u00bfQu\u00e9 son las rutas en JavaScript?","text":"<p>En JavaScript, las rutas se utilizan para localizar archivos, especialmente al importar m\u00f3dulos con <code>import</code> o al cargar recursos (como im\u00e1genes o scripts). Las rutas pueden ser absolutas o relativas, y su correcto uso es crucial para que los m\u00f3dulos y recursos se carguen correctamente.</p> <ul> <li>Ruta absoluta: Especifica la ubicaci\u00f3n completa de un archivo desde la ra\u00edz del sistema de archivos o del dominio. Ejemplo: <code>/home/usuario/proyecto/js/main.js</code> o <code>https://ejemplo.com/js/main.js</code>.</li> <li>Ruta relativa: Especifica la ubicaci\u00f3n de un archivo en relaci\u00f3n con el archivo actual. Ejemplo: <code>./js/main.js</code> o <code>../utils/helpers.js</code>.</li> </ul>"},{"location":"tutorials/p3/#diferencias-clave","title":"Diferencias clave","text":"<ul> <li> <p>Rutas absolutas:</p> <ul> <li>Comienzan con <code>/</code> (ra\u00edz del servidor) o un protocolo (<code>http://</code>, <code>https://</code>).</li> <li>\u00datiles para referenciar recursos en servidores externos o desde la ra\u00edz de un proyecto.</li> <li>No dependen de la ubicaci\u00f3n del archivo actual, pero pueden ser menos flexibles.</li> </ul> </li> <li> <p>Rutas relativas:</p> <ul> <li>Comienzan con <code>./</code> (directorio actual) o <code>../</code> (directorio padre).</li> <li>M\u00e1s flexibles para proyectos locales, pero dependen de la ubicaci\u00f3n del archivo actual.</li> <li>Comunes en m\u00f3dulos ES para importar archivos locales.</li> </ul> </li> </ul>"},{"location":"tutorials/p3/#como-maneja-javascript-las-rutas","title":"C\u00f3mo maneja JavaScript las rutas","text":"<ul> <li>En navegadores, las rutas en m\u00f3dulos (<code>import</code>) se resuelven como URLs relativas al archivo HTML o al dominio.</li> <li>En Node.js, las rutas se resuelven en el sistema de archivos local.</li> <li>Los m\u00f3dulos ES requieren la extensi\u00f3n <code>.js</code> en las rutas (a diferencia de Node.js con CommonJS, donde es opcional).</li> <li>Los navegadores necesitan un servidor HTTP para cargar m\u00f3dulos debido a restricciones de seguridad (CORS).</li> </ul>"},{"location":"tutorials/p3/#ejemplos-practicos","title":"Ejemplos Pr\u00e1cticos","text":""},{"location":"tutorials/p3/#estructura-de-archivos","title":"Estructura de Archivos","text":"<p>Para los ejemplos, usaremos esta estructura de proyecto:</p> <pre><code>proyecto/\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 js/\n\u2502   \u251c\u2500\u2500 main.js\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u251c\u2500\u2500 mathUtils.js\n\u2502   \u2502   \u251c\u2500\u2500 stringUtils.js\n\u2502   \u251c\u2500\u2500 models/\n\u2502   \u2502   \u251c\u2500\u2500 user.js\n</code></pre>"},{"location":"tutorials/p3/#rutas-relativas","title":"Rutas Relativas","text":"<p>En <code>main.js</code>, importamos m\u00f3dulos desde <code>utils</code> y <code>models</code> usando rutas relativas:</p> <pre><code>// js/main.js\nimport { suma } from './utils/mathUtils.js'; // Mismo directorio\nimport { capitalize } from './utils/stringUtils.js'; // Mismo directorio\nimport User from '../models/user.js'; // Directorio padre\n\nconsole.log(suma(2, 3)); // 5\nconsole.log(capitalize('hola')); // Hola\nconst user = new User('Ana');\nconsole.log(user.saludar()); // \u00a1Hola, Ana!\n</code></pre> <p>En <code>mathUtils.js</code>:</p> <pre><code>// js/utils/mathUtils.js\nexport const suma = (a, b) =&gt; a + b;\n</code></pre> <p>En <code>stringUtils.js</code>:</p> <pre><code>// js/utils/stringUtils.js\nexport const capitalize = (str) =&gt; str.charAt(0).toUpperCase() + str.slice(1);\n</code></pre> <p>En <code>user.js</code>:</p> <pre><code>// js/models/user.js\nexport default class User {\n  constructor(nombre) {\n    this.nombre = nombre;\n  }\n  saludar() {\n    return `\u00a1Hola, ${this.nombre}!`;\n  }\n}\n</code></pre> <p>Notas sobre rutas relativas:</p> <ul> <li><code>./</code> indica el directorio actual.</li> <li><code>../</code> sube un nivel en la estructura de directorios.</li> <li>Incluye siempre la extensi\u00f3n <code>.js</code> para m\u00f3dulos en navegadores.</li> </ul>"},{"location":"tutorials/p4/","title":"Tutorial B\u00e1sico: API CRUD con Mockoon","text":""},{"location":"tutorials/p4/#que-es-mockoon","title":"\u00bfQu\u00e9 es Mockoon?","text":"<p>Mockoon es una herramienta gratuita que te permite crear APIs falsas (mock) de forma muy f\u00e1cil. Es perfecto cuando necesitas probar tu aplicaci\u00f3n web pero a\u00fan no tienes un servidor real.</p>"},{"location":"tutorials/p4/#que-es-crud","title":"\u00bfQu\u00e9 es CRUD?","text":"<p>CRUD son las 4 operaciones b\u00e1sicas con datos: - Crear (POST) - Agregar nuevos datos - Leer (GET) - Obtener datos existentes - Actualizar (PUT) - Modificar datos - Eliminar (DELETE) - Borrar datos</p>"},{"location":"tutorials/p4/#instalacion-simple","title":"Instalaci\u00f3n Simple","text":"<ol> <li>Ve a mockoon.com</li> <li>Descarga la aplicaci\u00f3n para tu computadora</li> <li>Inst\u00e1lala y \u00e1brela</li> </ol>"},{"location":"tutorials/p4/#configuracion-basica","title":"Configuraci\u00f3n B\u00e1sica","text":""},{"location":"tutorials/p4/#paso-1-crear-tu-primera-api","title":"Paso 1: Crear tu Primera API","text":"<ol> <li>Abre Mockoon</li> <li>Haz clic en \"New Environment\"</li> <li>Ponle un nombre: \"Mi API de Usuarios\"</li> <li>Cambia el puerto a: <code>3001</code></li> <li>Haz clic en el bot\u00f3n \u25b6\ufe0f para iniciar</li> </ol>"},{"location":"tutorials/p4/#paso-2-datos-de-ejemplo","title":"Paso 2: Datos de Ejemplo","text":"<p>Vamos a trabajar con usuarios simples:</p> <pre><code>{\n  \"id\": 1,\n  \"nombre\": \"Juan\",\n  \"email\": \"juan@email.com\"\n}\n</code></pre>"},{"location":"tutorials/p4/#operaciones-crud-basicas","title":"Operaciones CRUD B\u00e1sicas","text":""},{"location":"tutorials/p4/#1-crear-usuario-post","title":"1. CREAR Usuario (POST)","text":"<p>En Mockoon: - M\u00e9todo: <code>POST</code> - Ruta: <code>/usuarios</code> - Respuesta:</p> <pre><code>{\n  \"id\": 1,\n  \"nombre\": \"{{body 'nombre'}}\",\n  \"email\": \"{{body 'email'}}\",\n  \"mensaje\": \"Usuario creado exitosamente\"\n}\n</code></pre> <p>Prueba con cURL: <pre><code>curl -X POST http://localhost:3001/usuarios \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"nombre\": \"Ana\", \"email\": \"ana@email.com\"}'\n</code></pre></p>"},{"location":"tutorials/p4/#2-leer-usuarios-get","title":"2. LEER Usuarios (GET)","text":"<p>En Mockoon: - M\u00e9todo: <code>GET</code> - Ruta: <code>/usuarios</code> - Respuesta:</p> <pre><code>[\n  {\n    \"id\": 1,\n    \"nombre\": \"Juan\",\n    \"email\": \"juan@email.com\"\n  },\n  {\n    \"id\": 2,\n    \"nombre\": \"Mar\u00eda\",\n    \"email\": \"maria@email.com\"\n  }\n]\n</code></pre> <p>Prueba: <pre><code>curl http://localhost:3001/usuarios\n</code></pre></p>"},{"location":"tutorials/p4/#3-actualizar-usuario-put","title":"3. ACTUALIZAR Usuario (PUT)","text":"<p>En Mockoon: - M\u00e9todo: <code>PUT</code> - Ruta: <code>/usuarios/1</code> - Respuesta:</p> <pre><code>{\n  \"id\": 1,\n  \"nombre\": \"{{body 'nombre'}}\",\n  \"email\": \"{{body 'email'}}\",\n  \"mensaje\": \"Usuario actualizado\"\n}\n</code></pre> <p>Prueba: <pre><code>curl -X PUT http://localhost:3001/usuarios/1 \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"nombre\": \"Juan Carlos\", \"email\": \"juancarlos@email.com\"}'\n</code></pre></p>"},{"location":"tutorials/p4/#4-eliminar-usuario-delete","title":"4. ELIMINAR Usuario (DELETE)","text":"<p>En Mockoon: - M\u00e9todo: <code>DELETE</code> - Ruta: <code>/usuarios/1</code> - Respuesta:</p> <pre><code>{\n  \"mensaje\": \"Usuario eliminado exitosamente\"\n}\n</code></pre> <p>Prueba: <pre><code>curl -X DELETE http://localhost:3001/usuarios/1\n</code></pre></p>"},{"location":"tutorials/p4/#ejemplo-practico-con-html","title":"Ejemplo Pr\u00e1ctico con HTML","text":"<p>Crea un archivo <code>test.html</code> para probar tu API:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Prueba API&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Usuarios&lt;/h1&gt;\n    &lt;button onclick=\"obtenerUsuarios()\"&gt;Ver Usuarios&lt;/button&gt;\n    &lt;div id=\"usuarios\"&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n        async function obtenerUsuarios() {\n            try {\n                const response = await fetch('http://localhost:3001/usuarios');\n                const usuarios = await response.json();\n\n                document.getElementById('usuarios').innerHTML = \n                    usuarios.map(u =&gt; `&lt;p&gt;${u.nombre} - ${u.email}&lt;/p&gt;`).join('');\n            } catch (error) {\n                console.error('Error:', error);\n            }\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tutorials/p4/#pasos-para-probar","title":"Pasos para Probar","text":"<ol> <li>Inicia Mockoon - Aseg\u00farate que tu API est\u00e9 corriendo</li> <li>Abre el navegador - Ve a tu archivo <code>test.html</code></li> <li>Haz clic en \"Ver Usuarios\" - Deber\u00edas ver los datos</li> <li>Prueba con cURL - Usa los comandos de arriba</li> </ol>"},{"location":"tutorials/p4/#consejos-importantes","title":"Consejos Importantes","text":"<ul> <li>\u2705 Siempre inicia Mockoon antes de probar</li> <li>\u2705 Verifica que el puerto sea el correcto (3001)</li> <li>\u2705 Usa <code>Content-Type: application/json</code> para POST y PUT</li> <li>\u2705 Revisa la consola del navegador si algo no funciona</li> </ul>"},{"location":"tutorials/p4/#ejercicios","title":"Ejercicios","text":"<ol> <li>Crea una nueva ruta para obtener un usuario por ID: <code>/usuarios/:id</code></li> <li>Agrega un campo \"edad\" a tus usuarios</li> <li>Crea una API para \"productos\" con las mismas operaciones CRUD</li> </ol>"},{"location":"tutorials/p4/#recursos-utiles","title":"Recursos \u00datiles","text":"<ul> <li>Documentaci\u00f3n de Mockoon</li> <li>Gu\u00eda de cURL</li> <li>MDN Fetch API</li> </ul> <p>\u00a1Felicidades! Ya sabes crear APIs b\u00e1sicas con Mockoon. Practica creando diferentes rutas y prob\u00e1ndolas con tu navegador o cURL.</p>"},{"location":"tutorials/p5/","title":"Tutorial B\u00e1sico: Consumo de APIs con Fetch","text":""},{"location":"tutorials/p5/#introduccion","title":"Introducci\u00f3n","text":"<p>En este tutorial aprender\u00e1s a consumir APIs usando Fetch y a mostrar los datos en una p\u00e1gina web. Fetch es la forma moderna de hacer peticiones HTTP en JavaScript.</p>"},{"location":"tutorials/p5/#que-es-fetch","title":"\u00bfQu\u00e9 es Fetch?","text":"<p>Fetch es una funci\u00f3n nativa de JavaScript que nos permite: - Obtener datos de APIs - Enviar datos a servidores - Trabajar con respuestas de forma as\u00edncrona</p>"},{"location":"tutorials/p5/#sintaxis-basica","title":"Sintaxis B\u00e1sica","text":"<pre><code>fetch('url-de-la-api')\n  .then(response =&gt; response.json())\n  .then(data =&gt; {\n    // Usar los datos aqu\u00ed\n    console.log(data);\n  })\n  .catch(error =&gt; {\n    console.error('Error:', error);\n  });\n</code></pre>"},{"location":"tutorials/p5/#ejemplo-practico-lista-de-usuarios","title":"Ejemplo Pr\u00e1ctico: Lista de Usuarios","text":"<p>Vamos a crear una p\u00e1gina web que obtenga usuarios de una API y los muestre en pantalla.</p>"},{"location":"tutorials/p5/#codigo-html-completo","title":"C\u00f3digo HTML Completo","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Consumo de API con Fetch&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n\n        .container {\n            background: white;\n            padding: 30px;\n            border-radius: 10px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n\n        h1 {\n            color: #333;\n            text-align: center;\n            margin-bottom: 30px;\n        }\n\n        button {\n            background-color: #007bff;\n            color: white;\n            border: none;\n            padding: 12px 24px;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 16px;\n            margin-bottom: 20px;\n        }\n\n        button:hover {\n            background-color: #0056b3;\n        }\n\n        .loading {\n            text-align: center;\n            color: #666;\n            font-style: italic;\n        }\n\n        .user-card {\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            padding: 15px;\n            margin: 10px 0;\n            background-color: #fafafa;\n        }\n\n        .user-name {\n            font-size: 18px;\n            font-weight: bold;\n            color: #333;\n            margin-bottom: 5px;\n        }\n\n        .user-email {\n            color: #666;\n            margin-bottom: 5px;\n        }\n\n        .user-phone {\n            color: #888;\n            font-size: 14px;\n        }\n\n        .error {\n            background-color: #f8d7da;\n            color: #721c24;\n            padding: 10px;\n            border-radius: 5px;\n            margin: 10px 0;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;Lista de Usuarios&lt;/h1&gt;\n\n        &lt;button onclick=\"obtenerUsuarios()\"&gt;Cargar Usuarios&lt;/button&gt;\n\n        &lt;div id=\"contenido\"&gt;\n            &lt;p&gt;Haz clic en \"Cargar Usuarios\" para ver la lista&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        // Funci\u00f3n para obtener usuarios de la API\n        async function obtenerUsuarios() {\n            const contenido = document.getElementById('contenido');\n\n            // Mostrar mensaje de carga\n            contenido.innerHTML = '&lt;p class=\"loading\"&gt;Cargando usuarios...&lt;/p&gt;';\n\n            try {\n                // Hacer petici\u00f3n a la API\n                const response = await fetch('https://jsonplaceholder.typicode.com/users');\n\n                // Verificar si la respuesta es exitosa\n                if (!response.ok) {\n                    throw new Error(`Error: ${response.status}`);\n                }\n\n                // Convertir respuesta a JSON\n                const usuarios = await response.json();\n\n                // Mostrar usuarios en pantalla\n                mostrarUsuarios(usuarios);\n\n            } catch (error) {\n                // Mostrar error si algo sale mal\n                contenido.innerHTML = `\n                    &lt;div class=\"error\"&gt;\n                        &lt;strong&gt;Error:&lt;/strong&gt; No se pudieron cargar los usuarios. \n                        ${error.message}\n                    &lt;/div&gt;\n                `;\n            }\n        }\n\n        // Funci\u00f3n para mostrar usuarios en el HTML\n        function mostrarUsuarios(usuarios) {\n            const contenido = document.getElementById('contenido');\n\n            // Crear HTML para cada usuario\n            let html = '&lt;h2&gt;Usuarios encontrados:&lt;/h2&gt;';\n\n            usuarios.forEach(usuario =&gt; {\n                html += `\n                    &lt;div class=\"user-card\"&gt;\n                        &lt;div class=\"user-name\"&gt;${usuario.name}&lt;/div&gt;\n                        &lt;div class=\"user-email\"&gt;\ud83d\udce7 ${usuario.email}&lt;/div&gt;\n                        &lt;div class=\"user-phone\"&gt;\ud83d\udcde ${usuario.phone}&lt;/div&gt;\n                    &lt;/div&gt;\n                `;\n            });\n\n            // Insertar HTML en la p\u00e1gina\n            contenido.innerHTML = html;\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tutorials/p5/#como-funciona-el-codigo","title":"C\u00f3mo Funciona el C\u00f3digo","text":""},{"location":"tutorials/p5/#1-estructura-html","title":"1. Estructura HTML","text":"<ul> <li>Un bot\u00f3n para cargar los datos</li> <li>Un div con id=\"contenido\" donde se mostrar\u00e1n los usuarios</li> <li>Estilos CSS para que se vea bien</li> </ul>"},{"location":"tutorials/p5/#2-funcion-obtenerusuarios","title":"2. Funci\u00f3n obtenerUsuarios()","text":"<pre><code>async function obtenerUsuarios() {\n    // 1. Obtener referencia al contenedor\n    const contenido = document.getElementById('contenido');\n\n    // 2. Mostrar mensaje de carga\n    contenido.innerHTML = '&lt;p class=\"loading\"&gt;Cargando usuarios...&lt;/p&gt;';\n\n    try {\n        // 3. Hacer petici\u00f3n a la API\n        const response = await fetch('https://jsonplaceholder.typicode.com/users');\n\n        // 4. Verificar si fue exitosa\n        if (!response.ok) {\n            throw new Error(`Error: ${response.status}`);\n        }\n\n        // 5. Convertir a JSON\n        const usuarios = await response.json();\n\n        // 6. Mostrar en pantalla\n        mostrarUsuarios(usuarios);\n\n    } catch (error) {\n        // 7. Manejar errores\n        contenido.innerHTML = `&lt;div class=\"error\"&gt;Error: ${error.message}&lt;/div&gt;`;\n    }\n}\n</code></pre>"},{"location":"tutorials/p5/#3-funcion-mostrarusuarios","title":"3. Funci\u00f3n mostrarUsuarios()","text":"<pre><code>function mostrarUsuarios(usuarios) {\n    const contenido = document.getElementById('contenido');\n\n    let html = '&lt;h2&gt;Usuarios encontrados:&lt;/h2&gt;';\n\n    // Crear una tarjeta para cada usuario\n    usuarios.forEach(usuario =&gt; {\n        html += `\n            &lt;div class=\"user-card\"&gt;\n                &lt;div class=\"user-name\"&gt;${usuario.name}&lt;/div&gt;\n                &lt;div class=\"user-email\"&gt;\ud83d\udce7 ${usuario.email}&lt;/div&gt;\n                &lt;div class=\"user-phone\"&gt;\ud83d\udcde ${usuario.phone}&lt;/div&gt;\n            &lt;/div&gt;\n        `;\n    });\n\n    contenido.innerHTML = html;\n}\n</code></pre>"},{"location":"tutorials/p5/#pasos-para-probar-el-codigo","title":"Pasos para Probar el C\u00f3digo","text":"<ol> <li>Copia el c\u00f3digo HTML en un archivo llamado <code>index.html</code></li> <li>Abre el archivo en tu navegador web</li> <li>Haz clic en el bot\u00f3n \"Cargar Usuarios\"</li> <li>Observa c\u00f3mo se cargan y muestran los datos</li> </ol>"},{"location":"tutorials/p5/#conceptos-clave","title":"Conceptos Clave","text":""},{"location":"tutorials/p5/#asyncawait","title":"Async/Await","text":"<ul> <li><code>async</code>: Hace que una funci\u00f3n sea as\u00edncrona</li> <li><code>await</code>: Espera a que se complete una promesa</li> </ul>"},{"location":"tutorials/p5/#manejo-de-errores","title":"Manejo de Errores","text":"<ul> <li><code>try/catch</code>: Captura errores que puedan ocurrir</li> <li>Verificar <code>response.ok</code> antes de procesar datos</li> </ul>"},{"location":"tutorials/p5/#manipulacion-del-dom","title":"Manipulaci\u00f3n del DOM","text":"<ul> <li><code>getElementById()</code>: Obtener elementos HTML</li> <li><code>innerHTML</code>: Cambiar el contenido de un elemento</li> </ul>"},{"location":"tutorials/p5/#api-utilizada","title":"API Utilizada","text":"<p>En este ejemplo usamos JSONPlaceholder, una API gratuita para pruebas: - URL: <code>https://jsonplaceholder.typicode.com/users</code> - Devuelve una lista de 10 usuarios ficticios - No requiere autenticaci\u00f3n - Perfecta para aprender</p>"},{"location":"tutorials/p6/","title":"Tutorial B\u00e1sico: Dexie.js - Base de Datos IndexedDB","text":""},{"location":"tutorials/p6/#que-es-dexiejs","title":"\u00bfQu\u00e9 es Dexie.js?","text":"<p>Dexie.js es una librer\u00eda JavaScript que simplifica el trabajo con IndexedDB (la base de datos del navegador). Te permite almacenar datos localmente en el navegador de forma f\u00e1cil y r\u00e1pida.</p>"},{"location":"tutorials/p6/#por-que-usar-dexiejs","title":"\u00bfPor qu\u00e9 usar Dexie.js?","text":"<ul> <li>\u2705 F\u00e1cil de usar - Sintaxis simple y clara</li> <li>\u2705 Almacenamiento local - Los datos se guardan en el navegador</li> <li>\u2705 Sin servidor - No necesitas backend</li> <li>\u2705 R\u00e1pido - Acceso instant\u00e1neo a los datos</li> <li>\u2705 Offline - Funciona sin conexi\u00f3n a internet</li> </ul>"},{"location":"tutorials/p6/#instalacion","title":"Instalaci\u00f3n","text":""},{"location":"tutorials/p6/#opcion-1-cdn-recomendado-para-principiantes","title":"Opci\u00f3n 1: CDN (Recomendado para principiantes)","text":"<pre><code>&lt;script src=\"https://unpkg.com/dexie@latest/dist/dexie.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"tutorials/p6/#opcion-2-npm","title":"Opci\u00f3n 2: NPM","text":"<pre><code>npm install dexie\n</code></pre>"},{"location":"tutorials/p6/#conceptos-basicos","title":"Conceptos B\u00e1sicos","text":""},{"location":"tutorials/p6/#base-de-datos","title":"Base de Datos","text":"<p>Un contenedor que guarda todas tus tablas.</p>"},{"location":"tutorials/p6/#tabla-store","title":"Tabla (Store)","text":"<p>Un conjunto de datos similares (como usuarios, productos, etc.).</p>"},{"location":"tutorials/p6/#registro","title":"Registro","text":"<p>Un elemento individual en una tabla.</p>"},{"location":"tutorials/p6/#ejemplo-completo-lista-de-tareas","title":"Ejemplo Completo: Lista de Tareas","text":"<p>Vamos a crear una aplicaci\u00f3n simple de lista de tareas que guarda datos localmente.</p>"},{"location":"tutorials/p6/#archivo-indexhtml","title":"Archivo: <code>index.html</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Lista de Tareas con Dexie.js&lt;/title&gt;\n    &lt;style&gt;\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n\n        .container {\n            background: white;\n            padding: 30px;\n            border-radius: 10px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n\n        h1 {\n            color: #333;\n            text-align: center;\n            margin-bottom: 30px;\n        }\n\n        .form-group {\n            display: flex;\n            gap: 10px;\n            margin-bottom: 20px;\n        }\n\n        input[type=\"text\"] {\n            flex: 1;\n            padding: 12px;\n            border: 2px solid #ddd;\n            border-radius: 5px;\n            font-size: 16px;\n        }\n\n        button {\n            padding: 12px 20px;\n            background: #007bff;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 16px;\n        }\n\n        button:hover {\n            background: #0056b3;\n        }\n\n        .delete-btn {\n            background: #dc3545;\n            padding: 5px 10px;\n            font-size: 12px;\n        }\n\n        .delete-btn:hover {\n            background: #c82333;\n        }\n\n        .task-list {\n            list-style: none;\n        }\n\n        .task-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding: 15px;\n            margin-bottom: 10px;\n            background: #f8f9fa;\n            border-radius: 5px;\n            border-left: 4px solid #007bff;\n        }\n\n        .task-item.completed {\n            opacity: 0.6;\n            text-decoration: line-through;\n            border-left-color: #28a745;\n        }\n\n        .task-text {\n            flex: 1;\n            margin-right: 10px;\n        }\n\n        .task-actions {\n            display: flex;\n            gap: 5px;\n        }\n\n        .complete-btn {\n            background: #28a745;\n            padding: 5px 10px;\n            font-size: 12px;\n        }\n\n        .complete-btn:hover {\n            background: #218838;\n        }\n\n        .stats {\n            text-align: center;\n            margin-top: 20px;\n            padding: 15px;\n            background: #e9ecef;\n            border-radius: 5px;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;\ud83d\udcdd Mi Lista de Tareas&lt;/h1&gt;\n\n        &lt;div class=\"form-group\"&gt;\n            &lt;input type=\"text\" id=\"taskInput\" placeholder=\"Escribe una nueva tarea...\"&gt;\n            &lt;button onclick=\"addTask()\"&gt;Agregar&lt;/button&gt;\n        &lt;/div&gt;\n\n        &lt;ul id=\"taskList\" class=\"task-list\"&gt;&lt;/ul&gt;\n\n        &lt;div class=\"stats\"&gt;\n            &lt;p&gt;Total de tareas: &lt;span id=\"totalTasks\"&gt;0&lt;/span&gt;&lt;/p&gt;\n            &lt;p&gt;Completadas: &lt;span id=\"completedTasks\"&gt;0&lt;/span&gt;&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Dexie.js desde CDN --&gt;\n    &lt;script src=\"https://unpkg.com/dexie@latest/dist/dexie.js\"&gt;&lt;/script&gt;\n\n    &lt;script&gt;\n        // 1. Crear la base de datos\n        const db = new Dexie('TaskDatabase');\n\n        // 2. Definir el esquema (estructura de la base de datos)\n        db.version(1).stores({\n            tasks: '++id, text, completed, createdAt'\n        });\n\n        // 3. Funciones para manejar tareas\n\n        // Agregar nueva tarea\n        async function addTask() {\n            const input = document.getElementById('taskInput');\n            const text = input.value.trim();\n\n            if (text === '') {\n                alert('Por favor escribe una tarea');\n                return;\n            }\n\n            try {\n                // Guardar en la base de datos\n                await db.tasks.add({\n                    text: text,\n                    completed: false,\n                    createdAt: new Date()\n                });\n\n                input.value = ''; // Limpiar el input\n                loadTasks(); // Recargar la lista\n\n            } catch (error) {\n                console.error('Error al agregar tarea:', error);\n                alert('Error al agregar la tarea');\n            }\n        }\n\n        // Cargar todas las tareas\n        async function loadTasks() {\n            try {\n                const tasks = await db.tasks.orderBy('createdAt').reverse().toArray();\n                displayTasks(tasks);\n                updateStats(tasks);\n\n            } catch (error) {\n                console.error('Error al cargar tareas:', error);\n            }\n        }\n\n        // Mostrar tareas en la p\u00e1gina\n        function displayTasks(tasks) {\n            const taskList = document.getElementById('taskList');\n            taskList.innerHTML = '';\n\n            tasks.forEach(task =&gt; {\n                const li = document.createElement('li');\n                li.className = `task-item ${task.completed ? 'completed' : ''}`;\n\n                li.innerHTML = `\n                    &lt;span class=\"task-text\"&gt;${task.text}&lt;/span&gt;\n                    &lt;div class=\"task-actions\"&gt;\n                        &lt;button class=\"complete-btn\" onclick=\"toggleTask(${task.id})\"&gt;\n                            ${task.completed ? 'Desmarcar' : 'Completar'}\n                        &lt;/button&gt;\n                        &lt;button class=\"delete-btn\" onclick=\"deleteTask(${task.id})\"&gt;\n                            Eliminar\n                        &lt;/button&gt;\n                    &lt;/div&gt;\n                `;\n\n                taskList.appendChild(li);\n            });\n        }\n\n        // Marcar/desmarcar tarea como completada\n        async function toggleTask(id) {\n            try {\n                const task = await db.tasks.get(id);\n                await db.tasks.update(id, { completed: !task.completed });\n                loadTasks();\n\n            } catch (error) {\n                console.error('Error al actualizar tarea:', error);\n            }\n        }\n\n        // Eliminar tarea\n        async function deleteTask(id) {\n            if (confirm('\u00bfEst\u00e1s seguro de que quieres eliminar esta tarea?')) {\n                try {\n                    await db.tasks.delete(id);\n                    loadTasks();\n\n                } catch (error) {\n                    console.error('Error al eliminar tarea:', error);\n                }\n            }\n        }\n\n        // Actualizar estad\u00edsticas\n        function updateStats(tasks) {\n            const total = tasks.length;\n            const completed = tasks.filter(task =&gt; task.completed).length;\n\n            document.getElementById('totalTasks').textContent = total;\n            document.getElementById('completedTasks').textContent = completed;\n        }\n\n        // Permitir agregar tarea con Enter\n        document.getElementById('taskInput').addEventListener('keypress', function(e) {\n            if (e.key === 'Enter') {\n                addTask();\n            }\n        });\n\n        // Cargar tareas al iniciar la p\u00e1gina\n        window.addEventListener('load', loadTasks);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tutorials/p6/#explicacion-del-codigo","title":"Explicaci\u00f3n del C\u00f3digo","text":""},{"location":"tutorials/p6/#1-crear-la-base-de-datos","title":"1. Crear la Base de Datos","text":"<p><pre><code>const db = new Dexie('TaskDatabase');\n</code></pre> Crea una nueva base de datos llamada \"TaskDatabase\".</p>"},{"location":"tutorials/p6/#2-definir-el-esquema","title":"2. Definir el Esquema","text":"<pre><code>db.version(1).stores({\n    tasks: '++id, text, completed, createdAt'\n});\n</code></pre> <ul> <li><code>++id</code>: ID auto-incremental (clave primaria)</li> <li><code>text</code>: Texto de la tarea</li> <li><code>completed</code>: Si est\u00e1 completada (true/false)</li> <li><code>createdAt</code>: Fecha de creaci\u00f3n</li> </ul>"},{"location":"tutorials/p6/#3-operaciones-crud","title":"3. Operaciones CRUD","text":""},{"location":"tutorials/p6/#crear-create","title":"Crear (CREATE)","text":"<pre><code>await db.tasks.add({\n    text: text,\n    completed: false,\n    createdAt: new Date()\n});\n</code></pre>"},{"location":"tutorials/p6/#leer-read","title":"Leer (READ)","text":"<pre><code>const tasks = await db.tasks.orderBy('createdAt').reverse().toArray();\n</code></pre>"},{"location":"tutorials/p6/#actualizar-update","title":"Actualizar (UPDATE)","text":"<pre><code>await db.tasks.update(id, { completed: !task.completed });\n</code></pre>"},{"location":"tutorials/p6/#eliminar-delete","title":"Eliminar (DELETE)","text":"<pre><code>await db.tasks.delete(id);\n</code></pre>"},{"location":"tutorials/p6/#pasos-para-probar","title":"Pasos para Probar","text":"<ol> <li>Crea el archivo - Guarda el c\u00f3digo como <code>index.html</code></li> <li>Abre en el navegador - Haz doble clic en el archivo</li> <li>Prueba la aplicaci\u00f3n:</li> <li>Escribe una tarea y presiona \"Agregar\"</li> <li>Marca tareas como completadas</li> <li>Elimina tareas</li> <li>Recarga la p\u00e1gina (los datos se mantienen)</li> </ol>"},{"location":"tutorials/p6/#caracteristicas-de-la-aplicacion","title":"Caracter\u00edsticas de la Aplicaci\u00f3n","text":"<ul> <li>\u2705 Agregar tareas nuevas</li> <li>\u2705 Marcar como completadas</li> <li>\u2705 Eliminar tareas</li> <li>\u2705 Persistencia - Los datos se guardan localmente</li> <li>\u2705 Estad\u00edsticas - Contador de tareas totales y completadas</li> <li>\u2705 Interfaz responsive - Se adapta a diferentes pantallas</li> </ul>"},{"location":"tutorials/p6/#conceptos-clave-de-dexiejs","title":"Conceptos Clave de Dexie.js","text":""},{"location":"tutorials/p6/#asyncawait","title":"Async/Await","text":"<p>Todas las operaciones de base de datos son as\u00edncronas: <pre><code>// \u2705 Correcto\nasync function getData() {\n    const data = await db.table.toArray();\n}\n\n// \u274c Incorrecto\nfunction getData() {\n    const data = db.table.toArray(); // Esto devuelve una Promise\n}\n</code></pre></p>"},{"location":"tutorials/p6/#metodos-principales","title":"M\u00e9todos Principales","text":"M\u00e9todo Descripci\u00f3n Ejemplo <code>add()</code> Agregar nuevo registro <code>db.tasks.add({text: 'Tarea'})</code> <code>get()</code> Obtener por ID <code>db.tasks.get(1)</code> <code>toArray()</code> Obtener todos <code>db.tasks.toArray()</code> <code>update()</code> Actualizar registro <code>db.tasks.update(1, {completed: true})</code> <code>delete()</code> Eliminar registro <code>db.tasks.delete(1)</code> <code>where()</code> Filtrar datos <code>db.tasks.where('completed').equals(true)</code>"},{"location":"tutorials/p6/#temas-clave-avanzados-de-dexiejs","title":"Temas Clave Avanzados de Dexie.js","text":""},{"location":"tutorials/p6/#1-transacciones","title":"1. Transacciones","text":"<p>Las transacciones garantizan que m\u00faltiples operaciones se ejecuten como una unidad:</p> <pre><code>// Transacci\u00f3n simple\ndb.transaction('rw', db.tasks, async () =&gt; {\n    await db.tasks.add({text: 'Tarea 1', completed: false});\n    await db.tasks.add({text: 'Tarea 2', completed: false});\n    // Si una falla, ambas se revierten\n});\n\n// Transacci\u00f3n con manejo de errores\ntry {\n    await db.transaction('rw', db.tasks, async () =&gt; {\n        const task = await db.tasks.get(1);\n        await db.tasks.update(1, {completed: !task.completed});\n        await db.tasks.add({text: 'Nueva tarea', completed: false});\n    });\n    console.log('Transacci\u00f3n exitosa');\n} catch (error) {\n    console.error('Error en transacci\u00f3n:', error);\n}\n</code></pre>"},{"location":"tutorials/p6/#2-indices-y-consultas-avanzadas","title":"2. \u00cdndices y Consultas Avanzadas","text":""},{"location":"tutorials/p6/#definir-indices","title":"Definir \u00cdndices","text":"<pre><code>db.version(1).stores({\n    tasks: '++id, text, completed, createdAt, *tags' // *tags = \u00edndice multi-valor\n});\n</code></pre>"},{"location":"tutorials/p6/#consultas-con-filtros","title":"Consultas con Filtros","text":"<pre><code>// Buscar tareas completadas\nconst completedTasks = await db.tasks\n    .where('completed')\n    .equals(true)\n    .toArray();\n\n// Buscar por rango de fechas\nconst recentTasks = await db.tasks\n    .where('createdAt')\n    .above(new Date('2024-01-01'))\n    .toArray();\n\n// Buscar con m\u00faltiples condiciones\nconst filteredTasks = await db.tasks\n    .where('completed')\n    .equals(false)\n    .and(task =&gt; task.text.includes('importante'))\n    .toArray();\n\n// Ordenar resultados\nconst sortedTasks = await db.tasks\n    .orderBy('createdAt')\n    .reverse()\n    .limit(10)\n    .toArray();\n</code></pre>"},{"location":"tutorials/p6/#3-manejo-de-errores","title":"3. Manejo de Errores","text":""},{"location":"tutorials/p6/#tipos-de-errores-comunes","title":"Tipos de Errores Comunes","text":"<pre><code>try {\n    await db.tasks.add({text: 'Nueva tarea'});\n} catch (error) {\n    if (error.name === 'ConstraintError') {\n        console.error('Violaci\u00f3n de restricci\u00f3n:', error.message);\n    } else if (error.name === 'DataError') {\n        console.error('Error de datos:', error.message);\n    } else if (error.name === 'QuotaExceededError') {\n        console.error('Espacio de almacenamiento agotado');\n    } else {\n        console.error('Error desconocido:', error);\n    }\n}\n</code></pre>"},{"location":"tutorials/p6/#validacion-de-datos","title":"Validaci\u00f3n de Datos","text":"<pre><code>// Hook para validar antes de insertar\ndb.tasks.hook('creating', function (primKey, obj, trans) {\n    if (!obj.text || obj.text.trim() === '') {\n        throw new Error('El texto de la tarea no puede estar vac\u00edo');\n    }\n    if (obj.text.length &gt; 200) {\n        throw new Error('El texto no puede exceder 200 caracteres');\n    }\n});\n</code></pre>"},{"location":"tutorials/p6/#4-versionado-de-base-de-datos","title":"4. Versionado de Base de Datos","text":"<pre><code>// Versi\u00f3n 1 - Esquema inicial\ndb.version(1).stores({\n    tasks: '++id, text, completed, createdAt'\n});\n\n// Versi\u00f3n 2 - Agregar campo priority\ndb.version(2).stores({\n    tasks: '++id, text, completed, createdAt, priority'\n}).upgrade(trans =&gt; {\n    // Migrar datos existentes\n    return trans.tasks.toCollection().modify(task =&gt; {\n        task.priority = 'medium'; // Valor por defecto\n    });\n});\n\n// Versi\u00f3n 3 - Agregar nueva tabla\ndb.version(3).stores({\n    tasks: '++id, text, completed, createdAt, priority',\n    categories: '++id, name, color'\n});\n</code></pre>"},{"location":"tutorials/p6/#5-optimizacion-de-rendimiento","title":"5. Optimizaci\u00f3n de Rendimiento","text":""},{"location":"tutorials/p6/#usar-bulk-operations","title":"Usar Bulk Operations","text":"<pre><code>// \u274c Lento - m\u00faltiples operaciones\nfor (let i = 0; i &lt; 1000; i++) {\n    await db.tasks.add({text: `Tarea ${i}`, completed: false});\n}\n\n// \u2705 R\u00e1pido - operaci\u00f3n en lote\nconst tasks = [];\nfor (let i = 0; i &lt; 1000; i++) {\n    tasks.push({text: `Tarea ${i}`, completed: false});\n}\nawait db.tasks.bulkAdd(tasks);\n</code></pre>"},{"location":"tutorials/p6/#paginacion-eficiente","title":"Paginaci\u00f3n Eficiente","text":"<pre><code>// Paginaci\u00f3n con offset/limit\nasync function getTasks(page = 1, pageSize = 20) {\n    const offset = (page - 1) * pageSize;\n\n    const tasks = await db.tasks\n        .orderBy('createdAt')\n        .reverse()\n        .offset(offset)\n        .limit(pageSize)\n        .toArray();\n\n    const total = await db.tasks.count();\n\n    return {\n        tasks,\n        total,\n        page,\n        totalPages: Math.ceil(total / pageSize)\n    };\n}\n</code></pre>"},{"location":"tutorials/p6/#6-hooks-y-eventos","title":"6. Hooks y Eventos","text":"<pre><code>// Hook antes de crear\ndb.tasks.hook('creating', function (primKey, obj, trans) {\n    obj.createdAt = new Date();\n    obj.id = undefined; // Dejar que se auto-genere\n});\n\n// Hook antes de actualizar\ndb.tasks.hook('updating', function (modifications, primKey, obj, trans) {\n    modifications.updatedAt = new Date();\n});\n\n// Hook antes de eliminar\ndb.tasks.hook('deleting', function (primKey, obj, trans) {\n    console.log(`Eliminando tarea: ${obj.text}`);\n});\n</code></pre>"},{"location":"tutorials/p6/#7-trabajo-con-multiples-tablas","title":"7. Trabajo con M\u00faltiples Tablas","text":"<pre><code>// Definir esquema con relaciones\ndb.version(1).stores({\n    categories: '++id, name, color',\n    tasks: '++id, text, completed, categoryId, createdAt'\n});\n\n// Consulta con JOIN manual\nasync function getTasksWithCategories() {\n    const tasks = await db.tasks.toArray();\n    const categories = await db.categories.toArray();\n\n    return tasks.map(task =&gt; ({\n        ...task,\n        category: categories.find(cat =&gt; cat.id === task.categoryId)\n    }));\n}\n\n// Operaci\u00f3n en m\u00faltiples tablas\nawait db.transaction('rw', [db.categories, db.tasks], async () =&gt; {\n    const categoryId = await db.categories.add({\n        name: 'Trabajo',\n        color: '#ff6b6b'\n    });\n\n    await db.tasks.add({\n        text: 'Revisar emails',\n        completed: false,\n        categoryId: categoryId\n    });\n});\n</code></pre>"},{"location":"tutorials/p6/#8-mejores-practicas","title":"8. Mejores Pr\u00e1cticas","text":""},{"location":"tutorials/p6/#buenas-practicas","title":"\u2705 Buenas Pr\u00e1cticas","text":"<pre><code>// 1. Siempre usar async/await\nasync function addTask(text) {\n    try {\n        const id = await db.tasks.add({text, completed: false});\n        return id;\n    } catch (error) {\n        console.error('Error:', error);\n        throw error;\n    }\n}\n\n// 2. Validar datos antes de guardar\nfunction validateTask(task) {\n    if (!task.text || task.text.trim() === '') {\n        throw new Error('Texto requerido');\n    }\n    return true;\n}\n\n// 3. Usar transacciones para operaciones relacionadas\nasync function moveTaskToCategory(taskId, categoryId) {\n    await db.transaction('rw', db.tasks, async () =&gt; {\n        const task = await db.tasks.get(taskId);\n        if (!task) throw new Error('Tarea no encontrada');\n\n        await db.tasks.update(taskId, {\n            categoryId: categoryId,\n            updatedAt: new Date()\n        });\n    });\n}\n</code></pre>"},{"location":"tutorials/p6/#evitar","title":"\u274c Evitar","text":"<pre><code>// No usar callbacks anidados\ndb.tasks.toArray().then(tasks =&gt; {\n    db.categories.toArray().then(categories =&gt; {\n        // Callback hell\n    });\n});\n\n// No hacer m\u00faltiples consultas en bucles\nfor (const task of tasks) {\n    const category = await db.categories.get(task.categoryId); // \u274c Lento\n}\n</code></pre>"},{"location":"tutorials/p6/#ventajas-de-indexeddb-con-dexiejs","title":"Ventajas de IndexedDB con Dexie.js","text":"<ul> <li>\ud83d\udcf1 Funciona offline - No necesita internet</li> <li>\ud83d\udcbe Almacenamiento grande - Hasta varios GB de datos</li> <li>\u26a1 R\u00e1pido - Acceso instant\u00e1neo</li> <li>\ud83d\udd12 Seguro - Los datos solo est\u00e1n en el navegador del usuario</li> <li>\ud83c\udf10 Compatible - Funciona en todos los navegadores modernos</li> </ul>"},{"location":"tutorials/p7/","title":"Tutorial: M\u00f3dulo JavaScript Gen\u00e9rico para Consumir APIs","text":""},{"location":"tutorials/p7/#que-es-un-modulo-reutilizable","title":"\u00bfQu\u00e9 es un M\u00f3dulo Reutilizable?","text":"<p>Un m\u00f3dulo reutilizable es un conjunto de funciones que puedes usar en diferentes proyectos sin tener que escribir el mismo c\u00f3digo una y otra vez. En este tutorial crearemos un m\u00f3dulo para consumir APIs de forma f\u00e1cil y consistente.</p>"},{"location":"tutorials/p7/#por-que-crear-un-modulo-para-apis","title":"\u00bfPor qu\u00e9 crear un m\u00f3dulo para APIs?","text":"<ul> <li>\u2705 Reutilizable - \u00dasalo en cualquier proyecto</li> <li>\u2705 Consistente - Mismo comportamiento siempre</li> <li>\u2705 F\u00e1cil mantenimiento - Cambios en un solo lugar</li> <li>\u2705 Menos errores - C\u00f3digo probado y confiable</li> <li>\u2705 M\u00e1s r\u00e1pido - No reescribir c\u00f3digo</li> </ul>"},{"location":"tutorials/p7/#el-modulo-api-basico","title":"El M\u00f3dulo API B\u00e1sico","text":""},{"location":"tutorials/p7/#archivo-api-clientjs","title":"Archivo: <code>api-client.js</code>","text":"<pre><code>/**\n * M\u00f3dulo gen\u00e9rico para consumir APIs\n * Versi\u00f3n b\u00e1sica y f\u00e1cil de entender\n */\n\nclass ApiClient {\n    constructor(baseURL = '') {\n        this.baseURL = baseURL;\n        this.defaultHeaders = {\n            'Content-Type': 'application/json'\n        };\n    }\n\n    /**\n     * M\u00e9todo privado para hacer peticiones HTTP\n     */\n    async _request(endpoint, options = {}) {\n        try {\n            // Construir la URL completa\n            const url = this.baseURL + endpoint;\n\n            // Configurar opciones por defecto\n            const config = {\n                headers: { ...this.defaultHeaders, ...options.headers },\n                ...options\n            };\n\n            // Hacer la petici\u00f3n\n            const response = await fetch(url, config);\n\n            // Verificar si la respuesta es exitosa\n            if (!response.ok) {\n                throw new Error(`Error ${response.status}: ${response.statusText}`);\n            }\n\n            // Intentar parsear como JSON\n            const data = await response.json();\n            return data;\n\n        } catch (error) {\n            console.error('Error en petici\u00f3n API:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * GET - Obtener datos\n     */\n    async get(endpoint, headers = {}) {\n        return this._request(endpoint, {\n            method: 'GET',\n            headers\n        });\n    }\n\n    /**\n     * POST - Crear datos\n     */\n    async post(endpoint, data = {}, headers = {}) {\n        return this._request(endpoint, {\n            method: 'POST',\n            headers,\n            body: JSON.stringify(data)\n        });\n    }\n\n    /**\n     * PUT - Actualizar datos completos\n     */\n    async put(endpoint, data = {}, headers = {}) {\n        return this._request(endpoint, {\n            method: 'PUT',\n            headers,\n            body: JSON.stringify(data)\n        });\n    }\n\n    /**\n     * PATCH - Actualizar datos parciales\n     */\n    async patch(endpoint, data = {}, headers = {}) {\n        return this._request(endpoint, {\n            method: 'PATCH',\n            headers,\n            body: JSON.stringify(data)\n        });\n    }\n\n    /**\n     * DELETE - Eliminar datos\n     */\n    async delete(endpoint, headers = {}) {\n        return this._request(endpoint, {\n            method: 'DELETE',\n            headers\n        });\n    }\n\n    /**\n     * Configurar headers por defecto\n     */\n    setDefaultHeaders(headers) {\n        this.defaultHeaders = { ...this.defaultHeaders, ...headers };\n    }\n\n    /**\n     * Configurar token de autorizaci\u00f3n\n     */\n    setAuthToken(token) {\n        this.setDefaultHeaders({\n            'Authorization': `Bearer ${token}`\n        });\n    }\n}\n\n// Exportar para usar en otros archivos\n// Para navegador (sin m\u00f3dulos ES6)\nif (typeof window !== 'undefined') {\n    window.ApiClient = ApiClient;\n}\n\n// Para Node.js o m\u00f3dulos ES6\nif (typeof module !== 'undefined' &amp;&amp; module.exports) {\n    module.exports = ApiClient;\n}\n</code></pre>"},{"location":"tutorials/p7/#ejemplo-practico-completo","title":"Ejemplo Pr\u00e1ctico Completo","text":""},{"location":"tutorials/p7/#archivo-indexhtml","title":"Archivo: <code>index.html</code>","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;M\u00f3dulo API - Ejemplo Pr\u00e1ctico&lt;/title&gt;\n    &lt;style&gt;\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }\n\n        .container {\n            background: white;\n            padding: 30px;\n            border-radius: 10px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n\n        h1 {\n            color: #333;\n            text-align: center;\n            margin-bottom: 30px;\n        }\n\n        .section {\n            margin-bottom: 30px;\n            padding: 20px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n        }\n\n        .section h3 {\n            color: #007bff;\n            margin-bottom: 15px;\n        }\n\n        button {\n            background: #007bff;\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 5px;\n            cursor: pointer;\n            margin: 5px;\n        }\n\n        button:hover {\n            background: #0056b3;\n        }\n\n        .delete-btn {\n            background: #dc3545;\n        }\n\n        .delete-btn:hover {\n            background: #c82333;\n        }\n\n        .update-btn {\n            background: #28a745;\n        }\n\n        .update-btn:hover {\n            background: #218838;\n        }\n\n        .result {\n            background: #f8f9fa;\n            border: 1px solid #dee2e6;\n            border-radius: 5px;\n            padding: 15px;\n            margin-top: 15px;\n            white-space: pre-wrap;\n            font-family: monospace;\n            max-height: 200px;\n            overflow-y: auto;\n        }\n\n        .form-group {\n            margin-bottom: 15px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 5px;\n            font-weight: bold;\n        }\n\n        input, textarea {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n\n        textarea {\n            height: 80px;\n            resize: vertical;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;\ud83d\ude80 M\u00f3dulo API en Acci\u00f3n&lt;/h1&gt;\n\n        &lt;!-- Secci\u00f3n GET --&gt;\n        &lt;div class=\"section\"&gt;\n            &lt;h3&gt;\ud83d\udce5 GET - Obtener Datos&lt;/h3&gt;\n            &lt;button onclick=\"getUsers()\"&gt;Obtener Usuarios&lt;/button&gt;\n            &lt;button onclick=\"getUser('3db6ebe4-43c7-4a3d-802a-5ab44814c369')\"&gt;Obtener Usuario Espec\u00edfico&lt;/button&gt;\n            &lt;div id=\"getResult\" class=\"result\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Secci\u00f3n POST --&gt;\n        &lt;div class=\"section\"&gt;\n            &lt;h3&gt;\ud83d\udce4 POST - Crear Datos&lt;/h3&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;label&gt;Nombre del Usuario:&lt;/label&gt;\n                &lt;input type=\"text\" id=\"userName\" placeholder=\"Nombre completo...\"&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;label&gt;Email:&lt;/label&gt;\n                &lt;input type=\"email\" id=\"userEmail\" placeholder=\"usuario@ejemplo.com\"&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;label&gt;Username:&lt;/label&gt;\n                &lt;input type=\"text\" id=\"userUsername\" placeholder=\"nombre_usuario\"&gt;\n            &lt;/div&gt;\n            &lt;button onclick=\"createUser()\"&gt;Crear Usuario&lt;/button&gt;\n            &lt;div id=\"postResult\" class=\"result\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Secci\u00f3n PUT/PATCH --&gt;\n        &lt;div class=\"section\"&gt;\n            &lt;h3&gt;\u270f\ufe0f PUT/PATCH - Actualizar Datos&lt;/h3&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;label&gt;ID del Usuario a actualizar:&lt;/label&gt;\n                &lt;input type=\"text\" id=\"updateId\" value=\"3db6ebe4-43c7-4a3d-802a-5ab44814c369\" placeholder=\"ID del usuario\"&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;label&gt;Nuevo nombre:&lt;/label&gt;\n                &lt;input type=\"text\" id=\"updateName\" placeholder=\"Nuevo nombre...\"&gt;\n            &lt;/div&gt;\n            &lt;button class=\"update-btn\" onclick=\"updateUser()\"&gt;Actualizar Usuario (PUT)&lt;/button&gt;\n            &lt;button class=\"update-btn\" onclick=\"patchUser()\"&gt;Actualizar Parcial (PATCH)&lt;/button&gt;\n            &lt;div id=\"updateResult\" class=\"result\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Secci\u00f3n DELETE --&gt;\n        &lt;div class=\"section\"&gt;\n            &lt;h3&gt;\ud83d\uddd1\ufe0f DELETE - Eliminar Datos&lt;/h3&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;label&gt;ID del Usuario a eliminar:&lt;/label&gt;\n                &lt;input type=\"text\" id=\"deleteId\" value=\"3db6ebe4-43c7-4a3d-802a-5ab44814c369\" placeholder=\"ID del usuario\"&gt;\n            &lt;/div&gt;\n            &lt;button class=\"delete-btn\" onclick=\"deleteUser()\"&gt;Eliminar Usuario&lt;/button&gt;\n            &lt;div id=\"deleteResult\" class=\"result\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Incluir nuestro m\u00f3dulo --&gt;\n    &lt;script src=\"api-client.js\"&gt;&lt;/script&gt;\n\n    &lt;script&gt;\n        // Crear una instancia del cliente API\nconst api = new ApiClient('https://playground.mockoon.com');\n\n        // Funci\u00f3n para mostrar resultados\n        function showResult(elementId, data) {\n            const element = document.getElementById(elementId);\n            element.textContent = JSON.stringify(data, null, 2);\n        }\n\n        // Funci\u00f3n para mostrar errores\n        function showError(elementId, error) {\n            const element = document.getElementById(elementId);\n            element.textContent = `\u274c Error: ${error.message}`;\n            element.style.color = 'red';\n        }\n\n        // GET - Obtener usuarios\n        async function getUsers() {\n            try {\n                const users = await api.get('/users');\n                showResult('getResult', users);\n            } catch (error) {\n                showError('getResult', error);\n            }\n        }\n\n        // GET - Obtener un usuario espec\u00edfico\n        async function getUser(id) {\n            try {\n                const user = await api.get(`/users/${id}`);\n                showResult('getResult', user);\n            } catch (error) {\n                showError('getResult', error);\n            }\n        }\n\n        // POST - Crear nuevo usuario\n        async function createUser() {\n            const name = document.getElementById('userName').value;\n            const email = document.getElementById('userEmail').value;\n            const username = document.getElementById('userUsername').value;\n\n            if (!name || !email || !username) {\n                showError('postResult', new Error('Nombre, email y username son requeridos'));\n                return;\n            }\n\n            try {\n                const newUser = await api.post('/users', {\n                    name: name,\n                    email: email,\n                    username: username,\n                    phone: \"555-0123\",\n                    address: {\n                        street: \"123 Main St\",\n                        city: \"Anytown\",\n                        state: \"State\",\n                        zip: \"12345\"\n                    },\n                    isActive: true\n                });\n                showResult('postResult', newUser);\n\n                // Limpiar formulario\n                document.getElementById('userName').value = '';\n                document.getElementById('userEmail').value = '';\n                document.getElementById('userUsername').value = '';\n            } catch (error) {\n                showError('postResult', error);\n            }\n        }\n\n        // PUT - Actualizar usuario completo\n        async function updateUser() {\n            const id = document.getElementById('updateId').value;\n            const name = document.getElementById('updateName').value;\n\n            if (!name) {\n                showError('updateResult', new Error('El nombre es requerido'));\n                return;\n            }\n\n            try {\n                const updatedUser = await api.put(`/users/${id}`, {\n                    id: id,\n                    name: name,\n                    username: name.toLowerCase().replace(' ', '.'),\n                    email: `${name.toLowerCase().replace(' ', '.')}@example.com`,\n                    phone: \"555-0123\",\n                    address: {\n                        street: \"123 Updated St\",\n                        city: \"Updated City\",\n                        state: \"Updated State\",\n                        zip: \"54321\"\n                    },\n                    isActive: true\n                });\n                showResult('updateResult', updatedUser);\n            } catch (error) {\n                showError('updateResult', error);\n            }\n        }\n\n        // PATCH - Actualizar usuario parcial\n        async function patchUser() {\n            const id = document.getElementById('updateId').value;\n            const name = document.getElementById('updateName').value;\n\n            if (!name) {\n                showError('updateResult', new Error('El nombre es requerido'));\n                return;\n            }\n\n            try {\n                const patchedUser = await api.patch(`/users/${id}`, {\n                    name: name\n                });\n                showResult('updateResult', patchedUser);\n            } catch (error) {\n                showError('updateResult', error);\n            }\n        }\n\n        // DELETE - Eliminar usuario\n        async function deleteUser() {\n            const id = document.getElementById('deleteId').value;\n\n            try {\n                const result = await api.delete(`/users/${id}`);\n                showResult('deleteResult', result);\n            } catch (error) {\n                showError('deleteResult', error);\n            }\n        }\n\n        // Ejemplo de configurar headers personalizados\n        function setupCustomHeaders() {\n            // Configurar headers por defecto\n            api.setDefaultHeaders({\n                'X-Custom-Header': 'Mi-Aplicacion',\n                'X-Version': '1.0'\n            });\n\n            // Configurar token de autorizaci\u00f3n (ejemplo)\n            // api.setAuthToken('tu-token-aqui');\n        }\n\n        // Configurar headers al cargar la p\u00e1gina\n        setupCustomHeaders();\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tutorials/p7/#segundo-ejemplo-frontend-moderno-con-tailwindcss","title":"Segundo Ejemplo: Frontend Moderno con TailwindCSS","text":"<p>Aqu\u00ed tienes un ejemplo m\u00e1s elaborado usando TailwindCSS para un dise\u00f1o moderno y responsivo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;\ud83d\ude80 API Client - Dise\u00f1o Moderno&lt;/title&gt;\n    &lt;script src=\"https://cdn.tailwindcss.com\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        tailwind.config = {\n            theme: {\n                extend: {\n                    colors: {\n                        primary: '#3b82f6',\n                        secondary: '#1e40af',\n                        success: '#10b981',\n                        danger: '#ef4444',\n                        warning: '#f59e0b'\n                    }\n                }\n            }\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body class=\"bg-gray-50 min-h-screen\"&gt;\n    &lt;div class=\"container mx-auto px-4 py-8 max-w-6xl\"&gt;\n        &lt;!-- Header --&gt;\n        &lt;div class=\"text-center mb-12\"&gt;\n            &lt;h1 class=\"text-4xl font-bold text-gray-800 mb-4\"&gt;\ud83d\ude80 API Client Moderno&lt;/h1&gt;\n            &lt;p class=\"text-gray-600 text-lg\"&gt;Gesti\u00f3n de usuarios con dise\u00f1o responsivo&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Grid Layout --&gt;\n        &lt;div class=\"grid grid-cols-1 lg:grid-cols-2 gap-8\"&gt;\n\n            &lt;!-- Secci\u00f3n GET --&gt;\n            &lt;div class=\"bg-white rounded-xl shadow-lg p-6 border border-gray-200\"&gt;\n                &lt;div class=\"flex items-center mb-6\"&gt;\n                    &lt;div class=\"bg-blue-100 p-3 rounded-lg mr-4\"&gt;\n                        &lt;svg class=\"w-6 h-6 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"&gt;\n                            &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"&gt;&lt;/path&gt;\n                        &lt;/svg&gt;\n                    &lt;/div&gt;\n                    &lt;h3 class=\"text-xl font-semibold text-gray-800\"&gt;\ud83d\udce5 Obtener Datos&lt;/h3&gt;\n                &lt;/div&gt;\n\n                &lt;div class=\"space-y-3 mb-6\"&gt;\n                    &lt;button onclick=\"getAllUsers()\" class=\"w-full bg-primary hover:bg-secondary text-white font-medium py-3 px-4 rounded-lg transition duration-200 transform hover:scale-105\"&gt;\n                        Obtener Todos los Usuarios\n                    &lt;/button&gt;\n                    &lt;button onclick=\"getSpecificUser()\" class=\"w-full bg-indigo-500 hover:bg-indigo-600 text-white font-medium py-3 px-4 rounded-lg transition duration-200 transform hover:scale-105\"&gt;\n                        Obtener Usuario Espec\u00edfico\n                    &lt;/button&gt;\n                &lt;/div&gt;\n\n                &lt;div id=\"getResultModern\" class=\"bg-gray-50 border border-gray-200 rounded-lg p-4 min-h-[200px] overflow-auto font-mono text-sm\"&gt;&lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;!-- Secci\u00f3n POST --&gt;\n            &lt;div class=\"bg-white rounded-xl shadow-lg p-6 border border-gray-200\"&gt;\n                &lt;div class=\"flex items-center mb-6\"&gt;\n                    &lt;div class=\"bg-green-100 p-3 rounded-lg mr-4\"&gt;\n                        &lt;svg class=\"w-6 h-6 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"&gt;\n                            &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"&gt;&lt;/path&gt;\n                        &lt;/svg&gt;\n                    &lt;/div&gt;\n                    &lt;h3 class=\"text-xl font-semibold text-gray-800\"&gt;\ud83d\udce4 Crear Usuario&lt;/h3&gt;\n                &lt;/div&gt;\n\n                &lt;form class=\"space-y-4 mb-6\"&gt;\n                    &lt;div&gt;\n                        &lt;label class=\"block text-sm font-medium text-gray-700 mb-2\"&gt;Nombre Completo&lt;/label&gt;\n                        &lt;input type=\"text\" id=\"modernUserName\" placeholder=\"Ej: Sean Kris\" \n                               class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition duration-200\"&gt;\n                    &lt;/div&gt;\n                    &lt;div&gt;\n                        &lt;label class=\"block text-sm font-medium text-gray-700 mb-2\"&gt;Email&lt;/label&gt;\n                        &lt;input type=\"email\" id=\"modernUserEmail\" placeholder=\"usuario@ejemplo.com\" \n                               class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition duration-200\"&gt;\n                    &lt;/div&gt;\n                    &lt;div&gt;\n                        &lt;label class=\"block text-sm font-medium text-gray-700 mb-2\"&gt;Tel\u00e9fono&lt;/label&gt;\n                        &lt;input type=\"tel\" id=\"modernUserPhone\" placeholder=\"271-410-4874 x85762\" \n                               class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition duration-200\"&gt;\n                    &lt;/div&gt;\n                    &lt;div&gt;\n                        &lt;label class=\"block text-sm font-medium text-gray-700 mb-2\"&gt;Direcci\u00f3n&lt;/label&gt;\n                        &lt;input type=\"text\" id=\"modernUserAddress\" placeholder=\"623 Jailyn Village, Pasadena, IA 54138\" \n                               class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition duration-200\"&gt;\n                    &lt;/div&gt;\n                    &lt;div&gt;\n                        &lt;label class=\"block text-sm font-medium text-gray-700 mb-2\"&gt;Fecha de Nacimiento&lt;/label&gt;\n                        &lt;input type=\"date\" id=\"modernUserBirthdate\" value=\"2005-07-26\" \n                               class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition duration-200\"&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"flex items-center\"&gt;\n                        &lt;input type=\"checkbox\" id=\"modernUserActive\" checked \n                               class=\"w-4 h-4 text-primary bg-gray-100 border-gray-300 rounded focus:ring-primary focus:ring-2\"&gt;\n                        &lt;label for=\"modernUserActive\" class=\"ml-2 text-sm font-medium text-gray-700\"&gt;Usuario Activo&lt;/label&gt;\n                    &lt;/div&gt;\n                &lt;/form&gt;\n\n                &lt;button onclick=\"createModernUser()\" class=\"w-full bg-success hover:bg-green-600 text-white font-medium py-3 px-4 rounded-lg transition duration-200 transform hover:scale-105\"&gt;\n                    Crear Usuario\n                &lt;/button&gt;\n\n                &lt;div id=\"postResultModern\" class=\"bg-gray-50 border border-gray-200 rounded-lg p-4 mt-6 min-h-[100px] overflow-auto font-mono text-sm\"&gt;&lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;!-- Secci\u00f3n UPDATE --&gt;\n            &lt;div class=\"bg-white rounded-xl shadow-lg p-6 border border-gray-200\"&gt;\n                &lt;div class=\"flex items-center mb-6\"&gt;\n                    &lt;div class=\"bg-yellow-100 p-3 rounded-lg mr-4\"&gt;\n                        &lt;svg class=\"w-6 h-6 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"&gt;\n                            &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"&gt;&lt;/path&gt;\n                        &lt;/svg&gt;\n                    &lt;/div&gt;\n                    &lt;h3 class=\"text-xl font-semibold text-gray-800\"&gt;\u270f\ufe0f Actualizar Usuario&lt;/h3&gt;\n                &lt;/div&gt;\n\n                &lt;div class=\"space-y-4 mb-6\"&gt;\n                    &lt;div&gt;\n                        &lt;label class=\"block text-sm font-medium text-gray-700 mb-2\"&gt;ID del Usuario&lt;/label&gt;\n                        &lt;input type=\"text\" id=\"modernUpdateId\" value=\"dabf8912-0eb2-4648-98df-7d113a15bbfc\" \n                               class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition duration-200\"&gt;\n                    &lt;/div&gt;\n                    &lt;div&gt;\n                        &lt;label class=\"block text-sm font-medium text-gray-700 mb-2\"&gt;Nuevo Nombre&lt;/label&gt;\n                        &lt;input type=\"text\" id=\"modernUpdateName\" placeholder=\"Nuevo nombre...\" \n                               class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition duration-200\"&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n\n                &lt;div class=\"grid grid-cols-1 sm:grid-cols-2 gap-3 mb-6\"&gt;\n                    &lt;button onclick=\"updateModernUser()\" class=\"bg-warning hover:bg-yellow-500 text-white font-medium py-3 px-4 rounded-lg transition duration-200 transform hover:scale-105\"&gt;\n                        Actualizar (PUT)\n                    &lt;/button&gt;\n                    &lt;button onclick=\"patchModernUser()\" class=\"bg-orange-500 hover:bg-orange-600 text-white font-medium py-3 px-4 rounded-lg transition duration-200 transform hover:scale-105\"&gt;\n                        Parcial (PATCH)\n                    &lt;/button&gt;\n                &lt;/div&gt;\n\n                &lt;div id=\"updateResultModern\" class=\"bg-gray-50 border border-gray-200 rounded-lg p-4 min-h-[100px] overflow-auto font-mono text-sm\"&gt;&lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;!-- Secci\u00f3n DELETE --&gt;\n            &lt;div class=\"bg-white rounded-xl shadow-lg p-6 border border-gray-200\"&gt;\n                &lt;div class=\"flex items-center mb-6\"&gt;\n                    &lt;div class=\"bg-red-100 p-3 rounded-lg mr-4\"&gt;\n                        &lt;svg class=\"w-6 h-6 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"&gt;\n                            &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"&gt;&lt;/path&gt;\n                        &lt;/svg&gt;\n                    &lt;/div&gt;\n                    &lt;h3 class=\"text-xl font-semibold text-gray-800\"&gt;\ud83d\uddd1\ufe0f Eliminar Usuario&lt;/h3&gt;\n                &lt;/div&gt;\n\n                &lt;div class=\"mb-6\"&gt;\n                    &lt;label class=\"block text-sm font-medium text-gray-700 mb-2\"&gt;ID del Usuario a Eliminar&lt;/label&gt;\n                    &lt;input type=\"text\" id=\"modernDeleteId\" value=\"dabf8912-0eb2-4648-98df-7d113a15bbfc\" \n                           class=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition duration-200\"&gt;\n                &lt;/div&gt;\n\n                &lt;button onclick=\"deleteModernUser()\" class=\"w-full bg-danger hover:bg-red-600 text-white font-medium py-3 px-4 rounded-lg transition duration-200 transform hover:scale-105\"&gt;\n                    Eliminar Usuario\n                &lt;/button&gt;\n\n                &lt;div id=\"deleteResultModern\" class=\"bg-gray-50 border border-gray-200 rounded-lg p-4 mt-6 min-h-[100px] overflow-auto font-mono text-sm\"&gt;&lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Status Bar --&gt;\n        &lt;div class=\"mt-8 bg-white rounded-xl shadow-lg p-4 border border-gray-200\"&gt;\n            &lt;div class=\"flex items-center justify-between\"&gt;\n                &lt;div class=\"flex items-center\"&gt;\n                    &lt;div class=\"w-3 h-3 bg-green-400 rounded-full mr-2 animate-pulse\"&gt;&lt;/div&gt;\n                    &lt;span class=\"text-sm text-gray-600\"&gt;API Status: Conectado a Mockoon Playground&lt;/span&gt;\n                &lt;/div&gt;\n                &lt;div class=\"text-sm text-gray-500\"&gt;\n                    Endpoint: https://playground.mockoon.com/users\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Incluir nuestro m\u00f3dulo --&gt;\n    &lt;script src=\"api-client.js\"&gt;&lt;/script&gt;\n\n    &lt;script&gt;\n        // Crear una instancia del cliente API\n        const modernApi = new ApiClient('https://playground.mockoon.com');\n\n        // Funci\u00f3n para mostrar resultados con mejor formato\n        function showModernResult(elementId, data) {\n            const element = document.getElementById(elementId);\n            element.innerHTML = `&lt;div class=\"text-green-600 font-semibold mb-2\"&gt;\u2705 \u00c9xito:&lt;/div&gt;&lt;pre class=\"text-gray-800\"&gt;${JSON.stringify(data, null, 2)}&lt;/pre&gt;`;\n            element.className = element.className.replace('border-gray-200', 'border-green-200 bg-green-50');\n        }\n\n        // Funci\u00f3n para mostrar errores con mejor formato\n        function showModernError(elementId, error) {\n            const element = document.getElementById(elementId);\n            element.innerHTML = `&lt;div class=\"text-red-600 font-semibold mb-2\"&gt;\u274c Error:&lt;/div&gt;&lt;pre class=\"text-red-800\"&gt;${error.message}&lt;/pre&gt;`;\n            element.className = element.className.replace('border-gray-200', 'border-red-200 bg-red-50');\n        }\n\n        // GET - Obtener todos los usuarios\n        async function getAllUsers() {\n            try {\n                const users = await modernApi.get('/users');\n                showModernResult('getResultModern', users);\n            } catch (error) {\n                showModernError('getResultModern', error);\n            }\n        }\n\n        // GET - Obtener usuario espec\u00edfico\n        async function getSpecificUser() {\n            try {\n                const user = await modernApi.get('/users/dabf8912-0eb2-4648-98df-7d113a15bbfc');\n                showModernResult('getResultModern', user);\n            } catch (error) {\n                showModernError('getResultModern', error);\n            }\n        }\n\n        // POST - Crear nuevo usuario con modelo simplificado\n        async function createModernUser() {\n            const name = document.getElementById('modernUserName').value;\n            const email = document.getElementById('modernUserEmail').value;\n            const phone = document.getElementById('modernUserPhone').value;\n            const address = document.getElementById('modernUserAddress').value;\n            const birthdate = document.getElementById('modernUserBirthdate').value;\n            const isActive = document.getElementById('modernUserActive').checked;\n\n            if (!name || !email) {\n                showModernError('postResultModern', new Error('Nombre y email son requeridos'));\n                return;\n            }\n\n            try {\n                const newUser = await modernApi.post('/users', {\n                    id: crypto.randomUUID(), // Generar ID \u00fanico\n                    name: name,\n                    email: email,\n                    phone: phone || \"555-0123\",\n                    address: address || \"Direcci\u00f3n no especificada\",\n                    birthdate: birthdate,\n                    isActive: isActive\n                });\n                showModernResult('postResultModern', newUser);\n\n                // Limpiar formulario\n                document.getElementById('modernUserName').value = '';\n                document.getElementById('modernUserEmail').value = '';\n                document.getElementById('modernUserPhone').value = '';\n                document.getElementById('modernUserAddress').value = '';\n                document.getElementById('modernUserBirthdate').value = '2005-07-26';\n                document.getElementById('modernUserActive').checked = true;\n            } catch (error) {\n                showModernError('postResultModern', error);\n            }\n        }\n\n        // PUT - Actualizar usuario completo\n        async function updateModernUser() {\n            const id = document.getElementById('modernUpdateId').value;\n            const name = document.getElementById('modernUpdateName').value;\n\n            if (!name) {\n                showModernError('updateResultModern', new Error('El nombre es requerido'));\n                return;\n            }\n\n            try {\n                const updatedUser = await modernApi.put(`/users/${id}`, {\n                    id: id,\n                    name: name,\n                    email: `${name.toLowerCase().replace(' ', '.')}@ejemplo.com`,\n                    phone: \"555-0123\",\n                    address: \"Direcci\u00f3n actualizada\",\n                    birthdate: \"2005-07-26\",\n                    isActive: true\n                });\n                showModernResult('updateResultModern', updatedUser);\n            } catch (error) {\n                showModernError('updateResultModern', error);\n            }\n        }\n\n        // PATCH - Actualizar usuario parcial\n        async function patchModernUser() {\n            const id = document.getElementById('modernUpdateId').value;\n            const name = document.getElementById('modernUpdateName').value;\n\n            if (!name) {\n                showModernError('updateResultModern', new Error('El nombre es requerido'));\n                return;\n            }\n\n            try {\n                const patchedUser = await modernApi.patch(`/users/${id}`, {\n                    name: name\n                });\n                showModernResult('updateResultModern', patchedUser);\n            } catch (error) {\n                showModernError('updateResultModern', error);\n            }\n        }\n\n        // DELETE - Eliminar usuario\n        async function deleteModernUser() {\n            const id = document.getElementById('modernDeleteId').value;\n\n            try {\n                const result = await modernApi.delete(`/users/${id}`);\n                showModernResult('deleteResultModern', result);\n            } catch (error) {\n                showModernError('deleteResultModern', error);\n            }\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tutorials/p7/#explicacion-del-codigo","title":"Explicaci\u00f3n del C\u00f3digo","text":""},{"location":"tutorials/p7/#1-estructura-del-modulo","title":"1. Estructura del M\u00f3dulo","text":"<pre><code>class ApiClient {\n    constructor(baseURL = '') {\n        this.baseURL = baseURL;           // URL base de la API\n        this.defaultHeaders = { ... };    // Headers por defecto\n    }\n}\n</code></pre>"},{"location":"tutorials/p7/#2-metodo-privado-_request","title":"2. M\u00e9todo Privado <code>_request</code>","text":"<pre><code>async _request(endpoint, options = {}) {\n    // 1. Construir URL completa\n    // 2. Configurar opciones\n    // 3. Hacer petici\u00f3n con fetch\n    // 4. Verificar respuesta\n    // 5. Parsear JSON\n    // 6. Manejar errores\n}\n</code></pre>"},{"location":"tutorials/p7/#3-metodos-publicos","title":"3. M\u00e9todos P\u00fablicos","text":"M\u00e9todo Prop\u00f3sito Ejemplo <code>get()</code> Obtener datos <code>api.get('/users')</code> <code>post()</code> Crear datos <code>api.post('/users', data)</code> <code>put()</code> Actualizar completo <code>api.put('/users/id', data)</code> <code>patch()</code> Actualizar parcial <code>api.patch('/users/id', data)</code> <code>delete()</code> Eliminar datos <code>api.delete('/users/id')</code>"},{"location":"tutorials/p7/#como-usar-el-modulo","title":"C\u00f3mo Usar el M\u00f3dulo","text":""},{"location":"tutorials/p7/#1-crear-instancia","title":"1. Crear Instancia","text":"<pre><code>// API sin URL base\nconst api = new ApiClient();\n\n// API con URL base\nconst api = new ApiClient('https://api.ejemplo.com');\n</code></pre>"},{"location":"tutorials/p7/#2-hacer-peticiones","title":"2. Hacer Peticiones","text":"<pre><code>// GET simple\nconst usuarios = await api.get('/usuarios');\n\n// POST con datos\nconst nuevoUsuario = await api.post('/usuarios', {\n    nombre: 'Juan',\n    email: 'juan@email.com'\n});\n\n// PUT para actualizar\nconst usuarioActualizado = await api.put('/usuarios/1', {\n    nombre: 'Juan Carlos',\n    email: 'juan.carlos@email.com'\n});\n\n// DELETE para eliminar\nawait api.delete('/usuarios/1');\n</code></pre>"},{"location":"tutorials/p7/#3-configurar-headers","title":"3. Configurar Headers","text":"<pre><code>// Headers por defecto\napi.setDefaultHeaders({\n    'X-API-Key': 'tu-api-key',\n    'X-Version': '1.0'\n});\n\n// Token de autorizaci\u00f3n\napi.setAuthToken('tu-jwt-token');\n</code></pre>"},{"location":"tutorials/p7/#manejo-de-errores","title":"Manejo de Errores","text":""},{"location":"tutorials/p7/#tipos-de-errores","title":"Tipos de Errores","text":"<pre><code>try {\n    const data = await api.get('/endpoint');\n} catch (error) {\n    if (error.message.includes('404')) {\n        console.log('Recurso no encontrado');\n    } else if (error.message.includes('500')) {\n        console.log('Error del servidor');\n    } else {\n        console.log('Error de red o conexi\u00f3n');\n    }\n}\n</code></pre>"},{"location":"tutorials/p7/#validacion-de-datos","title":"Validaci\u00f3n de Datos","text":"<pre><code>async function crearUsuario(datos) {\n    // Validar antes de enviar\n    if (!datos.nombre || !datos.email) {\n        throw new Error('Nombre y email son requeridos');\n    }\n\n    try {\n        return await api.post('/usuarios', datos);\n    } catch (error) {\n        console.error('Error al crear usuario:', error);\n        throw error;\n    }\n}\n</code></pre>"},{"location":"tutorials/p7/#pasos-para-probar","title":"Pasos para Probar","text":"<ol> <li>Crear los archivos - Guarda <code>api-client.js</code> e <code>index.html</code></li> <li>Abrir en navegador - Haz doble clic en <code>index.html</code></li> <li>Probar funciones:</li> <li>Obtener usuarios</li> <li>Crear nuevos usuarios</li> <li>Actualizar usuarios existentes</li> <li>Eliminar usuarios</li> </ol>"},{"location":"tutorials/p7/#ventajas-del-modulo","title":"Ventajas del M\u00f3dulo","text":"<ul> <li>\u2705 Reutilizable - \u00dasalo en cualquier proyecto</li> <li>\u2705 Consistente - Mismo comportamiento siempre</li> <li>\u2705 Manejo de errores - Centralizado y consistente</li> <li>\u2705 Configuraci\u00f3n flexible - Headers y tokens personalizables</li> <li>\u2705 F\u00e1cil de usar - API simple y clara</li> </ul>"},{"location":"tutorials/p7/#casos-de-uso-reales","title":"Casos de Uso Reales","text":""},{"location":"tutorials/p7/#api-de-e-commerce","title":"API de E-commerce","text":"<pre><code>const tiendaAPI = new ApiClient('https://api.mitienda.com');\n\n// Obtener productos\nconst productos = await tiendaAPI.get('/productos');\n\n// Agregar al carrito\nconst carrito = await tiendaAPI.post('/carrito', {\n    productoId: 123,\n    cantidad: 2\n});\n</code></pre>"},{"location":"tutorials/p7/#api-de-usuarios","title":"API de Usuarios","text":"<pre><code>const usuariosAPI = new ApiClient('https://api.usuarios.com');\nusuariosAPI.setAuthToken('jwt-token');\n\n// Perfil del usuario\nconst perfil = await usuariosAPI.get('/perfil');\n\n// Actualizar perfil\nawait usuariosAPI.patch('/perfil', {\n    nombre: 'Nuevo Nombre'\n});\n</code></pre>"},{"location":"tutorials/p8/","title":"Tutorial Completo sobre Local Storage, Session Storage y Cookies en JavaScript","text":""},{"location":"tutorials/p8/#introduccion","title":"Introducci\u00f3n","text":"<p>El almacenamiento en el navegador permite a las aplicaciones web guardar datos en el lado del cliente, mejorando la experiencia del usuario al persistir informaci\u00f3n como preferencias, estados de la aplicaci\u00f3n o datos temporales. Este tutorial explora en detalle tres tecnolog\u00edas principales de almacenamiento en el navegador: Local Storage, Session Storage y Cookies. Cada una tiene caracter\u00edsticas \u00fanicas, casos de uso espec\u00edficos y limitaciones. A trav\u00e9s de explicaciones detalladas y ejemplos pr\u00e1cticos, aprender\u00e1s c\u00f3mo usar estas herramientas en JavaScript, cu\u00e1ndo elegir cada una y c\u00f3mo implementarlas de manera eficiente y segura.</p>"},{"location":"tutorials/p8/#que-es-el-almacenamiento-en-el-navegador","title":"\u00bfQu\u00e9 es el Almacenamiento en el Navegador?","text":"<p>El almacenamiento en el navegador permite guardar datos en el dispositivo del usuario para que las aplicaciones web puedan acceder a ellos sin necesidad de un servidor. Las tres tecnolog\u00edas principales son:</p> <ul> <li>Local Storage: Almacena datos de forma persistente sin fecha de caducidad, accesibles hasta que se eliminen manualmente.</li> <li>Session Storage: Almacena datos solo durante la duraci\u00f3n de una pesta\u00f1a del navegador, elimin\u00e1ndose al cerrar la pesta\u00f1a.</li> <li>Cookies: Peque\u00f1os fragmentos de datos enviados al servidor en cada solicitud HTTP, con opciones de caducidad y configuraciones de seguridad.</li> </ul> <p>Estas tecnolog\u00edas forman parte de la API Web Storage (para Local Storage y Session Storage) y de la gesti\u00f3n de cookies a trav\u00e9s del objeto <code>document.cookie</code>. A continuaci\u00f3n, se detalla cada una, sus m\u00e9todos, ejemplos pr\u00e1cticos y mejores pr\u00e1cticas.</p>"},{"location":"tutorials/p8/#comparacion-general","title":"Comparaci\u00f3n General","text":"<p>Antes de profundizar, aqu\u00ed tienes una comparaci\u00f3n para entender las diferencias clave:</p> Caracter\u00edstica Local Storage Session Storage Cookies Persistencia Persiste hasta eliminaci\u00f3n manual Dura hasta cerrar la pesta\u00f1a Configurable (sesi\u00f3n o fecha espec\u00edfica) Capacidad 5-10 MB 5-10 MB ~4 KB por cookie, ~50 cookies por dominio Acceso Solo cliente (JavaScript) Solo cliente (JavaScript) Cliente y servidor (enviadas en headers HTTP) API Simple (clave-valor) Simple (clave-valor) Compleja (parsing manual) Uso t\u00edpico Preferencias, estados persistentes Estados temporales Autenticaci\u00f3n, seguimiento Soporte HTTPS No requiere configuraci\u00f3n especial No requiere configuraci\u00f3n especial Requiere <code>Secure</code> para HTTPS <p>Cu\u00e1ndo usar cada una:</p> <ul> <li>Local Storage: Para datos persistentes como configuraciones de usuario o estados de aplicaciones sin backend.</li> <li>Session Storage: Para datos temporales, como formularios en una sola sesi\u00f3n o estados de navegaci\u00f3n.</li> <li>Cookies: Para datos que deben enviarse al servidor, como tokens de autenticaci\u00f3n o seguimiento de sesiones.</li> </ul>"},{"location":"tutorials/p8/#1-local-storage","title":"1. Local Storage","text":""},{"location":"tutorials/p8/#descripcion","title":"Descripci\u00f3n","text":"<p>Local Storage forma parte de la API Web Storage y permite almacenar datos en formato clave-valor como cadenas de texto. Los datos persisten indefinidamente, incluso despu\u00e9s de cerrar el navegador, hasta que se eliminan manualmente. Es ideal para guardar preferencias de usuario, datos de formularios o estados de aplicaciones.</p>"},{"location":"tutorials/p8/#metodos-de-la-api","title":"M\u00e9todos de la API","text":"<p>El objeto global <code>localStorage</code> proporciona los siguientes m\u00e9todos:</p> <ul> <li><code>setItem(clave, valor)</code>: Guarda un valor asociado a una clave.</li> <li><code>getItem(clave)</code>: Recupera el valor de una clave. Devuelve <code>null</code> si no existe.</li> <li><code>removeItem(clave)</code>: Elimina una clave espec\u00edfica.</li> <li><code>clear()</code>: Elimina todos los datos de Local Storage para el dominio.</li> <li><code>key(indice)</code>: Devuelve la clave en la posici\u00f3n especificada.</li> <li>Propiedad <code>length</code>: Indica el n\u00famero de pares clave-valor almacenados.</li> </ul>"},{"location":"tutorials/p8/#ejemplo-1-guardar-y-recuperar-preferencias-de-tema","title":"Ejemplo 1: Guardar y Recuperar Preferencias de Tema","text":"<p>Este ejemplo permite al usuario alternar entre un tema claro y oscuro, guardando la preferencia en Local Storage.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Preferencias de Tema&lt;/title&gt;\n  &lt;style&gt;\n    .claro { background: white; color: black; }\n    .oscuro { background: #333; color: white; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Selecciona un Tema&lt;/h1&gt;\n  &lt;button id=\"toggleTema\"&gt;Cambiar Tema&lt;/button&gt;\n  &lt;p&gt;Estado actual: &lt;span id=\"estadoTema\"&gt;&lt;/span&gt;&lt;/p&gt;\n  &lt;script&gt;\n    const boton = document.getElementById('toggleTema');\n    const cuerpo = document.body;\n    const estadoTema = document.getElementById('estadoTema');\n\n    // Cargar tema guardado\n    const temaGuardado = localStorage.getItem('tema') || 'claro';\n    cuerpo.className = temaGuardado;\n    estadoTema.textContent = temaGuardado;\n\n    // Cambiar tema al hacer clic\n    boton.addEventListener('click', () =&gt; {\n      const nuevoTema = cuerpo.className === 'claro' ? 'oscuro' : 'claro';\n      cuerpo.className = nuevoTema;\n      localStorage.setItem('tema', nuevoTema);\n      estadoTema.textContent = nuevoTema;\n    });\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Se verifica si existe un tema guardado en <code>localStorage.getItem('tema')</code>. Si no, se usa 'claro' por defecto.</li> <li>Al hacer clic en el bot\u00f3n, se alterna entre los temas <code>claro</code> y <code>oscuro</code>, actualizando <code>localStorage</code> y la interfaz.</li> <li>El estado del tema se muestra en un elemento <code>&lt;span&gt;</code> para retroalimentaci\u00f3n.</li> </ul>"},{"location":"tutorials/p8/#2-session-storage","title":"2. Session Storage","text":""},{"location":"tutorials/p8/#descripcion_1","title":"Descripci\u00f3n","text":"<p>Session Storage es similar a Local Storage, pero los datos solo persisten durante la vida de una pesta\u00f1a del navegador. Cuando la pesta\u00f1a se cierra, los datos se eliminan. Es \u00fatil para datos temporales, como formularios en una sola sesi\u00f3n o estados de navegaci\u00f3n.</p>"},{"location":"tutorials/p8/#metodos-de-la-api_1","title":"M\u00e9todos de la API","text":"<p>La API de <code>sessionStorage</code> es id\u00e9ntica a la de <code>localStorage</code>:</p> <ul> <li><code>setItem(clave, valor)</code></li> <li><code>getItem(clave)</code></li> <li><code>removeItem(clave)</code></li> <li><code>clear()</code></li> <li><code>key(indice)</code></li> <li>Propiedad <code>length</code></li> </ul>"},{"location":"tutorials/p8/#ejemplo-2-guardar-estado-de-formulario-en-una-sesion","title":"Ejemplo 2: Guardar Estado de Formulario en una Sesi\u00f3n","text":"<p>Este ejemplo guarda los datos de un formulario en Session Storage mientras la pesta\u00f1a est\u00e1 abierta.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Formulario Temporal&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Formulario Temporal&lt;/h1&gt;\n  &lt;form id=\"formulario\"&gt;\n    &lt;label&gt;Nombre: &lt;input type=\"text\" id=\"nombre\"&gt;&lt;/label&gt;&lt;br&gt;\n    &lt;label&gt;Email: &lt;input type=\"email\" id=\"email\"&gt;&lt;/label&gt;&lt;br&gt;\n    &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n  &lt;/form&gt;\n  &lt;p&gt;Datos guardados: &lt;span id=\"datosGuardados\"&gt;&lt;/span&gt;&lt;/p&gt;\n  &lt;script&gt;\n    const formulario = document.getElementById('formulario');\n    const nombreInput = document.getElementById('nombre');\n    const emailInput = document.getElementById('email');\n    const datosGuardados = document.getElementById('datosGuardados');\n\n    // Cargar datos guardados\n    nombreInput.value = sessionStorage.getItem('nombre') || '';\n    emailInput.value = sessionStorage.getItem('email') || '';\n    actualizarDatosGuardados();\n\n    // Guardar datos al cambiar\n    nombreInput.addEventListener('input', () =&gt; {\n      sessionStorage.setItem('nombre', nombreInput.value);\n      actualizarDatosGuardados();\n    });\n    emailInput.addEventListener('input', () =&gt; {\n      sessionStorage.setItem('email', emailInput.value);\n      actualizarDatosGuardados();\n    });\n\n    // Mostrar datos guardados\n    function actualizarDatosGuardados() {\n      datosGuardados.textContent = `Nombre: ${sessionStorage.getItem('nombre') || ''}, Email: ${sessionStorage.getItem('email') || ''}`;\n    }\n\n    // Limpiar al enviar\n    formulario.addEventListener('submit', (e) =&gt; {\n      e.preventDefault();\n      sessionStorage.removeItem('nombre');\n      sessionStorage.removeItem('email');\n      formulario.reset();\n      datosGuardados.textContent = 'Formulario enviado y datos limpiados';\n    });\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Los datos del formulario se guardan en <code>sessionStorage</code> mientras el usuario escribe.</li> <li>Al recargar la p\u00e1gina (mientras la pesta\u00f1a est\u00e9 abierta), los datos persisten.</li> <li>Al enviar el formulario, los datos se eliminan y el formulario se reinicia.</li> <li>Un elemento <code>&lt;span&gt;</code> muestra los datos guardados en tiempo real.</li> </ul>"},{"location":"tutorials/p8/#3-cookies","title":"3. Cookies","text":""},{"location":"tutorials/p8/#descripcion_2","title":"Descripci\u00f3n","text":"<p>Las cookies son peque\u00f1os fragmentos de datos almacenados en el navegador y enviados al servidor en cada solicitud HTTP. Son ideales para autenticaci\u00f3n, seguimiento de sesiones o personalizaci\u00f3n, pero tienen una capacidad limitada (~4 KB por cookie) y requieren un manejo m\u00e1s complejo que Local/Session Storage.</p>"},{"location":"tutorials/p8/#metodos-y-propiedades","title":"M\u00e9todos y Propiedades","text":"<p>Las cookies se gestionan a trav\u00e9s de la propiedad <code>document.cookie</code>. No hay m\u00e9todos espec\u00edficos como en Web Storage, sino que se manipulan como una cadena de texto.</p> <ul> <li>Establecer una cookie:   <pre><code>document.cookie = \"nombre=Alice; expires=Fri, 31 Dec 2025 23:59:59 GMT; path=/\";\n</code></pre></li> <li>Leer cookies:   <pre><code>console.log(document.cookie); // \"nombre=Alice; otraClave=valor\"\n</code></pre></li> <li>Eliminar una cookie: Establece una fecha de expiraci\u00f3n en el pasado.   <pre><code>document.cookie = \"nombre=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/\";\n</code></pre></li> </ul>"},{"location":"tutorials/p8/#atributos-de-cookies","title":"Atributos de Cookies","text":"<ul> <li><code>expires</code>: Fecha de caducidad (en formato UTC).</li> <li><code>max-age</code>: Duraci\u00f3n en segundos (alternativa a <code>expires</code>).</li> <li><code>path</code>: Ruta del sitio donde la cookie es v\u00e1lida (por ejemplo, <code>/</code> para todo el sitio).</li> <li><code>domain</code>: Dominio donde la cookie es v\u00e1lida (por ejemplo, <code>example.com</code>).</li> <li><code>secure</code>: Solo se env\u00eda en conexiones HTTPS.</li> <li><code>SameSite</code>: Controla el env\u00edo en solicitudes cross-site (<code>Strict</code>, <code>Lax</code>, <code>None</code>).</li> </ul>"},{"location":"tutorials/p8/#ejemplo-3-gestionar-cookies-para-un-contador-de-visitas","title":"Ejemplo 3: Gestionar Cookies para un Contador de Visitas","text":"<p>Este ejemplo usa cookies para contar las visitas a una p\u00e1gina y permite al usuario restablecer el contador.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Contador de Visitas con Cookies&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Bienvenido&lt;/h1&gt;\n  &lt;p&gt;Has visitado esta p\u00e1gina &lt;span id=\"contador\"&gt;0&lt;/span&gt; veces.&lt;/p&gt;\n  &lt;button id=\"resetear\"&gt;Restablecer Contador&lt;/button&gt;\n  &lt;script&gt;\n    const contadorSpan = document.getElementById('contador');\n    const resetearBoton = document.getElementById('resetear');\n\n    // Funci\u00f3n para obtener una cookie por nombre\n    function getCookie(nombre) {\n      const valor = `; ${document.cookie}`;\n      const partes = valor.split(`; ${nombre}=`);\n      if (partes.length === 2) return partes.pop().split(';').shift();\n      return null;\n    }\n\n    // Funci\u00f3n para establecer una cookie\n    function setCookie(nombre, valor, dias) {\n      const fecha = new Date();\n      fecha.setTime(fecha.getTime() + (dias * 24 * 60 * 60 * 1000));\n      const expires = `expires=${fecha.toUTCString()}`;\n      document.cookie = `${nombre}=${valor}; ${expires}; path=/`;\n    }\n\n    // Obtener o inicializar contador\n    let visitas = parseInt(getCookie('visitas')) || 0;\n    visitas++;\n    setCookie('visitas', visitas, 365);\n    contadorSpan.textContent = visitas;\n\n    // Restablecer contador\n    resetearBoton.addEventListener('click', () =&gt; {\n      document.cookie = 'visitas=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/';\n      visitas = 0;\n      contadorSpan.textContent = visitas;\n    });\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>La funci\u00f3n <code>getCookie</code> extrae el valor de una cookie espec\u00edfica parseando <code>document.cookie</code>.</li> <li>La funci\u00f3n <code>setCookie</code> crea una cookie con una duraci\u00f3n configurable (en d\u00edas).</li> <li>Cada vez que se carga la p\u00e1gina, el contador de visitas se incrementa y se guarda en una cookie con un a\u00f1o de validez.</li> <li>El bot\u00f3n de restablecer elimina la cookie estableciendo una fecha de expiraci\u00f3n en el pasado.</li> </ul>"},{"location":"tutorials/p8/#ejemplo-combinado-lista-de-tareas-con-local-storage-session-storage-y-cookies","title":"Ejemplo Combinado: Lista de Tareas con Local Storage, Session Storage y Cookies","text":"<p>Este ejemplo avanzado implementa una lista de tareas que usa Local Storage para tareas persistentes, Session Storage para un filtro temporal y Cookies para rastrear el tiempo de la \u00faltima sesi\u00f3n.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Lista de Tareas Avanzada&lt;/title&gt;\n  &lt;style&gt;\n    .tarea { margin: 5px 0; }\n    .completada { text-decoration: line-through; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Lista de Tareas&lt;/h1&gt;\n  &lt;p&gt;\u00daltima sesi\u00f3n: &lt;span id=\"ultimaSesion\"&gt;No registrada&lt;/span&gt;&lt;/p&gt;\n  &lt;input type=\"text\" id=\"nuevaTarea\" placeholder=\"Nueva tarea\"&gt;\n  &lt;button id=\"agregar\"&gt;Agregar&lt;/button&gt;\n  &lt;label&gt;&lt;input type=\"checkbox\" id=\"filtroCompletadas\"&gt; Mostrar solo completadas&lt;/label&gt;\n  &lt;ul id=\"listaTareas\"&gt;&lt;/ul&gt;\n  &lt;script&gt;\n    const inputTarea = document.getElementById('nuevaTarea');\n    const botonAgregar = document.getElementById('agregar');\n    const listaTareas = document.getElementById('listaTareas');\n    const filtroCompletadas = document.getElementById('filtroCompletadas');\n    const ultimaSesion = document.getElementById('ultimaSesion');\n\n    // Funciones para cookies\n    function setCookie(nombre, valor, dias) {\n      const fecha = new Date();\n      fecha.setTime(fecha.getTime() + (dias * 24 * 60 * 60 * 1000));\n      document.cookie = `${nombre}=${valor}; expires=${fecha.toUTCString()}; path=/; SameSite=Lax`;\n    }\n\n    function getCookie(nombre) {\n      const valor = `; ${document.cookie}`;\n      const partes = valor.split(`; ${nombre}=`);\n      if (partes.length === 2) return partes.pop().split(';').shift();\n      return null;\n    }\n\n    // Guardar \u00faltima sesi\u00f3n\n    const ahora = new Date().toLocaleString();\n    setCookie('ultimaSesion', ahora, 30);\n    ultimaSesion.textContent = getCookie('ultimaSesion') || 'No registrada';\n\n    // Cargar tareas desde Local Storage\n    let tareas = JSON.parse(localStorage.getItem('tareas')) || [];\n    let mostrarSoloCompletadas = sessionStorage.getItem('filtroCompletadas') === 'true';\n    filtroCompletadas.checked = mostrarSoloCompletadas;\n    renderizarTareas();\n\n    // Agregar tarea\n    botonAgregar.addEventListener('click', () =&gt; {\n      if (inputTarea.value.trim()) {\n        tareas.push({ texto: inputTarea.value, completada: false });\n        localStorage.setItem('tareas', JSON.stringify(tareas));\n        inputTarea.value = '';\n        renderizarTareas();\n      }\n    });\n\n    // Actualizar filtro\n    filtroCompletadas.addEventListener('change', () =&gt; {\n      mostrarSoloCompletadas = filtroCompletadas.checked;\n      sessionStorage.setItem('filtroCompletadas', mostrarSoloCompletadas);\n      renderizarTareas();\n    });\n\n    // Renderizar tareas\n    function renderizarTareas() {\n      listaTareas.innerHTML =ithelial\n\n      const tareasFiltradas = mostrarSoloCompletadas\n        ? tareas.filter(tarea =&gt; tarea.completada)\n        : tareas;\n\n      tareasFiltradas.forEach((tarea, indice) =&gt; {\n        const li = document.createElement('li');\n        li.className = 'tarea' + (tarea.completada ? ' completada' : '');\n        li.innerHTML = `\n          &lt;input type=\"checkbox\" ${tarea.completada ? 'checked' : ''}&gt;\n          ${tarea.texto}\n          &lt;button onclick=\"eliminarTarea(${indice})\"&gt;Eliminar&lt;/button&gt;\n        `;\n        listaTareas.appendChild(li);\n\n        li.querySelector('input').addEventListener('change', () =&gt; {\n          tareas[indice].completada = !tareas[indice].completada;\n          localStorage.setItem('tareas', JSON.stringify(tareas));\n          renderizarTareas();\n        });\n      });\n    }\n\n    // Eliminar tarea\n    window.eliminarTarea = (indice) =&gt; {\n      tareas.splice(indice, 1);\n      localStorage.setItem('tareas', JSON.stringify(tareas));\n      renderizarTareas();\n    };\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Local Storage: Almacena la lista de tareas de forma persistente.</li> <li>Session Storage: Guarda el estado del filtro de tareas completadas, que se reinicia al cerrar la pesta\u00f1a.</li> <li>Cookies: Registra la fecha y hora de la \u00faltima sesi\u00f3n, enviada al servidor si es necesario.</li> <li>El filtro permite mostrar solo tareas completadas, actualizando la interfaz din\u00e1micamente.</li> <li>La cookie <code>ultimaSesion</code> tiene una validez de 30 d\u00edas y usa <code>SameSite=Lax</code> para seguridad.</li> </ul>"},{"location":"tutorials/p8/#limitaciones","title":"Limitaciones","text":""},{"location":"tutorials/p8/#local-storage","title":"Local Storage","text":"<ul> <li>Capacidad: 5-10 MB, dependiendo del navegador.</li> <li>Solo texto: Requiere <code>JSON.stringify</code>/<code>JSON.parse</code> para datos complejos.</li> <li>S\u00edncrono: Puede ralentizar la aplicaci\u00f3n con grandes datos.</li> <li>Alcance: Limitado al dominio y protocolo.</li> </ul>"},{"location":"tutorials/p8/#session-storage","title":"Session Storage","text":"<ul> <li>Temporal: Los datos se pierden al cerrar la pesta\u00f1a.</li> <li>Capacidad: Similar a Local Storage (5-10 MB).</li> <li>S\u00edncrono: Igual que Local Storage.</li> <li>Alcance: Limitado a una pesta\u00f1a espec\u00edfica.</li> </ul>"},{"location":"tutorials/p8/#cookies","title":"Cookies","text":"<ul> <li>Capacidad: ~4 KB por cookie, ~50 cookies por dominio.</li> <li>Complejidad: Requiere parsing manual de <code>document.cookie</code>.</li> <li>Env\u00edo al servidor: Aumenta el tama\u00f1o de las solicitudes HTTP.</li> <li>Seguridad: Vulnerable si no se configuran con <code>Secure</code> y <code>SameSite</code>.</li> </ul>"},{"location":"tutorials/p8/#consideraciones-de-seguridad","title":"Consideraciones de Seguridad","text":"<ol> <li> <p>Datos sensibles:</p> <ul> <li>Local/Session Storage: No guardes datos sensibles (como contrase\u00f1as o tokens) sin cifrado, ya que son accesibles v\u00eda JavaScript (riesgo de XSS).</li> <li>Cookies: Usa los atributos <code>Secure</code> y <code>HttpOnly</code> para protegerlas de accesos no autorizados.</li> <li>Ejemplo de cifrado con <code>crypto-js</code>:   <pre><code>import AES from 'crypto-js/aes';\nimport CryptoJS from 'crypto-js';\nconst datos = 'secreto';\nconst cifrado = AES.encrypt(datos, 'claveSecreta').toString();\nlocalStorage.setItem('datosCifrados', cifrado);\nconst descifrado = AES.decrypt(localStorage.getItem('datosCifrados'), 'claveSecreta').toString(CryptoJS.enc.Utf8);\n</code></pre></li> </ul> </li> <li> <p>Protecci\u00f3n contra XSS:</p> <ul> <li>Sanitiza entradas del usuario para evitar inyecciones de scripts que accedan a <code>localStorage</code>, <code>sessionStorage</code> o <code>document.cookie</code>.</li> <li>Usa bibliotecas como <code>DOMPurify</code> para limpiar HTML.</li> </ul> </li> <li> <p>Errores de cuota:</p> <ul> <li>Maneja errores de almacenamiento completo con <code>try-catch</code>:   <pre><code>try {\n  localStorage.setItem('clave', 'valor');\n} catch (e) {\n  console.error('Error de almacenamiento:', e);\n}\n</code></pre></li> </ul> </li> <li> <p>Cookies seguras:</p> <ul> <li>Usa <code>Secure</code> para HTTPS y <code>SameSite=Strict</code> o <code>Lax</code> para evitar CSRF (Cross-Site Request Forgery).</li> <li>Ejemplo:   <pre><code>document.cookie = \"nombre=valor; Secure; SameSite=Strict\";\n</code></pre></li> </ul> </li> </ol>"},{"location":"tutorials/p8/#buenas-practicas","title":"Buenas Pr\u00e1cticas","text":"<ol> <li>Usa nombres claros y prefijos: Por ejemplo, <code>miApp_tema</code> para evitar colisiones.</li> <li>Minimiza datos almacenados: Guarda solo lo necesario para optimizar el rendimiento.</li> <li> <p>Valida datos recuperados:    <pre><code>const datos = localStorage.getItem('datos');\nif (datos) {\n  try {\n    const objeto = JSON.parse(datos);\n    console.log(objeto);\n  } catch (e) {\n    console.error('Error al parsear JSON:', e);\n  }\n}\n</code></pre></p> </li> <li> <p>Limpieza regular: Elimina datos obsoletos con <code>removeItem</code> o <code>clear</code>.</p> </li> <li>Pruebas multiplataforma: Verifica el comportamiento en diferentes navegadores.</li> <li>Cookies seguras:</li> <li>Siempre configura <code>path=/</code> para cookies de todo el sitio.</li> <li>Usa <code>max-age</code> en lugar de <code>expires</code> para mayor precisi\u00f3n.</li> <li>Documentaci\u00f3n: Comenta el prop\u00f3sito de cada clave almacenada.</li> </ol>"},{"location":"tutorials/p8/#casos-de-uso-avanzados","title":"Casos de Uso Avanzados","text":""},{"location":"tutorials/p8/#1-sincronizacion-offline","title":"1. Sincronizaci\u00f3n Offline","text":"<p>Guarda datos en Local Storage cuando el usuario est\u00e1 offline y sincron\u00edzalos al reconectarse.</p> <pre><code>function guardarDatosOffline(datos) {\n  localStorage.setItem('pendientes', JSON.stringify(datos));\n}\n\nasync function sincronizarDatos() {\n  const pendientes = JSON.parse(localStorage.getItem('pendientes'));\n  if (pendientes &amp;&amp; navigator.onLine) {\n    try {\n      await fetch('/api/sincronizar', {\n        method: 'POST',\n        body: JSON.stringify(pendientes),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      localStorage.removeItem('pendientes');\n    } catch (e) {\n      console.error('Error de sincronizaci\u00f3n:', e);\n    }\n  }\n}\n\nwindow.addEventListener('online', sincronizarDatos);\n</code></pre>"},{"location":"tutorials/p8/#2-cache-de-recursos","title":"2. Cache de Recursos","text":"<p>Usa Local Storage para almacenar respuestas de API y reducir solicitudes.</p> <pre><code>async function obtenerDatosConCache(url) {\n  const cache = localStorage.getItem(url);\n  if (cache) {\n    return JSON.parse(cache);\n  }\n  const respuesta = await fetch(url);\n  const datos = await respuesta.json();\n  localStorage.setItem(url, JSON.stringify(datos));\n  return datos;\n}\n</code></pre>"},{"location":"tutorials/p8/#3-gestion-de-sesiones-con-cookies","title":"3. Gesti\u00f3n de Sesiones con Cookies","text":"<p>Usa cookies para gestionar sesiones de usuario.</p> <pre><code>function iniciarSesion(token) {\n  setCookie('sessionToken', token, 1); // 1 d\u00eda\n}\n\nfunction cerrarSesion() {\n  document.cookie = 'sessionToken=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/';\n}\n\nfunction estaLogueado() {\n  return !!getCookie('sessionToken');\n}\n</code></pre>"}]}